{
  "index": 537,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Create a video format conversion tool where users can upload videos in different formats and select a target format (such as MP4, AVI, MOV, etc.) for conversion. Provide a conversion progress display and support downloading the converted video.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the video upload functionality fully implemented?",
      "description": "Review whether the code properly implements file selection, upload validation (proper MIME types, file size limits), and client-side error handling. Score 0 if file upload is not implemented, 5 if only basic upload is present without validation, and 10 if comprehensive upload handling with proper file type checking, size limitations, and error handling is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the format conversion mechanism properly implemented?",
      "description": "Check whether the back-end conversion logic uses reliable libraries (like FFmpeg), handles various input formats correctly, and provides proper error handling for malformed files. Deduct 5 points if only a limited set of formats is supported, and 3 points if file integrity verification is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the conversion progress display functioning correctly?",
      "description": "Evaluate whether the application provides real-time progress updates through a WebSocket or polling mechanism, displays meaningful progress indicators (not just indeterminate loaders), and handles edge cases like stalled conversions. Deduct 5 points if progress updates are not real-time, and 3 points if the UI doesn't show precise percentage completion. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the download functionality implemented with proper handling?",
      "description": "Verify that the download mechanism creates proper file names, sets correct MIME types, handles large files appropriately (possibly using streaming), and provides fallbacks if browser download APIs fail. Deduct 5 points if download doesn't handle large files efficiently, and 3 points if there's no download status indication. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as unsupported formats, corrupted files, server timeout, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Video preview before/after conversion 2. Batch processing capability 3. Custom encoding parameters 4. Video trimming or basic editing). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file upload mechanisms coexisting) 2. Function modules unrelated to video conversion (e.g., a built-in media player with unnecessary features) 3. Fancy effects that affect performance (e.g., excessive animations during conversion). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating upload/conversion/download logic), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Upload and conversion state changes are visually clear 2) Transition animations are controlled between 300-500ms 3) Clear visual focus guidance for primary actions. Deduct 5 points for each operation without feedback, 3 points for jittery progress indicators, and 5 points for confusing conversion workflow UI. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Multimedia Editing-Video Production",
  "difficulty": "medium"
}
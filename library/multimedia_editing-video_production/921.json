{
  "index": 921,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable and demonstrable. Requirement: Upload a portrait photo, input a text, and synthesize a video output where the photo serves as the video background and the text appears as the video subtitle. Please provide the code implementation.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the image upload and processing functionality fully implemented?",
      "description": "Review whether the code accurately implements file upload validation (format checking for jpg/png/webp), image preprocessing (resolution optimization, aspect ratio adjustment), and canvas rendering capabilities. Score 0 if basic upload is not implemented, 5 if only simple upload without validation exists, and 10 if complete image processing pipeline with error handling is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the text input and subtitle rendering system properly constructed?",
      "description": "Check whether the implementation includes text input validation, subtitle timing control, multi-line text handling, and proper text encoding support. Evaluate subtitle positioning algorithms, font rendering quality, and text overflow handling. Deduct 5 points if subtitle synchronization is missing, and 3 points if special characters are not properly handled. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the video synthesis and export functionality complete?",
      "description": "Evaluate whether the video generation uses proper encoding (H.264/WebM), includes audio track handling, and provides multiple output format options. Check if the implementation supports different video resolutions and frame rates. Deduct 5 points if video quality is below 720p, and 3 points if export progress tracking is missing. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the complete media processing pipeline optimized?",
      "description": "Check whether the code includes efficient memory management for large files, background processing for video generation, and proper cleanup of temporary resources. Evaluate streaming processing capabilities and batch operation support. Deduct 5 points if memory leaks are present, and 3 points if processing cancellation is not supported. Give 10 points if fully optimized.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted image files, oversized uploads, invalid text input, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time preview during editing 2. Multiple subtitle animation effects 3. Background music integration 4. Batch processing capabilities 5. Social sharing options). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file upload handlers coexisting) 2. Function modules unrelated to video synthesis (e.g., built-in photo editor) 3. Fancy effects that affect performance (e.g., unnecessary real-time filters). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating upload/processing/rendering layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times) 4) Clear upload area design with drag-and-drop visual cues. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Upload progress feedback with smooth animations 2) Processing status indicators with clear transitions 3) Preview functionality with instant response 4) Export progress with accurate time estimates. Deduct 5 points for each operation without feedback, 3 points for laggy preview rendering, and 5 points for unclear processing status. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Multimedia Editing-Video Production",
  "difficulty": "medium"
}
{
  "index": 1212,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable and can be demonstrated. Write a media player frontend using Flutter.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core media playback functionality implemented?",
      "description": "Check whether the code uses Flutter's video_player or better_player packages correctly, implements basic controls (play/pause, seek, volume), and handles different media formats (mp4, mp3, etc.). Score 0 if core playback is missing, 5 if only basic playback works, and 10 if it handles multiple formats with proper state management.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the player UI responsive and adaptive?",
      "description": "Evaluate if the UI adapts to different screen sizes and orientations (portrait/landscape). Check for proper handling of SafeArea, system UI overlays, and if it implements different layouts for phones, tablets, and desktop. Deduct 5 points if the UI breaks on orientation change, and 3 points if it doesn't adapt to different screen sizes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are advanced media features implemented?",
      "description": "Check for implementation of features like playlist management, favorites, history, speed control, subtitle support, and picture-in-picture mode. Score 3 points for basic playlist, 5 points if it includes history/favorites, and 10 points if advanced features like subtitles and PIP are properly implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is state management properly implemented?",
      "description": "Assess whether the code uses proper Flutter state management solutions (Provider, Bloc, Riverpod, etc.) to handle media state, buffering status, and UI updates. Check for separation between UI and business logic. Deduct 5 points for global state leaks, 3 points for excessive rebuilds, and 5 points if state management is inconsistent across the app. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as failed network requests, codec errors, permission denials, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Custom gesture controls 2. Audio visualization effects 3. Smart recommendations based on viewing history). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple volume control mechanisms coexisting) 2. Function modules unrelated to media playback (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations during playback). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/controllers/services), widget composition, code reusability, and proper use of Flutter architecture patterns. Deduct 5 points if widget trees are too deeply nested; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation of concerns between layers. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows Material Design or Cupertino principles: 1) Consistent theming (proper use of ThemeData) 2) Proper layout spacing (appropriate padding and margins) 3) Professional typography system (using TextTheme appropriately). Deduct 3 points for each inconsistent visual element, 5 points for clashing colors or themes, and 5 points for poor accessibility features (contrast, touch targets). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the animations and transitions conform to Flutter's design principles: 1) Smooth animations at 60fps 2) Proper use of Hero animations for transitions 3) Haptic feedback and visual responses to user input. Deduct 5 points for jank or stuttering during playback, 3 points for abrupt transitions between screens, and 5 points for unresponsive UI during media loading. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Multimedia Editing-Video Production",
  "difficulty": "medium"
}
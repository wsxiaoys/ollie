{
  "index": 374,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration. Implement a Java solution for Android that loads local soccer video files and generates a top-down view (sandbox view). Please provide complete code that is error-free.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Android video loading mechanism fully implemented?",
      "description": "Review whether the code correctly implements video file loading using MediaPlayer/ExoPlayer/VideoView with proper Android lifecycle management. Check if it includes file format validation (MP4/AVI/MOV), storage permission handling, and video metadata extraction. Score 0 if core video loading fails, 5 if only basic playback works without format validation, and 10 if all video formats are supported with proper error handling and metadata parsing.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the top-down view transformation algorithm correctly implemented?",
      "description": "Evaluate whether the perspective transformation from standard soccer video to top-down sandbox view is mathematically accurate. Check if homography matrix calculation, field corner detection, and real-time frame processing are implemented. The algorithm should handle camera angle variations and field distortion correction. Deduct 5 points if transformation is inaccurate, 3 points if field boundaries are not properly detected. Full score requires smooth real-time processing at ≥24fps.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the computer vision processing pipeline optimized for Android?",
      "description": "Check whether OpenCV or equivalent CV library integration is properly configured for Android with native NDK optimization. Evaluate if player/ball tracking, field line detection, and coordinate mapping are implemented efficiently. Verify GPU acceleration usage and memory management for video processing. Deduct 5 points if processing causes UI freezing, 3 points if memory leaks are detected during continuous playback.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the sandbox view rendering system complete?",
      "description": "Assess whether the top-down field visualization includes accurate player position mapping, trajectory tracking, and field proportions. Check if the rendering uses Canvas/OpenGL ES with smooth animations and real-time updates synchronized with video playback. Verify if tactical overlays, player identification, and minimap functionality are implemented. Give 10 points for complete sandbox features, 5 for basic position mapping only.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted video files, insufficient memory, device orientation changes, app backgrounding, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle these edge cases and maintain stable performance across different Android devices, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time tactical analysis overlay 2. Player heatmap generation 3. Speed/distance statistics 4. Multi-angle view synchronization 5. Gesture-controlled playback). Add 3 points for each practical innovative feature implemented that adds genuine value to soccer video analysis (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple video decoders coexisting) 2. Function modules unrelated to soccer video analysis (e.g., built-in social media sharing) 3. Heavy processing that affects performance (e.g., unnecessary high-resolution transformations). Deduct 3 points for each redundancy found, and directly deduct 10 points if core video processing is interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review Android-specific engineering practices: proper Activity/Fragment lifecycle management, AsyncTask/Executor usage for background processing, ProGuard configuration, and modular architecture (MVP/MVVM). Check memory leak prevention, proper resource disposal, and build.gradle optimization. Deduct 5 points if ANR risks are found; deduct 5 points if code duplication rate exceeds 30%; deduct 5 points if no proper threading architecture. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the Android UI follows Material Design principles: 1) Consistent color scheme following soccer field aesthetics (green field, white lines) 2) Proper touch target sizes (≥48dp) and spacing following 8dp grid 3) Professional typography using Roboto font family with readable sizes (≥14sp). Deduct 3 points for each crowded visual element, 5 points for non-Material Design patterns, and 5 points for poor contrast ratios affecting readability.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the Android app interactions meet performance standards: 1) Touch response delay ≤100ms for all controls 2) Video seeking and transformation updates within 200ms 3) Smooth 60fps UI animations with proper motion curves 4) Intuitive gesture controls for zoom/pan in sandbox view. Deduct 5 points for each laggy interaction, 3 points for stuttering video playback, and 5 points for unresponsive touch controls during processing.",
      "maxScore": 10
    }
  ],
  "class": "Multimedia Editing-Video Production",
  "difficulty": "hard"
}
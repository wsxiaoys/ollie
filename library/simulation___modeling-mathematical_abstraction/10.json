{
  "index": 10,
  "question": "You are a code expert. Please use your professional knowledge to provide accurate and professional responses. Make sure the generated code is executable for demonstration purposes. I'd like to make a JS simulation of a sphere where the universe of Conway's Game of Life is unfolding, multicolor, lots of small squares, on a black background.",
  "checklist": [
    {
      "id": 0,
      "title": "Is Conway's Game of Life algorithm correctly implemented?",
      "description": "Review whether the code accurately implements Conway's Game of Life rules: 1) Live cells with 2-3 neighbors survive 2) Dead cells with exactly 3 neighbors become alive 3) All other cells die or remain dead. Check if the algorithm uses proper neighbor counting for spherical topology (handling pole singularities and longitude wrapping). Score 0 if core rules are missing, 5 if basic rules work but topology is incorrect, 10 if fully implemented with proper spherical neighbor calculation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the spherical 3D visualization properly rendered?",
      "description": "Evaluate whether the sphere rendering uses appropriate 3D graphics (WebGL/Three.js) with correct UV mapping for cellular automata grid projection. Check if the sphere maintains consistent cell size across surface, handles texture distortion at poles, and implements proper camera controls (rotation, zoom). Deduct 5 points if using 2D approximation instead of true 3D sphere, 3 points if pole distortion is severe. Full score requires smooth sphere with uniform cell distribution.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are multicolor visual effects and animations implemented effectively?",
      "description": "Check whether the visualization includes dynamic color systems: 1) Different colors for cell states/ages 2) Smooth color transitions during state changes 3) Visually appealing color palette against black background. Evaluate animation smoothness (60fps target) and visual clarity of individual cells. Deduct 5 points if colors are static or harsh, 3 points if animation stutters or cells are hard to distinguish. Requires color coding system and smooth real-time updates.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the grid resolution and performance optimization adequate?",
      "description": "Assess whether the implementation supports 'lots of small squares' (minimum 100x50 grid resolution) while maintaining smooth performance. Check for optimization techniques like efficient neighbor calculation, WebGL batching, or delta-based updates. Evaluate if the system can handle multiple generations without performance degradation. Deduct 5 points if grid resolution is too low (<50x25), 5 points if frame rate drops below 30fps, 3 points if memory usage grows unbounded over time.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as WebGL context loss, browser compatibility issues, extreme zoom levels, invalid initial patterns, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should gracefully degrade on older browsers and handle edge cases effectively, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive seeding by clicking on sphere 2. Multiple preset patterns (gliders, oscillators) adapted for spherical topology 3. Speed controls and generation counter 4. Cell age visualization with color gradients 5. Export/import pattern functionality). Add 2 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple rendering pipelines coexisting) 2. Function modules unrelated to Game of Life simulation (e.g., built-in audio player) 3. Fancy effects that severely impact performance (e.g., excessive particle systems, complex shaders). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core simulation performance is compromised by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/rendering/input handling), code organization, and maintainability. Check for proper separation of concerns between Game of Life engine and 3D visualization. Deduct 5 points if global state pollution is found or no clear architecture; deduct 5 points if the code duplication rate is too high (over 30%); deduct 3 points if hardcoded magic numbers are excessive. The full score requires clean, well-structured code with clear separation of responsibilities.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern 3D visualization principles: 1) High contrast multicolor cells against pure black background for optimal visibility 2) Appropriate cell size ensuring individual squares are distinguishable 3) Professional color palette with sufficient variety but visual harmony 4) Clean UI controls if present. Deduct 3 points for poor color choices that reduce visibility, 5 points if cells are too small/large to distinguish effectively, 5 points for cluttered or unprofessional visual appearance.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the 3D interaction and animation conform to user expectations: 1) Smooth sphere rotation with mouse/touch controls 2) Responsive zoom without breaking cell visibility 3) Consistent animation timing for Game of Life generations 4) Immediate visual feedback for any interactive elements. Deduct 5 points for laggy or jerky sphere manipulation, 3 points for inconsistent animation timing, 5 points for unresponsive controls or poor camera behavior. Full score requires fluid 60fps 3D interaction.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Mathematical Abstraction",
  "difficulty": "medium"
}
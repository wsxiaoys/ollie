{
  "index": 930,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Help me write a web program that simulates the MQTT protocol for IoT, specifically demonstrating the data transmission process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the MQTT simulation core functionality fully implemented?",
      "description": "Review whether the code correctly implements the core MQTT features including connect, publish, subscribe, unsubscribe and disconnect operations. Check if quality of service (QoS) levels (0, 1, 2) are properly simulated. Score 0 if core MQTT operations are missing, 5 if basic pub/sub is implemented without QoS support, and 10 if all core MQTT operations with QoS levels are fully simulated.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the broker simulation component properly designed?",
      "description": "Evaluate if the code includes a properly designed broker component that handles client connections, topic subscriptions, message routing, and session management. Check if the broker maintains subscription lists and efficiently delivers messages to subscribers. Deduct 5 points if the broker doesn't handle retained messages, 3 points if it lacks proper client ID management, and 3 points if it doesn't implement last will message functionality. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the client-broker interaction flow visually demonstrated?",
      "description": "Check whether the simulation visually demonstrates the message flow between clients and broker with clear packet visualization (CONNECT, CONNACK, PUBLISH, PUBACK, etc.). Assess if the visualization shows packet headers, payload content, and direction of transmission. Deduct 5 points if packet structure is not displayed, 3 points if message flow direction is unclear, and 3 points if packet timing is not represented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the simulation demonstrate typical IoT scenarios?",
      "description": "Assess whether the code includes practical IoT scenarios such as sensor data publishing, device state changes, command reception, or telemetry reporting. Check if realistic topic structures are used (e.g., 'devices/sensor1/temperature'). Award 3 points for each well-implemented IoT scenario (up to 10 points). Deduct 5 points if scenarios are technically accurate but not representative of real IoT use cases.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as connection failures, network interruptions, malformed packets, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time network traffic visualization 2. Interactive message inspector 3. Protocol comparison with HTTP/WebSockets 4. Simulated network latency/packet loss controls). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple message handling logics coexisting) 2. Function modules unrelated to MQTT simulation (e.g., unrelated animations) 3. Fancy effects that affect performance (e.g., excessive visual elements). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating protocol logic/view/network layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Message transmission animations reflect actual protocol timing 2) Transition animation duration controlled between 300-500ms 3) Clear visual indication of connection states and events. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast message exchanges, and 5 points for hard-to-follow message flows. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Mathematical Abstraction",
  "difficulty": "hard"
}
{
  "index": 759,
  "question": "You are a coding expert. Please use your professional knowledge to generate accurate, professional responses. Make sure the code you provide is executable and displayable. Create a first-person shooter game that can be opened in a browser with a double-click.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the first-person perspective accurately implemented?",
      "description": "Verify if the code correctly implements the first-person camera perspective with proper field of view (FOV between 75-90 degrees), mouse look controls, and head bobbing effects. Check if the camera is positioned at eye level and responds naturally to player movement. Score 0 if first-person view is not implemented, 5 if basic implementation exists but with perspective issues, and 10 if the perspective is fully immersive with proper raycasting for interaction.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the shooting mechanism well-implemented?",
      "description": "Evaluate the shooting mechanism including gun models, recoil animation, bullet trajectory visualization, hit detection, and damage feedback. Check if there's proper weapon handling (reloading, weapon switching). Deduct 3 points if hitbox detection is imprecise, 4 points if there's no recoil or weapon feedback, and 5 points if bullet physics are unrealistic (instant hits instead of projectile physics when appropriate). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game environment properly constructed?",
      "description": "Assess whether the 3D game environment includes collision detection, level design with appropriate cover and gameplay areas, and proper lighting effects. Check if the map has logical structure and performance optimization (LOD, occlusion culling). Deduct 5 points if collision is broken, 3 points if the environment lacks gameplay elements, and 3 points if rendering performance drops below 30 FPS on standard hardware. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game playable with a simple double-click?",
      "description": "Verify that the game can be launched by double-clicking an HTML file without requiring server setup, additional installations, or complex configurations. Check if all assets are properly bundled or loaded efficiently. Deduct 10 points if server setup is required, 5 points if there are missing assets or CORS issues, and 3 points if loading time exceeds 10 seconds on standard hardware. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser compatibility issues, unexpected user inputs, resource loading failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic weather/lighting effects 2. Destructible environment elements 3. AI opponents with advanced behavior 4. Physics-based interaction). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple control systems coexisting) 2. Function modules unrelated to an FPS game (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle systems or post-processing). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/rendering/input handling), code organization, and asset management. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no asset preloading or optimization. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the UI elements (HUD, menus, crosshair) follow modern game design principles: 1) Non-intrusive HUD elements that don't obstruct gameplay 2) Clear visual indicators for health, ammo, and objectives 3) Consistent visual language throughout all UI components. Deduct 3 points for cluttered UI elements, 5 points for poor readability during gameplay, and 5 points for inconsistent design language. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game controls and feedback conform to FPS standards: 1) Input lag â‰¤ 50ms 2) Consistent frame rate above 30 FPS 3) Proper visual and audio feedback for all player actions. Deduct 5 points for noticeable input lag, 3 points for frame drops during action sequences, and 5 points for missing feedback on critical actions (shooting, taking damage, etc.). The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Shooting",
  "difficulty": "hard"
}
{
  "index": 1719,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable when possible. Help me write code for a shooting game where each match has 100 players, with teams of 4 people. The last person or team standing wins and receives 100 points. Set up the ranking system however you think is best.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core battle royale gameplay mechanism properly implemented?",
      "description": "Review whether the code accurately implements the 100-player battle royale system through appropriate data structures, including handling 4-player teams, player elimination tracking, and determining the last player/team standing. Check if the victory condition (last player/team standing gets 100 points) is correctly implemented. Score 0 if core game logic is missing, 5 if only basic elimination is implemented, 10 if the full team-based battle royale system is implemented with proper state management.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the team coordination system fully functional?",
      "description": "Evaluate the implementation of the 4-player team mechanics, including team formation, in-game communication between team members, shared information (e.g., marking enemies, sharing resources), and team status tracking. Deduct 3 points if team coordination features are limited, 5 points if there's no way for teams to communicate or coordinate. The full score is 10 points if the team system is comprehensive with features like reviving teammates, sharing resources, etc.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the ranking system well-designed and implemented?",
      "description": "Check whether the ranking system is comprehensive and fair, including MMR (Matchmaking Rating) calculations, tier/division system, seasonal resets, and performance-based adjustments. Point distribution should account for placement, eliminations, and possibly other factors. Deduct 5 points if the ranking is simplistic (only win/loss), 3 points if there's no anti-boosting mechanism. Full score for a sophisticated ELO-based or Glicko system with proper rank distribution.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the matchmaking system balanced and efficient?",
      "description": "Analyze the matchmaking algorithm that forms 25 teams of 4 players each. It should balance team skill levels, minimize wait times, and handle edge cases (disconnections, partial teams). Deduct 5 points if skill balancing is missing, 3 points if there's no provision for handling disconnects during matchmaking. Full points for a system that optimizes both team balance and queue times with proper fallback mechanisms.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as player disconnections, team imbalance, cheating attempts, edge cases in combat) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic map elements that change during gameplay 2. Special team-based abilities or synergies 3. Interactive spectator mode for eliminated players). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple healing systems that overlap) 2. Function modules unrelated to a battle royale shooter (e.g., a built-in social media feed) 3. Fancy effects that affect performance (e.g., excessive particle systems that would cause lag in a 100-player game). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/network layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern game UI principles: 1) Clear HUD showing team status, player health, map, and elimination feed 2) Proper information hierarchy (critical info like health more prominent) 3) Non-intrusive UI that doesn't block gameplay. Deduct 3 points for cluttered interfaces, 5 points for poorly contrasted or unreadable text during action, and 5 points for necessary information being hard to access quickly. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game's responsive feedback conforms to expected shooter standards: 1) Hit registration feedback under 50ms 2) Weapon switching/reloading animations with appropriate duration 3) Clear visual and audio cues for critical events (damage taken, teammates down). Deduct 5 points for laggy combat mechanics, 3 points for confusing or missing team status updates, and 5 points for unclear danger indicators. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Shooting",
  "difficulty": "hard"
}
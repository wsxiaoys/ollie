{
  "index": 1562,
  "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration. Help me create a webpage with a 2D shooting mini-game similar to Contra.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core shooting game mechanics fully implemented?",
      "description": "Review whether the code accurately implements player movement (8-directional control), weapon shooting system with different bullet types, enemy AI behavior patterns, and collision detection between bullets/enemies/environment. Score 0 if basic shooting mechanics are missing, 5 if only simple movement and shooting exist, and 10 if includes multiple weapon types, enemy variety, and accurate hit detection with visual feedback.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the game physics and animation system properly constructed?",
      "description": "Check whether the implementation includes smooth sprite animations (running, shooting, jumping), proper physics for bullet trajectories, gravity effects for jumping mechanics, and frame-rate independent movement. Deduct 5 points if animations are choppy or inconsistent, 3 points if physics calculations cause glitches. Evaluate sprite sheet management and animation timing. Full score requires 60fps performance with smooth character animations.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are game levels and progression mechanics implemented?",
      "description": "Evaluate whether the code includes multiple game levels with increasing difficulty, enemy spawn patterns, power-up systems (weapon upgrades, health packs), and score tracking. Check for level progression logic, checkpoint systems, and boss battles. Deduct 5 points if only single-screen gameplay exists, 3 points if no progression mechanics. Full score requires multiple levels with distinct challenges and upgrade systems.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the complete game state management system constructed?",
      "description": "Check whether the code includes comprehensive game state management covering start screen, gameplay, pause/resume, game over, and high score systems. Evaluate local storage implementation for saving progress and settings. Deduct 5 points if state transitions are buggy, 3 points if no save/load functionality. Give 10 points if includes complete menu systems, settings management, and persistent data storage.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid key presses, browser tab switching, memory leaks from game objects, frame rate drops, etc.) and provide graceful degradation. Code with strong robustness should include proper cleanup of game objects, error boundaries, and performance monitoring. Give 10 points for excellent error handling, 5 points if robustness is average, and 0 points if no exception handling exists.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes impressive features that enhance gameplay experience (e.g., 1. Particle effects for explosions and impacts 2. Dynamic background music and sound effects 3. Screen shake and visual juice 4. Procedural level generation 5. Special weapon mechanics). Add 3 points for each well-implemented innovative feature that adds genuine value to the gaming experience (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant game loop implementations or duplicate collision detection systems 2. Unrelated features like social media integration or complex UI frameworks 3. Performance-heavy effects that don't enhance core gameplay (e.g., excessive particle systems, unnecessarily complex shaders). Deduct 3 points for each redundancy found, and directly deduct 10 points if redundant code interferes with game performance or core mechanics.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular architecture (separating game engine, entities, input handling, rendering layers), proper asset management, and code organization. Deduct 5 points if global variables pollute the namespace or no design patterns are used; deduct 5 points if code has high duplication (over 30%); deduct 5 points if no proper asset loading or memory management. Full score requires clean separation of concerns and maintainable code structure.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional game design standards?",
      "description": "Evaluate whether the visual design follows game UI principles: 1) Consistent pixel art style or coherent visual theme 2) Readable HUD elements with proper contrast 3) Intuitive visual hierarchy for game elements 4) Appropriate sprite scaling and resolution. Deduct 3 points for each visual inconsistency, 5 points for poor readability of game elements, and 5 points for mismatched art styles. Full score requires polished, cohesive visual presentation.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the game interaction responsive and intuitive?",
      "description": "Judge whether the game controls and feedback meet gaming standards: 1) Input response time â‰¤ 16ms (60fps standard) 2) Clear visual and audio feedback for all actions 3) Intuitive control scheme with proper key mapping 4) Consistent interaction patterns throughout gameplay. Deduct 5 points for each unresponsive control, 3 points for missing feedback on important actions, and 5 points for confusing or inconsistent control schemes. Full score requires tight, responsive controls with excellent game feel.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Shooting",
  "difficulty": "hard"
}
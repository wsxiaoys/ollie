{
  "index": 599,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure any code you generate is executable and functional.\n\n======== ROLE ========\nYou are an experienced code expert. I am providing you with a software development requirement description, and I need you to generate project code based on these requirements. Strictly follow the rules to help users generate complete project code with simple and easy-to-understand comments, without outputting anything else.\n\n======== OUTPUT RULES ========\n1. Always generate complete, runnable project code, ensuring the project is fully executable\n2. Ensure all code files you output are complete, don't omit any code\n3. Carefully review and check all code before the final output, evaluating its executability. If the code cannot be executed or contains errors, regenerate it\n4. If the requirements involve external API access or require user data (images, videos, audio, etc.), please provide mock data\n\n======== PROJECT REQUIREMENTS DESCRIPTION ========\nDevelop a multiplayer online shooting game frontend where players can battle on the same map. Need to implement real-time synchronization between players, chat functionality, scoreboard, and basic combat mechanisms.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the multiplayer shooting game core combat system fully implemented?",
      "description": "Review whether the code accurately implements the game map and character positioning system through HTML/JavaScript/Canvas, and whether it includes collision detection for projectiles, hit registration, and damage calculation. Score 0 if the core combat logic is not implemented, 5 if only basic shooting mechanics exist, and 10 if the system includes advanced features like different weapon types, headshots, or damage falloff.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the real-time player synchronization function implemented?",
      "description": "Check whether WebSocket/Socket.io implementation includes position synchronization, animation states, and player actions. Evaluate if the code handles network latency with techniques like client-side prediction, server reconciliation, and entity interpolation. Deduct 5 points if there's no lag compensation mechanism, and 3 points if the synchronization frequency is inadequate (<10 updates/second). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the chat functionality properly implemented?",
      "description": "Evaluate if the chat system supports both team and global messages, has proper UI integration that doesn't interfere with gameplay, and includes basic features like player identification and timestamps. Check if there's message sanitization to prevent XSS attacks. Deduct 5 points if chat messages aren't synchronized in real-time, and 3 points if there's no visual notification for new messages. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the scoreboard system complete and functional?",
      "description": "Check if the scoreboard tracks and displays relevant statistics (kills, deaths, assists, score), updates in real-time, and has proper sorting functionality. Evaluate if it's accessible during gameplay without disrupting the experience and if it includes end-of-match summary features. Deduct 5 points if the scoreboard doesn't update in real-time, and 3 points if it lacks essential statistics. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network interruption, player disconnection, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Destructible environment elements 2. Special abilities or power-ups 3. Dynamic weather/lighting effects that impact gameplay). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple movement control systems coexisting) 2. Function modules unrelated to shooting gameplay (e.g., a built-in music playlist editor) 3. Fancy effects that affect performance (e.g., excessive particle systems when resources are already constrained). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/rendering/network layers), code organization, and performance optimization techniques. Deduct 5 points if global state is excessively used or design patterns are not applied appropriately; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no asset loading optimization or frame rate management. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface design meet professional gaming UI standards?",
      "description": "Evaluate whether the UI follows game design principles: 1) Non-intrusive HUD elements that provide essential information without blocking gameplay 2) Clear visual feedback for hits, damage taken, and game events 3) Appropriate use of color coding for team identification and game state indicators. Deduct 3 points for cluttered UI elements, 5 points for poor readability during action sequences, and 5 points for inconsistent visual language. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the game performance and responsiveness optimized?",
      "description": "Judge whether the game maintains smooth performance under various conditions: 1) Input response time â‰¤ 50ms for critical actions 2) Stable frame rate even with multiple players and effects on screen 3) Efficient resource management to prevent memory leaks. Deduct 5 points for noticeable input lag, 3 points for frame drops during intensive gameplay, and 5 points for progressive performance degradation during longer sessions. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Shooting",
  "difficulty": "hard"
}
{
  "index": 1240,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable when possible. Write an HTML code for a space shooter game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core gameplay of the space shooter implemented?",
      "description": "Review whether the code accurately implements the basic space shooter mechanics including player movement, enemy spawning, shooting mechanics, and collision detection. Score 0 if no core gameplay elements are implemented, 5 if only basic movement and shooting are present, and 10 if it includes enemy variety, player lives/health system, and proper game flow.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the canvas or game rendering system properly implemented?",
      "description": "Check whether the game uses appropriate rendering techniques (Canvas API, WebGL, or DOM manipulation) with proper frame rate management. Verify that visual elements are drawn correctly with smooth animation (60fps target). Deduct 3 points if frame rate is inconsistent, 5 points if rendering has noticeable artifacts, and 5 points if no animation loop is implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are game controls responsive and appropriate?",
      "description": "Evaluate whether the player controls (keyboard/mouse/touch) are implemented with proper event handling, including preventing default browser behaviors when needed. Controls should be responsive (≤50ms delay) and intuitive. Deduct 5 points if controls are laggy, 3 points if mobile support is missing when claimed, and 5 points if key events aren't properly managed. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game state management and scoring system implemented?",
      "description": "Check whether the code includes proper game state management (start screen, gameplay, game over) and scoring mechanics. The game should track player progress, display current score, and maintain high scores if applicable. Deduct 3 points for missing game states, 5 points for no scoring system, and 3 points for not persisting high scores if that feature is mentioned. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as window resizing, browser compatibility issues, rapid input changes, etc.) and provide friendly error handling. Code with strong robustness should gracefully handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Power-ups and special weapons 2. Dynamic difficulty adjustment 3. Particle effects for explosions 4. Boss battles). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple collision detection systems) 2. Function modules unrelated to a space shooter game (e.g., unnecessary UI elements) 3. Fancy effects that affect performance (e.g., excessive particle effects causing lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game entities/rendering/input handling), code organization, and maintenance considerations. Deduct 5 points if global variables are excessively used or design patterns are not applied; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern game UI principles: 1) Appropriate color scheme for space theme (dark background with contrasting elements) 2) Proper layout of game elements and HUD 3) Readable text and clear visual hierarchy. Deduct 3 points for cluttered game screens, 5 points for a color scheme that strains the eyes, and 5 points for poorly positioned UI elements that obstruct gameplay. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Input response delay ≤ 50ms 2) Smooth movement and transitions 3) Clear visual feedback for player actions and game events. Deduct 5 points for each interaction without feedback, 3 points for jerky or inconsistent animations, and 5 points for confusing visual feedback during gameplay. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Shooting",
  "difficulty": "easy"
}
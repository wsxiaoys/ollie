{
  "index": 1712,
  "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that the code you produce is executable when demonstrated. Please develop a simple FPS web game that can be directly opened in a browser when saved as an HTML file. The game should feature two types of guns: AK and HK416. The map should be inspired by \"dust2\" from CS. The game mode should be multiplayer free-for-all.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core FPS game mechanics fully implemented?",
      "description": "Review whether the code accurately implements essential FPS mechanics: first-person camera controls, player movement (WASD), shooting mechanics, hit detection, and damage calculation. Check if recoil patterns differ between AK and HK416 weapons, with appropriate rate of fire, damage, and reload times for each. Score 0 if movement and shooting don't work, 5 if basic mechanics work but lack weapon differentiation, and 10 if all features are fully implemented with weapon-specific characteristics.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the dust2-inspired map properly implemented?",
      "description": "Evaluate whether the map captures key recognizable elements of dust2 (such as bombsite A/B, mid, long A, tunnels) using appropriate 3D models or geometry. Check for proper collision detection with map elements, logical spawn points, and optimization techniques (such as occlusion culling). Deduct 5 points if only a basic sandbox exists without dust2 elements, deduct 3 points if collision detection is inconsistent, and deduct 3 points if the map layout isn't intuitive or playable. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the multiplayer free-for-all mode functional?",
      "description": "Check whether the multiplayer implementation includes client-server communication (WebSockets/WebRTC), player synchronization, score tracking, respawn system, and match progression. Test if player positions, rotations, and actions are properly synchronized. Deduct 5 points if network lag isn't handled, 3 points if player synchronization is inconsistent, and 5 points if only local multiplayer is implemented. Full score requires functional remote multiplayer with at least 4+ concurrent players supported.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are the weapon systems detailed and distinguishable?",
      "description": "Evaluate whether the AK and HK416 have distinct characteristics (damage, fire rate, recoil patterns, reload speed). Check for appropriate weapon models, animations, and sound effects. Verify ammo management, reloading animations, and weapon switching. Deduct 5 points if weapons are functionally identical, 3 points if visual/audio feedback is missing, and 5 points if fundamental weapon mechanics like reloading are absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network latency, connection drops, resource loading failures, browser compatibility issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Killstreaks with rewards 2. Destructible environment elements 3. Custom weapon skins 4. Match replay system 5. Voice chat integration). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple movement systems coexisting) 2. Function modules unrelated to an FPS game (e.g., a built-in puzzle minigame) 3. Fancy effects that affect performance (e.g., excessive particle effects causing frame drops). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/rendering/networking layers), code organization, and asset management. Check for proper use of WebGL/Three.js/Babylon.js patterns, consistency in coding style, and optimization techniques. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if assets aren't properly managed or optimized. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional game UI standards?",
      "description": "Evaluate whether the UI design follows modern FPS game principles: 1) Non-intrusive HUD elements (health, ammo, minimap) 2) Clear visual feedback for hits/damage 3) Intuitive scoreboard and player status indicators 4) Appropriate crosshair design that changes with movement/weapon. Deduct 3 points for obscured gameplay due to UI elements, 5 points for missing critical information (ammo/health), and 5 points for illegible text or confusing indicators. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the game performance and user experience optimized?",
      "description": "Judge whether the game runs smoothly at 60+ FPS on mid-tier hardware: 1) Efficient rendering techniques and LOD systems 2) Audio spatialization for gunshots and footsteps 3) Responsive controls with customizable sensitivity 4) Appropriate loading screens and asset management. Deduct 5 points for frame rates below 30 FPS with few players, 3 points for audio issues or missing sound cues, and 5 points for unresponsive controls or input lag above 100ms. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Shooting",
  "difficulty": "hard"
}
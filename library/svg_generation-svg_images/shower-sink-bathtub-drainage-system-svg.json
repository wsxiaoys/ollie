{
  "index": 196,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible.\nPlease help me implement the following requirements using SVG code: create a pipeline drainage system for a shower, sink, and bathtub.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the basic SVG drainage pipeline system structure correctly implemented?",
      "description": "Review whether the code correctly establishes the SVG viewport, coordinate system, and basic elements (paths, shapes) for representing the shower, sink, and bathtub components. Check if proper SVG namespaces are included. Score 0 if basic structure is missing, 5 if partial implementation exists, and 10 if complete with proper sizing and positioning.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the three required fixtures (shower, sink, bathtub) properly implemented and visually distinguishable?",
      "description": "Evaluate whether each fixture is clearly represented with appropriate SVG elements and can be visually identified. Each fixture should have distinct visual characteristics and proper proportions. Deduct 3 points for each missing fixture. Deduct 2 points if fixtures are visually ambiguous or poorly proportioned.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the pipeline connectivity logically implemented to show a functioning drainage system?",
      "description": "Check if the pipes connect all fixtures to a main drain line with proper slopes (indicated visually). Verify that pipe junctions use appropriate fittings (e.g., T-joints, elbows) and follow plumbing best practices. Score 0 if connections are illogical, 5 if basic connectivity exists but with issues, and 10 if the system shows a complete, plausible drainage network.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation include water flow visualization or animation capabilities?",
      "description": "Assess if the code includes SVG animations (SMIL) or JavaScript-based animations to show water flow through the system. Check for proper use of animation timing, opacity changes, or path animations to represent flowing water. Give 10 points for comprehensive animation, 5 for basic animation effects, and 0 if no water flow representation is included.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the SVG code is valid, well-structured, and handles browser compatibility issues. Check for proper group (<g>) elements, appropriate element IDs, and reusable components. Verify if the code handles different viewport sizes and aspect ratios. Code with strong robustness should be able to render properly across browsers, giving 10 points. If the robustness is average, give 5 points, and if many issues exist, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the visualization (e.g., 1. Interactive controls to toggle water flow 2. Cross-section views of pipes 3. Pressure or flow rate indicators). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant SVG elements or groups that serve the same purpose 2. Features unrelated to the plumbing system (e.g., decorative elements that obscure the main functionality) 3. Overly complex effects that impact performance or clarity (e.g., unnecessary filters or gradients). Deduct 3 points for each redundancy found, and directly deduct 10 points if core functionality is compromised by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating structure/style/animation), code reuse through definitions (<defs>), and proper SVG structuring. Deduct 5 points if global attributes pollute the namespace; deduct 5 points if there's significant code duplication for similar elements; deduct 5 points if SVG optimization techniques (like using symbols or patterns) are not utilized where appropriate. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern visualization principles: 1) Harmonious color matching with appropriate use of fills and strokes 2) Proper use of scale and proportion 3) Effective use of SVG features like gradients, patterns, or filters where appropriate. Deduct 3 points for each visual inconsistency, 5 points for inappropriate color schemes that harm readability, and 5 points for poor spatial organization. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether any interactive elements or animations conform to human perception characteristics: 1) Responsive interactions (â‰¤100ms) 2) Smooth animations with appropriate timing (300-500ms for transitions) 3) Clear visual feedback for interaction states. Deduct 5 points for each interaction without feedback, 3 points for jerky or abrupt animations, and 5 points for confusing interaction patterns. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "SVG Generation-SVG Images",
  "difficulty": "medium"
}
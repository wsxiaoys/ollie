{
  "index": 1377,
  "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code when possible. Write code that can be input on a computer to create a drawing of an End City from Minecraft.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the End City structure visualized with accurate architectural elements?",
      "description": "Verify if the code correctly implements key End City elements from Minecraft including: 1) The tall, purple-hued towers with end stone brick textures, 2) The distinctive overhanging 'ship' structures, 3) Proper proportions with vertical pillars and horizontal platforms, and 4) End rod decorations. Score 0 if no recognizable End City features are present, 5 if basic structure is implemented but missing key details, and 10 if all distinctive End City architectural elements are accurately represented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the purpur block texture and color scheme properly implemented?",
      "description": "Evaluate how well the code implements the iconic End City color palette and textures. Check for: 1) Accurate purpur block coloration (proper purple hue #9C77B8), 2) End stone brick patterns with appropriate light yellow coloration, 3) Correct implementation of end rod lighting elements (white/light blue glow), and 4) Purple and magenta shulker representations if included. Deduct 3 points for each major color/texture inaccuracy, with at least 3 points if basic purple theming is present.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the code implement appropriate dimensionality and perspective?",
      "description": "Assess whether the code creates a proper 3D representation of the End City (either through isometric, perspective projection, or full 3D rendering). The rendering should: 1) Show depth through shading or perspective, 2) Implement proper occlusion (closer objects hiding farther ones), 3) Maintain consistent scale proportions across the structure. Score 0 for flat 2D with no depth cues, 5 for basic perspective with minor inconsistencies, and 10 for technically accurate 3D representation.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the End Ship feature properly implemented (if included)?",
      "description": "Review whether the code includes the iconic End Ship that accompanies End Cities. Check for: 1) Proper ship hull shape with purpur blocks, 2) Dragon head figurehead at the bow, 3) Mast structure with brewing stand or equivalent, 4) Proper positioning floating near a tower. Award 0 points if no ship is included when it should be a central feature, 5 points if a basic ship structure exists but lacks detail, and 10 points for a complete and accurate End Ship implementation.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser resizing, varying screen sizes, or potential rendering errors) and provides appropriate fallbacks. Code with strong robustness should work across modern browsers, adapt to different viewport sizes, and handle initialization errors gracefully. Give 10 points for exceptional error handling and adaptability, 5 points for average robustness, and 0 points if the visualization breaks easily under minor variations.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive rotation/zoom controls 2. Animated shulkers opening/closing 3. Day/night lighting cycle 4. Animated end rods with particle effects 5. Ability to customize colors or structure). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar rendering functions (e.g., multiple ways to draw the same block type) 2. Function modules unrelated to the End City visualization (e.g., unrelated Minecraft biomes or structures) 3. Fancy effects that affect performance severely (e.g., excessive particle systems that cause lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core visualization is interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating rendering logic/geometry creation/texturing), reusable function patterns, and performance optimization. Deduct 5 points if global namespace pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if rendering optimization is poor (e.g., redrawing unchanging elements repeatedly). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the visual implementation meet professional design standards?",
      "description": "Evaluate whether the overall design follows Minecraft's visual style while maintaining professional quality: 1) Consistent block textures with appropriate level of detail (not overly simplified or unnecessarily complex) 2) Proper lighting and shading to enhance depth perception 3) Clear structural organization without visual clutter. Deduct 3 points for each inconsistency with Minecraft's established visual language, 5 points for poor lighting that flattens the image, and 5 points for chaotic or cluttered layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the rendering performance and responsiveness optimized?",
      "description": "Judge whether the code is optimized for rendering performance: 1) Initial loading and rendering time under 3 seconds on average hardware 2) Smooth interaction if any interactive elements are present 3) Efficient use of drawing methods appropriate to the implementation (canvas optimization, WebGL where appropriate, or optimized SVG/DOM manipulation). Deduct 5 points for noticeable lag during rendering, 3 points for inefficient drawing approaches that could be optimized, and 5 points if the implementation fails on mobile devices when adaptability would be reasonable. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "SVG Generation-SVG Images",
  "difficulty": "hard"
}
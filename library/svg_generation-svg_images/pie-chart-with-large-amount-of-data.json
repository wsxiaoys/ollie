{
  "index": 195,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable and can be displayed.\nPlease help me implement the following requirement using SVG code: create a close-up view of a pie chart with a large amount of data.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the pie chart correctly implemented with SVG?",
      "description": "Check if the SVG implementation includes properly calculated arc paths using the SVG 'path' element with correct 'd' attributes for each pie slice. Arc calculations must use Math.sin/cos or SVG arc commands correctly. Score 0 if no pie chart is implemented, 5 if basic pie slices are drawn but have calculation errors, and 10 if all pie slices are mathematically precise.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the close-up view functionality properly implemented?",
      "description": "Evaluate whether the code includes a mechanism to zoom in or focus on specific sectors of the pie chart. Look for features like hover magnification, separate detailed view, or click-to-zoom functionality. Deduct 5 points if only static magnification is implemented without interaction, and 3 points if the transition between normal and close-up views is abrupt. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "How well does the implementation handle large amounts of data?",
      "description": "Assess how the code manages pie charts with many data points (20+ slices). Check for techniques like grouping small slices into an 'Other' category, using tooltips for small segments, employing color gradients for related categories, or implementing pagination/filtering. Deduct 5 points if small segments become unreadable, and 3 points if performance noticeably degrades with 50+ data points. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are data labels and legends implemented effectively?",
      "description": "Check whether the visualization includes proper labels that adjust position based on slice size, with collision detection to prevent overlapping text. For the close-up view, labels should be appropriately scaled and positioned. Verify if a legend is provided for identification of segments. Deduct 5 points if labels overlap significantly, and 3 points if labels are only visible in certain views. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing data, zero values, negative values, extremely small or large segments, etc.) and provide friendly error handling or fallback displays. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive animations when transitioning to close-up view 2. Smart labeling that adjusts based on segment size 3. Contextual information that appears on interaction). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visualization functions (e.g., multiple zoom mechanisms) 2. Function modules unrelated to pie charts (e.g., unnecessary tooltips) 3. Fancy effects that affect performance (e.g., excessive animations or gradients). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/rendering/interaction layers), reusability of components, and code organization. Deduct 5 points if global state pollution is found or if there's no clear separation of concerns; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern data visualization principles: 1) Harmonious color matching with sufficient contrast between segments 2) Proper visual hierarchy with focus on the close-up area 3) Consistent visual language throughout the chart. Deduct 3 points for each poor color choice that makes segments hard to distinguish, 5 points for cluttered visual elements, and 5 points for inconsistent visual treatment between normal and close-up views. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the interaction smooth and intuitive?",
      "description": "Judge whether the interaction design conforms to user expectations: 1) Clear visual cues for interactive elements 2) Smooth transitions between normal and close-up views (300-500ms duration) 3) Intuitive controls for navigating the large dataset. Deduct 5 points for each interaction without visual feedback, 3 points for confusing navigation controls, and 5 points for unintuitive zoom/focus mechanics. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "SVG Generation-SVG Images",
  "difficulty": "hard"
}
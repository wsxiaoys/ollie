{
  "index": 58,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable and displayable.\n\nPlease help me implement the following requirements using code, specifically with SVG code. The requirement is to create: a responsive organizational chart that uses <foreignObject> to embed HTML for more complex text formatting.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the SVG organizational chart structure correctly implemented?",
      "description": "Review whether the code properly implements a hierarchical organizational chart structure using SVG elements. Check if proper positioning logic is used for layout (e.g., tree layout algorithm or manual positioning). Score 0 if the structure is not implemented, 5 if basic structure is present but has alignment issues, 10 if the organizational chart structure is complete with proper hierarchical representation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the <foreignObject> element correctly utilized?",
      "description": "Evaluate the implementation of <foreignObject> elements to embed HTML content. Check if proper namespaces are defined, if dimensions are correctly set, and if content displays properly across browsers. Deduct 5 points if namespaces are missing, 3 points if positioning is incorrect, and 2 points if browser compatibility issues exist. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the complex text formatting within HTML properly implemented?",
      "description": "Assess the quality of HTML formatting inside the <foreignObject> elements. Check for proper use of semantic HTML tags, CSS styling, and text layout. Score 0 if no complex formatting is attempted, 5 if basic formatting exists but lacks polish, and 10 if the formatting includes multiple elements like headers, paragraphs, lists, or styled text that enhances readability and visual appeal.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the chart fully responsive?",
      "description": "Test whether the organizational chart correctly responds to different viewport sizes. Check for viewBox attributes, percentage-based sizing, media queries, or JavaScript-based resizing logic. Deduct 5 points if the chart doesn't resize properly on small screens, 3 points if elements overlap when resized, and 5 points if text becomes illegible at certain sizes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as long text content, missing data, or browser inconsistencies) and provide fallback mechanisms. Code with strong robustness should prevent text overflow, handle missing node data gracefully, and include browser compatibility workarounds. Give 10 points for comprehensive robustness, 5 points for average handling, and 0 points if no edge cases are addressed.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive node expansion/collapse 2. Smooth transitions when reorganizing 3. Dynamic data loading). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant SVG elements or unnecessary nesting 2. Duplicated styling that could be handled with classes 3. Overly complex animations or effects that don't enhance understanding. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core organizational chart functionality is compromised by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular organization (such as separating rendering logic from data processing), code reusability for generating nodes, and maintainability. Deduct 5 points if global variables pollute the namespace; deduct 3 points for excessive hardcoded values; deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the organizational chart follows professional design principles: 1) Consistent visual hierarchy through shapes, colors, and sizes 2) Proper spacing between nodes and levels 3) Clear visual connections between related nodes. Deduct 3 points for inconsistent node styling, 5 points for poor color contrast affecting readability, and 3 points for unclear relationship indicators. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether any interactive elements (hover states, transitions, expansions) conform to human perception characteristics: 1) Responsive feedback on interaction 2) Smooth transitions between states 3) Clear visual cues for interactive elements. Deduct 5 points for laggy animations, 3 points for jarring visual changes, and 5 points for unclear interactive elements. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "SVG Generation-SVG Images",
  "difficulty": "easy"
}
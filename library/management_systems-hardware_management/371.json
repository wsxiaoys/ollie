{
  "index": 371,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Tech stack: React + Ant Design + AntV\n\n1. Cluster status monitoring - Implement dynamic topology diagrams using AntV G6 to display Kubernetes node relationships. Support fault propagation analysis. Utilize ECharts to visualize memory/CPU/GPU utilization rates with alert capabilities when thresholds are exceeded.\n\n2. Support cross-time period data overlay comparison - Develop functionality that allows users to compare monitoring metrics across different time periods by overlaying multiple datasets on the same visualization, enabling trend analysis and anomaly detection.\n\n3. Develop alert rule configuration forms - Implement dynamic form rendering that adapts based on selected parameters. Support complex condition configuration with nested logical operators, threshold settings, and multi-metric correlation rules.\n\n4. Implement monitoring data filtering panel - Create an advanced filtering system with date selectors and multi-dimensional condition combination queries that allow users to precisely locate the data they need across various metrics and node categories.\n\n5. Real-time monitoring dashboard - Design and implement a comprehensive dashboard with auto-refreshing widgets, customizable layouts, and drill-down capabilities that allow users to navigate from high-level cluster views to detailed node-specific metrics.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the dynamic topology diagram using AntV G6 fully implemented?",
      "description": "Evaluate whether the code properly implements a K8s cluster topology visualization with G6, including: 1) Correct node representation (master nodes, worker nodes, pods) with appropriate shapes and colors 2) Edge connections showing relationships/dependencies 3) Interactive node selection and highlighting of related components 4) Fault propagation visualization with path tracing. Score 0 if only basic nodes are displayed without relationships, 5 if static topology is shown, and 10 if full interactive topology with fault propagation analysis is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the ECharts visualizations for resource utilization implemented with alert capabilities?",
      "description": "Check whether the code includes proper implementation of CPU/memory/GPU utilization charts with: 1) Real-time data updates 2) Configurable thresholds with visual indicators 3) Alert triggering mechanism when thresholds are exceeded 4) Historical data comparison. Deduct 3 points if charts are static without real-time updates, 3 points if thresholds cannot be configured, and 4 points if alert notifications are not implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the cross-time period data overlay comparison functionality properly implemented?",
      "description": "Assess whether the code enables effective comparison of metrics across different time periods by: 1) Supporting multiple dataset overlays on the same chart 2) Providing clear visual differentiation between time periods 3) Implementing interactive time range selection 4) Including statistical analysis tools for comparing periods. Deduct 5 points if only basic overlay is implemented without proper legends/differentiation, 3 points if time selection is limited, and 2 points if statistical comparison is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the dynamic alert rule configuration form properly implemented?",
      "description": "Evaluate whether the code implements a fully dynamic form that: 1) Changes fields based on selected parameters 2) Supports complex nested logical operators (AND/OR/NOT) 3) Allows threshold configuration with various comparison operators 4) Enables multi-metric correlation rules. Score 0 if only basic form inputs exist, 5 if dynamic fields are implemented but without complex conditions, and 10 if full logical nesting and multi-metric correlation is supported.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as API failures, data loading errors, malformed responses, etc.) and provide friendly error prompts or recovery mechanisms. Check for proper error boundaries, loading states, and fallback UI components. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered anomaly detection 2. Natural language query interface for metrics 3. Automated root cause analysis for failures 4. Context-aware recommendations for fixing issues). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visualization components (e.g., multiple chart libraries doing the same thing) 2. Function modules unrelated to monitoring (e.g., unnecessary administrative tools) 3. Fancy effects that affect performance (e.g., excessive animations that reduce dashboard responsiveness). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data fetching/processing/visualization layers), component reusability, state management, and build process automation. Deduct 5 points if global state pollution is found or proper React patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no proper error handling or performance optimization. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows Ant Design principles: 1) Consistent use of Ant Design components without customization that breaks the design system 2) Proper layout with appropriate spacing (following 8px grid system) 3) Professional information hierarchy (primary/secondary information properly distinguished). Deduct 3 points for each misaligned element, 5 points for inconsistent component styling, and 5 points for chaotic dashboard layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dashboard experience responsive and user-friendly?",
      "description": "Judge whether the monitoring dashboard implements: 1) Auto-refresh functionality with configurable intervals 2) Customizable widget layouts that persist user preferences 3) Smooth drill-down navigation from overview to details 4) Responsive design that works across device sizes. Deduct 5 points if auto-refresh is missing, 3 points if layouts cannot be customized, 3 points if drill-down navigation is clunky, and 3 points if the design is not responsive. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Hardware Management",
  "difficulty": "medium"
}
{
  "index": 1595,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable. Create a web mini-game with a story progression where the protagonist Knight 77 rescues Prince Cloud. The journey starts in England, passes through Thailand, and finally reaches Beijing to rescue Prince Cloud, with an iPhone 16 Pro as the final reward.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the story progression system fully implemented?",
      "description": "Review whether the code accurately implements a three-stage story progression (England → Thailand → Beijing) with clear narrative transitions, character dialogue systems, and quest objectives for Knight 77's rescue mission. Check if each location has unique story elements, environmental descriptions, and progression triggers. Score 0 if no story structure exists, 5 if only basic location transitions are implemented, and 10 if complete narrative flow with dialogue, objectives, and story coherence is fully developed.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the game mechanics and player interactions properly designed?",
      "description": "Evaluate whether the mini-game includes engaging gameplay mechanics such as puzzle-solving, combat systems, inventory management, or skill challenges appropriate for a rescue adventure. Check for player input handling, character movement controls, and interactive elements within each geographic location. Deduct 5 points if core gameplay mechanics are missing, 3 points if player controls are unresponsive or unclear. Full score requires intuitive and engaging game mechanics that support the rescue narrative.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the multi-location world design and progression system well-structured?",
      "description": "Assess whether each location (England, Thailand, Beijing) has distinct visual themes, unique challenges, and appropriate cultural elements. Check if the progression system includes unlock mechanisms, save/load functionality, and clear advancement criteria between locations. Deduct 5 points if locations lack distinctiveness, 3 points if progression feels arbitrary or unclear. Require location-specific assets, challenges, and seamless transitions between stages.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the reward system and game completion mechanism properly implemented?",
      "description": "Review whether the game includes a comprehensive reward system leading to the iPhone 16 Pro finale, with intermediate rewards, achievement tracking, and satisfying completion sequences. Check if Prince Cloud rescue sequence is properly scripted with appropriate celebration/completion animations. Deduct 5 points if reward system is incomplete, 3 points if final sequence lacks polish. Full score requires engaging reward progression and memorable completion experience.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid game states, save/load errors, asset loading failures, user input edge cases, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle game state corruption, browser compatibility issues, and graceful degradation. Give 10 points if fully robust, 5 points if average robustness, and 0 points if no exception handling exists.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the gaming experience (e.g., 1. Mini-map navigation system 2. Cultural Easter eggs in each location 3. Dynamic weather/time effects 4. Achievement badge system 5. Sound effects and background music). Add 3 points for each practical innovative feature implemented that adds genuine value to the gameplay experience (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple save systems coexisting) 2. Function modules unrelated to the rescue adventure theme (e.g., unrelated mini-games) 3. Excessive animations that impact performance (e.g., overuse of particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if core game flow is interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/rendering/audio/state management layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or proper architectural patterns aren't used; deduct 5 points if code duplication rate is too high (over 30%); deduct 5 points if assets aren't properly organized or optimized. Full score requires clean, modular, and maintainable code structure.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the game UI follows modern design principles: 1) Harmonious color palette reflecting each location's theme 2) Consistent UI element spacing and sizing 3) Readable typography with appropriate contrast 4) Cultural authenticity in visual representation of England/Thailand/Beijing. Deduct 3 points for each visually cluttered interface element, 5 points for poor color harmony that strains eyes, and 5 points for inconsistent or unprofessional visual styling. Full score requires polished, themed visual design.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game interactions conform to user expectations: 1) Button/click feedback delay ≤ 100ms 2) Scene transition animations smooth and appropriately timed (300-500ms) 3) Clear visual feedback for all interactive elements 4) Smooth character movement and animation. Deduct 5 points for each unresponsive interaction, 3 points for jerky animations or transitions, and 5 points for unclear interactive affordances. Full score requires fluid, responsive, and intuitive interaction design.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Adventure",
  "difficulty": "medium"
}
{
  "index": 363,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Implement a file management system similar to VSCode's left sidebar directory panel using Electron + Vue 3.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the directory tree structure implementation complete?",
      "description": "Evaluate whether the code implements a complete hierarchical directory tree that can display folders and files with proper indentation, icons, and visual hierarchy. Check if it supports both file and folder operations (create, rename, delete). Score 0 if the directory structure is not implemented, 5 if only basic display is implemented, and 10 if it fully mimics VSCode's directory panel functionality including drag-and-drop capabilities.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the Electron and Vue 3 integration correctly implemented?",
      "description": "Check if the code properly integrates Electron for native file system access and Vue 3 for UI rendering. Verify if IPC (Inter-Process Communication) is set up between the main and renderer processes, with proper error handling for file system operations. Deduct 5 points if there's no separation between main and renderer processes, and 3 points if Vue 3 Composition API isn't utilized effectively. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are file system operations implemented with appropriate error handling?",
      "description": "Evaluate whether the code includes proper implementations for reading directory contents, creating files/folders, deleting, renaming, and moving files with comprehensive error handling. Check if asynchronous operations are handled correctly and if there's a loading state during file operations. Deduct 5 points for missing critical operations (like delete or rename), and 3 points for inadequate error handling. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation include VSCode-like interactive features?",
      "description": "Verify if the code includes VSCode-specific features like context menus on right-click, keyboard shortcuts for operations, file icons based on file types, and collapse/expand folder functionality. Check for additional features like file filtering or search functionality. Deduct 3 points for each missing key VSCode feature, and award full 10 points only if the implementation closely mimics VSCode's sidebar behavior.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as permission errors, missing files, large directory structures, special characters in filenames, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. File preview on hover 2. Custom file grouping options 3. Recently modified files highlighting). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to refresh the file tree) 2. Function modules unrelated to file management (e.g., a built-in text editor when it's just supposed to be a sidebar) 3. Fancy effects that affect performance (e.g., excessive animations when expanding folders). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating file system logic/UI components/event handling), component reusability, and build process configuration. Deduct 5 points if global state management is poorly implemented; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the Electron security practices are not followed (like proper Content-Security-Policy). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows VSCode's design principles: 1) Consistent color scheme matching VSCode's themes 2) Proper layout spacing and indentation for directory levels 3) Professional icon system for different file types. Deduct 3 points for inconsistent visual elements, 5 points for a design that significantly deviates from VSCode's aesthetic, and 5 points for poor visual hierarchy in the directory structure. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to VSCode's interaction patterns: 1) Immediate feedback when selecting files/folders 2) Smooth animations for expanding/collapsing folders 3) Responsive context menus without delay. Deduct 5 points for each operation without feedback, 3 points for laggy interactions when handling large directories, and 5 points for unintuitive interaction patterns that differ from VSCode. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-File Management",
  "difficulty": "hard"
}
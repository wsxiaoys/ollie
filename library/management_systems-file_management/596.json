{
  "index": 596,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes. Design a file preview system where users can directly preview common file formats (such as images, PDFs, text files, etc.) online after clicking on a file.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the file type detection and handling system properly implemented?",
      "description": "Evaluate whether the code correctly identifies different file types (MIME types) and applies appropriate preview handlers. Check if it supports at least images (JPG, PNG, GIF, SVG), documents (PDF, TXT, MD), and potentially videos/audio. Score 3 points for basic image preview, 7 points for including document formats, and 10 points for comprehensive MIME type detection with specialized handlers for each format.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the file upload/selection mechanism user-friendly and robust?",
      "description": "Review the code for both drag-and-drop functionality and traditional file input methods. Check for proper file size validation, progress indicators during upload, and input sanitization. Deduct 3 points if only basic file input is implemented without drag-and-drop, 2 points for missing file size checks, and 2 points for lack of upload progress indication. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the preview rendering engine properly implemented?",
      "description": "Assess whether the code uses appropriate rendering techniques for different file types (canvas for images, PDF.js for PDFs, syntax highlighting for code files, etc.). Deduct 5 points if only native browser capabilities are used without specialized rendering, and 3 points if the rendering doesn't handle edge cases like large files or malformed content. Award 10 points for a comprehensive rendering system with format-specific optimizations.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is a caching mechanism implemented for improved performance?",
      "description": "Check whether the code implements file caching strategies to avoid redundant processing of previously viewed files. Look for client-side storage utilization (IndexedDB, localStorage) and proper cache invalidation mechanisms. Award 5 points for basic browser caching, 8 points for implementing custom client-side cache, and 10 points for an intelligent caching system that considers file size and frequency of access.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as corrupt files, unsupported formats, loading failures, etc.) and provide friendly error prompts or fallback mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. File content searching within previews 2. Annotation capabilities on documents/images 3. Side-by-side comparison of multiple files). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar preview functions 2. Function modules unrelated to file previewing 3. Fancy effects that affect performance (e.g., unnecessary animations when switching between files). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating file handling/UI/rendering logic), error handling practices, and code reusability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if error handling is insufficient or inconsistent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing for the preview area and controls 3) Professional font system for metadata and UI elements. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for poor preview container responsiveness. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the file preview interaction conforms to user expectations: 1) Preview loads within 500ms for standard files 2) Smooth transitions between different file previews 3) Intuitive zoom, scroll, and navigation controls for documents and images. Deduct 5 points for previews that take >2 seconds to load without feedback, 3 points for jarring transitions between file types, and 5 points for unintuitive navigation controls. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-File Management",
  "difficulty": "medium"
}
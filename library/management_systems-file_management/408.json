{
  "index": 408,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Implement large file slice upload and breakpoint continuation in Vue 3.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the file slicing mechanism properly implemented?",
      "description": "Verify if the code correctly implements file slicing using the Blob API, with appropriate chunk size determination (ideally configurable, typically 2-5MB per chunk). Check for proper handling of file metadata (MIME type, original filename, total size) and generation of a unique file identifier for tracking upload progress. Score 0 if slicing is not implemented, 5 if basic slicing exists but with fixed chunk size, 10 if it has adaptive/configurable chunk sizing with proper metadata handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the breakpoint continuation logic correctly implemented?",
      "description": "Evaluate the implementation of breakpoint resumption, including persistent storage of upload state (using IndexedDB, localStorage, or server-side tracking), chunk verification mechanisms (MD5/SHA hash for each chunk), and proper handling of previously uploaded chunks. Deduct 5 points if uploaded chunks can't be verified after page reload, 3 points if the resumption mechanism relies solely on server-side state. Full score requires both client and server-side state tracking.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the upload progress tracking and visualization implemented effectively?",
      "description": "Check if the code implements accurate progress tracking for both individual chunks and overall file upload. Progress visualization should include percentage completion, upload speed, estimated time remaining, and visual feedback for each chunk status (pending, uploading, completed, failed). Deduct 3 points for missing speed calculation, 2 points for no time estimation, and 5 points for lack of per-chunk status visualization.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation include proper error handling and retry mechanisms?",
      "description": "Assess error handling for network issues, server errors, and file access problems. Look for automatic retry logic with exponential backoff, configurable retry limits, and proper user feedback during failures. Check for graceful degradation when features aren't supported. Deduct 5 points for missing retry logic, 3 points for constant retry intervals, and 2 points for inadequate error messages to users.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser tab closure during upload, network fluctuations, file type restrictions, size limits, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Drag-and-drop upload support 2. Image/video previews during upload 3. Background uploading with service workers 4. Parallel uploading with configurable concurrency). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file reading methods coexisting) 2. Function modules unrelated to file uploads (e.g., unnecessary data processing) 3. Fancy effects that affect performance (e.g., excessive animations during upload). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating upload logic/UI components/API services), use of Vue 3's Composition API, proper TypeScript typing, and unit test coverage. Deduct 5 points if global state is overused when Composables would be more appropriate; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no meaningful comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the upload interface provides clear visual feedback: 1) Upload button state changes ≤ 100ms after selection 2) Progress updates at least every 500ms 3) Clear visual distinction between upload states (queued, uploading, paused, completed, failed). Deduct 5 points for laggy UI updates during large file uploads, 3 points for confusing state transitions, and 5 points for missing abort/pause/resume controls. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-File Management",
  "difficulty": "hard"
}
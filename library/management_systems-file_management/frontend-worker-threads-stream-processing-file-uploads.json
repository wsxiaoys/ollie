{
  "index": 229,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be careful to ensure that the generated code is executable for demonstration. Frontend implementation of Worker Threads + Stream processing for file uploads.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Worker Thread implementation correctly configured and functional?",
      "description": "Review whether the code properly implements Web Workers for file processing, including correct worker script registration, message passing mechanisms, and data transfer protocols. Check if the worker handles file chunking, progress calculation, and error propagation. Score 0 if workers are not implemented, 5 if basic worker setup exists but lacks proper communication, and 10 if full bidirectional communication with proper error handling is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the Stream processing mechanism properly implemented?",
      "description": "Evaluate whether the code uses modern Stream APIs (ReadableStream, WritableStream, TransformStream) for efficient file processing. Check for proper backpressure handling, chunk size optimization, and memory management. Deduct 5 points if using outdated FileReader instead of streams, 3 points if backpressure is not handled, and 2 points if chunk size is not optimized for performance. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the file upload functionality comprehensive and robust?",
      "description": "Check whether the upload system includes resume capability, file validation (type, size, integrity), progress tracking, and concurrent upload handling. Evaluate if the code supports large file uploads (>100MB) efficiently. Deduct 5 points if resume functionality is missing, 3 points if file validation is incomplete, and 2 points if progress tracking is inaccurate. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the performance optimization strategy effectively implemented?",
      "description": "Assess whether the code implements proper performance optimizations including worker pool management, memory usage optimization, and upload queue management. Check for efficient resource cleanup and prevention of memory leaks. Deduct 5 points if worker instances are not properly managed, 3 points if memory cleanup is insufficient, and 2 points if concurrent upload limits are not implemented. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network interruption, file corruption, worker crashes, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time file preview during upload 2. Smart compression based on file type 3. Drag-and-drop with visual feedback 4. Upload analytics and optimization suggestions). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple progress tracking systems) 2. Function modules unrelated to file upload (e.g., built-in image editor) 3. Fancy effects that affect performance (e.g., complex animations during upload). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core upload functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating upload logic/UI/worker management), proper error handling patterns, and TypeScript usage if applicable. Deduct 5 points if global state pollution is found or proper module separation is not implemented; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if worker management is not properly abstracted. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the upload interface follows modern design principles: 1) Harmonious color matching with clear visual hierarchy 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional typography (body font size ≥ 14px, line height over 1.5 times) 4) Clear upload status indicators. Deduct 3 points for each crowded visual element, 5 points for poor color contrast, and 5 points for unclear progress indicators. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the upload interactions conform to user expectations: 1) File selection feedback ≤ 100ms 2) Progress updates smooth and consistent 3) Clear visual feedback for drag-and-drop operations 4) Responsive cancel/pause controls. Deduct 5 points for each operation without immediate feedback, 3 points for jerky progress animations, and 5 points for confusing upload states. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-File Management",
  "difficulty": "hard"
}
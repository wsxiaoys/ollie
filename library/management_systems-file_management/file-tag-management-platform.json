{
  "index": 684,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable whenever possible. Create a file tag management platform where users can upload files and add multiple tags (such as 'work', 'important', etc.) to each file, supporting quick filtering of files by tags.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the file upload system fully implemented?",
      "description": "Review whether the code accurately implements file upload functionality through HTML/JavaScript, including drag-and-drop upload, progress bars, file type validation, and size limits. Check if multiple file formats are supported (documents, images, videos, etc.) and if upload status feedback is provided. Score 0 if core upload logic is not implemented, 5 if only basic upload is implemented, and 10 if all upload features including validation and progress tracking are fully included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the tag management system comprehensively designed?",
      "description": "Evaluate whether the tag system includes complete CRUD operations: creating new tags, editing existing tags, deleting unused tags, and batch tag operations. Check if tag autocomplete, tag hierarchy/categories, and tag color coding are implemented. Deduct 5 points if tag validation is missing, and 3 points if duplicate tag prevention is not handled. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the file filtering and search mechanism efficient and accurate?",
      "description": "Check whether the filtering system supports multiple tag combinations (AND/OR logic), fuzzy search by filename, date range filtering, and file type filtering. Evaluate if real-time search results update as users type and if advanced filtering options are provided. Deduct 5 points if search performance is poor (>500ms response time), and 3 points if filtering logic is incomplete. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the data persistence and file management architecture robust?",
      "description": "Evaluate whether the system includes proper data storage (local storage/database integration), file metadata management, and backup mechanisms. Check if file versioning, bulk operations (delete, move, export), and data export/import functionality are implemented. Deduct 5 points if data consistency is not maintained, and 3 points if file integrity checks are missing. Give 10 points if fully implemented with proper architecture.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as file upload failures, network interruption, invalid file types, storage quota exceeded, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered auto-tagging suggestions 2. File preview thumbnails with quick actions 3. Tag-based file sharing links 4. Visual tag cloud representation). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file sorting mechanisms coexisting) 2. Function modules unrelated to file management (e.g., a built-in text editor) 3. Fancy effects that affect performance (e.g., complex animations during file operations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating file handling/UI/storage layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Clear visual hierarchy for file lists and tag displays. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic file/tag layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) File upload feedback delay ≤ 100ms 2) Tag filtering response time ≤ 200ms 3) Transition animation duration controlled between 300-500ms 4) Clear visual focus guidance during file operations. Deduct 5 points for each operation without feedback, 3 points for visual lag during file list updates, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-File Management",
  "difficulty": "hard"
}
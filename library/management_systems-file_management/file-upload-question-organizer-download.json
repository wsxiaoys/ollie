{
  "index": 1800,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable and functional. Help me create a webpage that allows users to upload files including Word, Excel, and PDF formats. The webpage should help me organize the questions contained in these files, format them properly, and provide a download option.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the file upload functionality fully implemented?",
      "description": "Review whether the code properly handles file uploads with appropriate input controls, MIME type validation, and error handling for Word, Excel, and PDF formats. Check if the code includes progress indicators and clear user feedback during upload. Score 0 if file upload is not implemented, 5 if only basic upload without validation is present, and 10 if complete with validation, progress indicators, and proper error handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the file parsing mechanism correctly implemented for multiple formats?",
      "description": "Evaluate whether the code can accurately extract content from Word (.doc/.docx), Excel (.xls/.xlsx), and PDF files. Check if appropriate libraries are used (e.g., mammoth.js for Word, SheetJS for Excel, PDF.js for PDF). Deduct 3 points for each unsupported format. Deduct 5 points if the parsing is unreliable or incomplete. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is question extraction and organization functionality implemented?",
      "description": "Check whether the code can intelligently identify questions from extracted content using pattern matching, machine learning, or rule-based approaches. Verify if questions are grouped by topic, type, or difficulty. Score 0 if question extraction is not implemented, 5 if basic extraction without categorization is present, and 10 if sophisticated extraction with proper organization is implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is proper formatting and export functionality provided?",
      "description": "Assess whether the code allows users to format extracted questions (adjusting styles, rearranging, editing) and provides export options in various formats. Check if the exported files maintain formatting integrity. Deduct 3 points if formatting options are limited, 5 points if export functionality is missing key formats, and 5 points if the exported content loses critical formatting. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted files, extremely large files, unsupported formats, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered question categorization 2. Question difficulty estimation 3. Interactive question preview with formatting). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file parsing libraries for the same file type) 2. Function modules unrelated to question extraction (e.g., a built-in social media sharing system) 3. Fancy effects that affect performance (e.g., excessive animations during file processing). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating file handling/parsing/UI layers), error handling strategy, and code reusability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation between UI and business logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Clear visual hierarchy for file upload, processing, and download sections. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for poor information architecture. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) File upload feedback delay â‰¤ 100ms 2) Clear visual indication during file processing with accurate progress reporting 3) Intuitive question organization interface with drag-and-drop capability. Deduct 5 points for operations without feedback, 3 points for laggy UI during file processing, and 5 points for confusing navigation between upload, organization, and download steps. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-File Management",
  "difficulty": "medium"
}
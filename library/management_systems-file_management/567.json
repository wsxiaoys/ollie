{
  "index": 567,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Develop a user group file management system where different users can be assigned to different groups, each group has an independent file storage area, and administrators can adjust user groupings.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the user authentication and authorization system fully implemented?",
      "description": "Review whether the code implements comprehensive user authentication (login/registration) and proper authorization controls. Check if it includes password hashing, session management, and role-based access controls (admin vs regular user). Score 0 if authentication is missing, 5 if basic authentication exists but lacks security features, 10 if it implements secure authentication with proper session management and RBAC.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the group management functionality properly implemented?",
      "description": "Evaluate if the code provides complete CRUD operations for user groups. Check if administrators can create groups, add/remove users from groups, and modify group properties. Verify that group membership validation occurs before any file access. Deduct 3 points if group creation lacks validation, 3 points if user assignment to groups has vulnerabilities, and 4 points if group permission inheritance is flawed. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the file management system complete and secure?",
      "description": "Check if the system implements file upload, download, listing, deletion, and proper access control based on group membership. Verify that file operations respect group boundaries and prevent unauthorized access. Deduct 3 points if file storage lacks proper path sanitization, 3 points if no file type validation exists, 2 points if quota management is missing, and 2 points if there's no file version control or backup mechanism. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the admin interface comprehensive and secure?",
      "description": "Evaluate whether the administrator dashboard provides all necessary tools for user/group management and system monitoring. Check if admin operations are properly logged and if there are safeguards against accidental or malicious actions. Deduct 3 points if the admin can't view comprehensive user activity, 3 points if bulk operations aren't supported, and 4 points if critical admin actions lack confirmation dialogs or undo capabilities. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid user inputs, file corruption, disk space exhaustion, database connection failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time file collaboration 2. Automated file categorization and tagging 3. Smart search with content indexing 4. File access analytics). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple user verification methods coexisting) 2. Function modules unrelated to file or user management (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations in the file browser). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data access/business logic/presentation layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast file browsing, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-File Management",
  "difficulty": "hard"
}
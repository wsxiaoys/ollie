{
  "index": 365,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable when possible. Help me write an HTML file that can use plugins to read and display specific Excel and Word files from the same directory, and convert other file formats to TXT format for display on the webpage.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the file upload and selection mechanism properly implemented?",
      "description": "Check if the code provides a clear interface for users to select Excel, Word, and other files from the local system. Verify that the file input allows appropriate MIME types (.xlsx, .docx, etc.) and provides visual feedback on selection. Award 10 points for a complete implementation with validation and error handling, 5 points for basic functionality without proper validation, and 0 if missing entirely.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is Excel file reading and display functionality properly implemented?",
      "description": "Evaluate whether the code uses appropriate libraries (like SheetJS/xlsx, ExcelJS) to parse and display Excel files. Check if the implementation handles different sheet structures and includes features like sheet navigation, cell formatting, and formulas display. Award 10 points for comprehensive Excel handling with formatted display, 5 points for basic table rendering, and 0 if Excel reading is not implemented.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is Word file reading and display functionality properly implemented?",
      "description": "Assess whether the code effectively uses libraries (like Mammoth, docx.js) to parse and render Word documents with proper formatting. Check if the implementation preserves text formatting, images, tables, and document structure. Award 10 points for comprehensive rendering with styles preserved, 5 points if only plain text is extracted, and 0 if Word reading is not implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the file format conversion to TXT properly implemented?",
      "description": "Evaluate the implementation of conversion functionality for other file formats to TXT. Check if the code handles different input formats (PDF, RTF, etc.) and properly extracts text content. Verify error handling for unsupported formats and conversion failures. Award 10 points for robust multi-format conversion, 5 points for limited format support, and 0 if conversion is not implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as corrupt files, large files, unsupported formats, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Search functionality within displayed documents 2. Ability to edit and save changes 3. Side-by-side comparison of different files). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar file parsing functions 2. Function modules unrelated to file display (e.g., unnecessary analytics) 3. Fancy effects that affect performance (e.g., excessive animations during file loading). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating file handling logic from UI components), error handling, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if external libraries are not properly managed with fallbacks. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) File loading progress indicators 2) Smooth transitions when switching between file types 3) Clear visual cues for interactive elements. Deduct 5 points for operations without feedback, 3 points for noticeable delays during file processing without appropriate loading states, and 5 points for confusing navigation between different file views. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-File Management",
  "difficulty": "medium"
}
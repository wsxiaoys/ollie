{
  "index": 829,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration. Create an HTML interface for a User Center.\n\nThe purpose of this User Center is to provide an interface for users to upload MP3 files, and it should have the following options: File Submission, My Submissions",
  "checklist": [
    {
      "id": 0,
      "title": "Is the file upload functionality fully implemented?",
      "description": "Review whether the code accurately implements file selection, validation for MP3 format, progress indication during upload, and proper error handling. Score 0 if the core upload functionality is not implemented, 5 if only basic file selection exists without validation, and 10 if it includes format validation, progress tracking, and appropriate error messages.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the My Submissions section properly implemented?",
      "description": "Evaluate whether the code includes a complete system to display previously uploaded MP3 files with relevant metadata (upload date, file size, duration if extracted). Check if pagination or infinite scrolling is implemented for large lists. Deduct 5 points if there's no way to view file details, and 3 points if sorting/filtering options are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there proper user authentication and session management?",
      "description": "Check whether the User Center includes login/registration functionality, session persistence, and secure authentication practices. Assess if uploaded files are properly associated with the logged-in user account. Deduct 5 points if there's no authentication, 3 points if authentication exists but without proper session management, and 5 points if there's no way to associate uploads with specific users. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the interface include audio playback functionality for uploaded MP3 files?",
      "description": "Evaluate whether users can preview/play their uploaded MP3 files directly in the interface. Check for essential audio controls (play/pause, volume, seek), and metadata display during playback. Deduct 5 points if basic playback is missing, 3 points if advanced controls are absent, and 2 points if there's no visual feedback during playback. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as upload failures, oversized files, unsupported formats, network interruptions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Drag-and-drop upload capability 2. Audio waveform visualization 3. Automatic metadata extraction from MP3 files). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file upload methods with overlapping functionality) 2. Function modules unrelated to MP3 management (e.g., unrelated media players) 3. Fancy effects that affect performance (e.g., unnecessary animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI components/file handling logic/authentication), proper error handling patterns, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation of concerns between different functional parts. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual feedback for upload processes. Deduct 5 points for each operation without feedback, 3 points for jarring transitions between interface states, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-File Management",
  "difficulty": "easy"
}
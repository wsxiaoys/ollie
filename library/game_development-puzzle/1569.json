{
  "index": 1569,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code that can be displayed. Write code for a four-character Chinese idiom guessing game that can run on a local mobile phone.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core game logic for the Chinese idiom guessing mechanism fully implemented?",
      "description": "Review whether the code implements the complete idiom guessing logic, including idiom database, correct character validation, and scoring system. Check if there's a function to match user input with the target idiom, character by character. Score 0 if there's no core logic, 5 if basic matching exists but without proper validation, and 10 if the complete guessing system with visual feedback for correct/incorrect characters is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the game include a comprehensive Chinese idiom database?",
      "description": "Evaluate the quality and quantity of the idiom database. Check whether the idioms are correctly formatted with their meanings and possibly difficulty levels. A good implementation should have at least 100 idioms with proper pinyin and explanations. Deduct 5 points if fewer than 50 idioms are included, and 3 points if the idioms lack explanations. Give 10 points for a rich database with categorized idioms or difficulty levels.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a proper mobile-responsive UI designed specifically for touch screens?",
      "description": "Check if the UI is designed with mobile constraints in mind - proper touch targets (at least 44×44px), responsive layout that works on different screen sizes, and appropriate keyboard implementation for character input. Verify if the game uses viewport meta tags and CSS media queries. Deduct 5 points for desktop-oriented design, 3 points for small touch targets, and 5 points for non-responsive layouts. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the game implement local storage for saving progress and game state?",
      "description": "Review whether the code implements localStorage or IndexedDB to save game progress, high scores, and game state between sessions. Verify if the game can be resumed after closing the browser or app. Deduct 5 points if there's no persistence mechanism, 3 points if only basic settings are saved without game state. Full 10 points require complete state management including game progress, statistics, and settings.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid input, network issues when loading resources, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Pronunciation guidance for idioms 2. Visual hints or animations for challenging idioms 3. Daily challenges with new idioms 4. Integration with Chinese language learning). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems) 2. Function modules unrelated to idiom guessing (e.g., an unrelated mini-game) 3. Fancy effects that affect performance (e.g., unnecessary animations that slow down the app). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/data layers), code organization, and performance optimization for mobile devices. Deduct 5 points if global state pollution is found or if the code lacks organization; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no performance optimizations for mobile devices. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows mobile design principles: 1) Harmonious color matching that reflects Chinese cultural elements 2) Proper layout spacing (element spacing follows touch-friendly principles) 3) Appropriate font system (legible Chinese characters, proper contrast). Deduct 3 points for each crowded visual element, 5 points for illegible text, and 5 points for inconsistent design elements. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and optimized for mobile devices?",
      "description": "Judge whether the touch interactions conform to mobile user expectations: 1) Touch response delay ≤ 100ms 2) Appropriate keyboard handling for Chinese character input 3) Gesture support if applicable. Deduct 5 points for sluggish response, 3 points for keyboard issues during character input, and 5 points for interaction patterns that don't follow mobile conventions. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "easy"
}
{
  "index": 1154,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code whenever possible. I want to create an elimination game for WeChat Mini Program that stands out compared to existing elimination games on the market. Please help me write the code and directly explain how to run it in the WeChat Mini Program.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core elimination gameplay mechanics fully implemented?",
      "description": "Review whether the code implements a complete elimination logic including pattern matching algorithms, chain reaction handling, score calculation, and level progression. Check if the elimination rules are clearly defined (e.g., minimum match requirement, special combinations). Score 0 if core elimination logic is missing, 5 if basic matching is implemented but lacks special combinations, and 10 if it includes advanced features like cascading effects and combo systems.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the WeChat Mini Program integration properly implemented?",
      "description": "Verify that the code follows WeChat Mini Program development specifications and utilizes appropriate APIs (wx.* namespace). Check if the project structure includes necessary app.js, app.json, and page files. Deduct 5 points if the configuration files are incomplete, 3 points if lifecycle hooks are improperly used, and 5 points if the app lacks proper navigation between screens. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the game have unique differentiating features compared to existing market offerings?",
      "description": "Evaluate whether the game includes novel mechanics or features that distinguish it from typical elimination games (e.g., unique power-ups, interactive backgrounds, physics-based interactions, or meta-gameplay elements). Deduct 5 points if the game is merely a clone of existing games, 3 points if innovations are superficial. Give 10 points if truly innovative gameplay elements are present.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a complete progression and reward system implemented?",
      "description": "Check whether the code implements level progression, difficulty scaling, achievement tracking, and reward mechanisms. Verify if there's a persistence layer for saving player progress. Deduct 5 points if progression logic is missing, 3 points if difficulty doesn't scale appropriately, and 5 points if there's no reward/achievement system. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as out-of-bounds input, network interruption, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Social sharing with custom images 2. Daily challenges with unique rules 3. Mini-narratives between levels). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems coexisting) 2. Function modules unrelated to the elimination game (e.g., excessive mini-games that distract from core gameplay) 3. Fancy effects that affect performance (e.g., excessive particles that cause lag on low-end devices). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), unit test coverage, and WeChat Mini Program best practices. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the project structure doesn't follow Mini Program conventions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern WeChat Mini Program design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and optimized for mobile?",
      "description": "Judge whether the dynamic effects conform to mobile touch interaction standards: 1) Touch feedback delay ≤ 100ms 2) Animation performance optimized for WeChat's rendering engine 3) Touch targets at least 44x44px for comfortable tapping. Deduct 5 points for each operation without feedback, 3 points for frame drops during animations, and 5 points for touch targets that are too small or overlapping. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "medium"
}
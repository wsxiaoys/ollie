{
  "index": 1725,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure that any code you generate is executable for demonstration purposes. Please help me write a web-based Tetris game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Tetris game mechanism fully implemented?",
      "description": "Review whether the code accurately implements standard Tetris mechanics including piece rotation, movement, collision detection, and line clearing logic. Score 0 if the core interaction logic is not implemented, 5 if only basic piece movement is present, and 10 if all standard Tetris rules are fully included (including wall kicks, SRS rotation system, and proper piece spawning).",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all seven Tetromino pieces correctly implemented?",
      "description": "Check if all seven standard Tetromino pieces (I, J, L, O, S, T, Z) are properly implemented with correct shapes, colors, and rotation patterns. The game should use the standard piece spawning order and randomization system. Deduct 2 points for each missing piece or incorrect rotation behavior. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the scoring and level progression system properly implemented?",
      "description": "Evaluate whether the scoring system follows standard Tetris rules (points for line clears with bonuses for multiple lines cleared simultaneously), and whether difficulty increases appropriately with level progression (faster falling speed). Deduct 3 points if scoring logic is incorrect, 3 points if level progression is absent, and 4 points if speed adjustment is not implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the game include preview functionality and proper game state management?",
      "description": "Check whether the game includes a next piece preview, ability to pause/resume, game over detection, and game restart functionality. Deduct 2 points for each missing feature. Also verify that the game state is properly managed throughout the gameplay cycle. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid input, browser resize, focus loss, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Ghost piece showing where the current piece will land 2. Hold piece functionality 3. Animated line clears 4. Sound effects or music). Add 2.5 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple game loop mechanisms coexisting) 2. Function modules unrelated to Tetris (e.g., unnecessary animations) 3. Fancy effects that affect performance (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), code reusability, and build process. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code is monolithic with no separation of concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Input response delay ≤ 100ms 2) Smooth piece movement and rotation 3) Clear visual feedback for actions. Deduct 5 points for sluggish controls, 3 points for jerky animations, and 5 points for unclear or missing visual feedback. Check if the game runs at a consistent frame rate (≥ 30fps) even during intensive operations like clearing multiple lines. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "easy"
}
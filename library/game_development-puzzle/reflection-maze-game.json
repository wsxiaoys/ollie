{
  "index": 203,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure that the code you generate is executable for demonstration.\n\nPlease use HTML and JavaScript to implement a \"Reflection Maze\".\n\n**Task**: Design a reflection maze where players can only determine the correct path by looking at the reflection.\n\n**Hint**: You can create a mirror effect and make the true path of the maze visible only in the reflection.\n\nPlease create this game and include comments in your code to help other developers understand your implementation process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the reflection maze core mechanism fully implemented?",
      "description": "Check whether the code implements the essential mirror reflection effect where the true path is only visible in the reflection. Review if HTML Canvas or CSS transforms are used correctly to create the mirroring effect. Score 0 if no reflection is implemented, 5 if basic reflection exists but with visual glitches, and 10 if the reflection perfectly reveals the hidden path.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the maze generation algorithm properly implemented?",
      "description": "Evaluate the maze generation algorithm for complexity and randomness. Check if it creates proper paths with walls and dead ends. Verify that the algorithm ensures at least one valid solution. Score 3 if using hardcoded maze patterns, 7 if implementing a simple maze generation algorithm, and 10 if implementing an advanced algorithm (recursive backtracking, Kruskal's, etc.) with configurable difficulty levels.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the player movement and collision detection correctly implemented?",
      "description": "Review the player movement mechanics and collision detection with maze walls. Check if keyboard/mouse/touch controls are properly implemented, and if collisions prevent walking through walls. Validate that movement feels responsive (â‰¤100ms delay). Deduct 5 points if collision detection has bugs, 3 points if movement feels sluggish, and 5 points if multiple control methods aren't supported.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game state management complete with win/lose conditions?",
      "description": "Check if the game properly tracks player position, progress, and implements clear win/lose conditions. Verify if the game has restart functionality and potentially tracks completion time or move count. Score 0 if no win condition exists, 5 if basic win detection is implemented, and 10 if comprehensive game state management includes time tracking, move counting, and multiple difficulty levels.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as out-of-bounds input, browser resize, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic lighting effects that affect reflections 2. Multiple mirror angles or distortions 3. Progressive difficulty with fog-of-war mechanics). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple movement control systems) 2. Function modules unrelated to the reflection maze concept (e.g., unrelated mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects causing lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/input handling layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks proper comments as requested in the task. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching that enhances the reflection effect (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Clear visual distinction between the maze and its reflection. Deduct 3 points for each confusing visual element, 5 points for color combinations that make the reflection hard to see, and 5 points for chaotic layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Reflection updates instantly with player movement 2) Transition animations controlled between 300-500ms 3) Clear visual feedback for successful/unsuccessful moves. Deduct 5 points for laggy reflection updates, 3 points for jerky character movement, and 5 points for unclear feedback when hitting walls or finding the correct path. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "medium"
}
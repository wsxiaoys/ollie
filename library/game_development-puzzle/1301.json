{
  "index": 1301,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure that the code you generate is executable. Write code for a WeChat Mini Program that is a match-3 game, where the image and audio resources do not exceed 200K.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the basic match-3 game mechanics fully implemented?",
      "description": "Review whether the code accurately implements core match-3 mechanics including grid initialization, piece swapping, match detection, cascading effects, and score calculation. Score 0 if the core interaction logic is missing, 5 if only basic matching is implemented without cascades, and 10 if the full match-3 system with special combinations and cascading effects is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the WeChat Mini Program framework properly utilized?",
      "description": "Evaluate proper use of the WXML/WXSS/JS architecture, lifecycle hooks (onLoad, onShow), and WeChat-specific APIs. Check for proper page navigation, event handling with bindtap, and appropriate use of component encapsulation. Deduct 5 points if custom components aren't used where appropriate, 3 points if lifecycle methods are misused, and 3 points if WeChat's storage APIs aren't utilized for game state.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the resource optimization requirement met?",
      "description": "Verify that image and audio resources are properly optimized and do not exceed the 200K limit. Check for image compression techniques, sprite sheets usage, audio format optimization (preferring compressed formats like mp3), and lazy loading implementation. Deduct 10 points if resources exceed 200K, 5 points if no optimization techniques are applied, and 3 points if resource loading isn't handled efficiently.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game progression system well-designed?",
      "description": "Assess whether the game includes essential progression elements such as levels with increasing difficulty, goals/targets system, rewards mechanism, and player stats tracking. Deduct 5 points if level progression is missing, 3 points if there's no difficulty scaling, and 3 points if player achievements aren't tracked or displayed.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as touch events outside the grid, rapid consecutive taps, WeChat Mini Program lifecycle interruptions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Special power-ups beyond basic matching 2. Social sharing features with custom images 3. Daily challenges/rewards system). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems coexisting) 2. Function modules unrelated to match-3 gameplay (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), use of design patterns appropriate for game development, and code maintainability. Deduct 5 points if global state is poorly managed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between UI and game logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern mobile game design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, readable on small screens). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for poor adaptation to different WeChat device screens. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Touch feedback delay ≤ 100ms 2) Match animations duration controlled between 300-500ms 3) Clear visual feedback for successful/unsuccessful matches. Deduct 5 points for each operation without feedback, 3 points for laggy animations during cascades, and 5 points for unresponsive touch areas. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
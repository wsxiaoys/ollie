{
  "index": 1036,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Pay attention to ensuring the generated code is executable for demonstration. Help me design a Tetris game that I can load and play on my mobile phone.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Tetris game mechanics fully implemented?",
      "description": "Review whether the code accurately implements the Tetris game mechanics, including piece rotation, movement, collision detection, line clearing, and scoring. Score 0 if the core game logic is missing, 5 if only basic movement and collision are implemented, and 10 if all standard Tetris mechanics (including wall kicks, ghost pieces, and scoring system) are fully included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the mobile-first responsive design properly implemented?",
      "description": "Check whether the game is properly optimized for mobile devices with responsive layout, appropriate touch controls (swipe gestures for movement, tap for rotation), and viewport meta tags. Verify if the game adapts to different screen sizes and orientations. Deduct 5 points if touch controls are poorly implemented, and 3 points if the game doesn't properly adapt to different screen orientations or sizes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game state management and persistence implemented?",
      "description": "Evaluate whether the game implements state management for pausing/resuming gameplay and persists game data (high scores, current game) using localStorage or IndexedDB. Check if the game handles browser refresh and app closure gracefully. Deduct 5 points if game state isn't preserved on page reload, and 3 points if high scores aren't persistently stored. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the mobile performance optimization properly addressed?",
      "description": "Assess whether the implementation considers mobile performance optimizations like requestAnimationFrame for rendering, touch event handling with proper debouncing, battery consumption awareness, and minimal DOM manipulation. Check for offline playability using service workers. Deduct 5 points for frame rate drops below 30fps on mid-range devices, and 5 points for lack of offline support. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as unexpected input, browser compatibility issues, memory management, and touch event anomalies) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Multiple difficulty levels with speed adjustment 2. Special power-ups or challenges 3. Customizable themes or piece styles). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple control schemes that conflict) 2. Function modules unrelated to Tetris (e.g., unnecessary animations or mini-games) 3. Fancy effects that affect mobile performance (e.g., excessive particle effects or animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/input layers), code organization, and build process optimization for mobile delivery (minification, asset optimization). Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the assets aren't properly optimized for mobile delivery. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional mobile design standards?",
      "description": "Evaluate whether the overall design follows modern mobile design principles: 1) Touch-friendly UI elements (minimum 44x44px tap targets) 2) Proper layout spacing for mobile screens 3) Professional font system with readable sizes on small screens (minimum 16px for primary text). Deduct 3 points for each hard-to-tap element, 5 points for poor contrast that affects visibility in different lighting conditions, and 5 points for elements that get cut off on common mobile screen sizes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the mobile interaction smooth and intuitive?",
      "description": "Judge whether the touch interactions conform to mobile user expectations: 1) Touch response delay â‰¤ 100ms 2) Intuitive swipe/tap controls that match standard Tetris actions 3) Clear visual and haptic feedback for interactions. Deduct 5 points for each touch interaction without feedback, 3 points for control schemes that feel unintuitive or conflict with system gestures, and 5 points for controls that are difficult to use with one hand. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
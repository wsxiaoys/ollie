{
  "index": 1126,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Be sure to provide executable code when possible. Generate code for an Angry Birds game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core physics engine for Angry Birds properly implemented?",
      "description": "Review whether the code accurately implements projectile physics, gravity, collision detection, and material properties. Check if trajectory prediction is included for aiming. Score 0 if physics engine is missing, 5 if only basic projectile motion is implemented, and 10 if it includes realistic physics with material deformation and destruction.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all essential game objects and their interactions implemented?",
      "description": "Evaluate if the code includes birds with different abilities, various destructible structures, pigs with health properties, and the slingshot mechanism. Check whether object interactions (collisions, destruction) have proper visual and sound feedback. Deduct 3 points if bird special abilities are missing, 3 points if structure destruction physics are simplified, and 2 points if collision feedback is inadequate. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the level design system properly implemented?",
      "description": "Check if the game includes a level management system with progressive difficulty, score calculation, star rating system, and level persistence. Verify if the code allows for custom level creation or loading predefined level structures. Deduct 5 points if only fixed levels are available without progression, and 3 points if the scoring system is overly simplified. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game loop fully functional with proper state management?",
      "description": "Evaluate whether the game includes proper state management (menu, gameplay, level completion, game over), turn management, retry mechanism, and level progression. Check if the player can restart levels, skip to next bird, or exit to menu. Deduct 3 points if state transitions are not smooth, 3 points if save/load functionality is missing, and 3 points if pause functionality is not implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as window resizing, rapid input sequences, performance degradation on complex scenes, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Weather effects impacting physics 2. Unique bird abilities beyond the original game 3. Interactive background elements 4. Social sharing of replays). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple physics engines coexisting) 2. Function modules unrelated to the core gameplay (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects slowing down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/rendering/input systems), use of design patterns appropriate for game development, and asset management. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between game logic and rendering. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional game design standards?",
      "description": "Evaluate whether the visuals follow polished game design principles: 1) Consistent art style across all elements 2) Clear visual hierarchy for gameplay elements 3) Appropriate feedback animations for player actions 4) Intuitive UI with clear icons and readable text (font size â‰¥ 14px). Deduct 3 points for inconsistent art style, 3 points for cluttered UI elements, and 4 points for confusing visual feedback during gameplay. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and game-appropriate?",
      "description": "Judge whether the controls and animations meet modern game standards: 1) Responsive controls (<100ms feedback) 2) Smooth transitions between game states 3) Satisfying visual/audio feedback for destruction physics 4) Appropriate camera movements that follow action. Deduct 3 points for input lag, 3 points for jerky animations, 2 points for missing sound effects during key interactions, and 2 points for disorienting camera behavior. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
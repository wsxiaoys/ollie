{
  "index": 1747,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure the generated code is executable for display. Help me create a Tetris web mini-game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Tetris gameplay system fully implemented?",
      "description": "Review whether the code accurately implements the falling tetromino mechanics, block rotation (with wall kicks), line clearing, and scoring system. Score 0 if the core gameplay logic is missing, 5 if only basic pieces movement is implemented, and 10 if it includes advanced features like hard drop, ghost piece preview, and proper randomization of pieces.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the game handle user input correctly?",
      "description": "Check whether keyboard/touch controls are implemented properly with responsive handling of move left/right, rotate, soft drop and hard drop actions. Deduct 3 points if only keyboard or only touch controls are implemented, 5 points if there's noticeable input lag (>100ms), and 2 points if rotation handling doesn't include wall kick mechanics. Full score requires both keyboard and touch support with configurable controls.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a complete game state management system?",
      "description": "Evaluate whether the game includes proper state management (start screen, gameplay, pause, game over states) and transitions between these states. Check if the game allows pausing, resuming, and restarting. Deduct 5 points if there's no pause functionality, 3 points if game state isn't preserved between sessions, and 2 points if state transitions are abrupt or confusing.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the game implement proper collision detection and boundary checks?",
      "description": "Check whether the code properly detects collisions between tetrominos and walls/floor/other blocks, prevents pieces from moving outside the boundaries, and correctly handles piece locking when it lands. Deduct 5 points if pieces can overlap with existing blocks, 5 points if pieces can escape game boundaries, and 3 points if there are detectable bugs in the locking mechanism.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid repeated inputs, browser resize events, focus loss, memory leaks, etc.) and provide friendly error recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Multiple difficulty levels 2. Special pieces or power-ups 3. Multiplayer mode or leaderboards 4. Custom themes or visual effects). Add 2.5 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple game loop implementations) 2. Function modules unrelated to Tetris (e.g., unrelated mini-games) 3. Fancy effects that affect performance (e.g., excessive animations that cause frame drops). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/rendering/input handling), appropriate use of design patterns, and code maintainability. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 3 points if naming conventions are inconsistent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface design meet professional standards?",
      "description": "Evaluate whether the game UI follows modern design principles: 1) Clean, readable game grid with distinct block colors 2) Proper layout with next piece preview and score display 3) Responsive design that works on different screen sizes. Deduct 3 points for cluttered UI elements, 4 points for poor color contrast that makes blocks hard to distinguish, and 5 points for layouts that break on mobile devices. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the game performance smooth and optimized?",
      "description": "Judge whether the game runs at a consistent frame rate (60 FPS), renders efficiently without visual stuttering, and optimizes browser resources. Deduct 5 points for noticeable frame drops during gameplay, 3 points for inefficient rendering (e.g., redrawing the entire board instead of just changed blocks), and 5 points if the game causes significant battery drain or browser slowdown. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "medium"
}
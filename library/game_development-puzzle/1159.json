{
  "index": 1159,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration purposes. Please help me create an HTML program for a web-based version of Candy Crush (Happy Elimination game).",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core game mechanics fully implemented?",
      "description": "Review whether the code accurately implements the match-3 mechanics through HTML/JavaScript, including board generation, candy matching algorithms, and cascading effects when candies are eliminated. Score 0 if the core game logic is missing, 5 if only basic matching is implemented, and 10 if advanced features like special candies and combos are included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the board generation and candy management properly handled?",
      "description": "Evaluate whether the game board dynamically generates candies with appropriate randomization, handles candy falling animations, and properly refills the board after matches. Check if the code prevents impossible game states and ensures at least one valid match is always available. Deduct 5 points if the board generation is static, and 3 points if refilling logic is flawed. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are special candies and power-ups implemented?",
      "description": "Check if the game includes special candies (striped, wrapped, color bomb) that are created when matching more than 3 candies, and if these special candies have appropriate effects when activated. Evaluate if combinations between special candies create enhanced effects. Score 0 if no special candies exist, 5 if basic special candies are implemented, and 10 if all combinations work correctly.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the level progression and scoring system implemented?",
      "description": "Assess whether the game has a complete level system with objectives (score targets, collecting specific candy types, etc.), move limits, and progression tracking. Check if the scoring system appropriately rewards larger matches and combo chains. Deduct 5 points if level objectives are missing, and 3 points if the scoring system is too simplistic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid swipes, rapid player inputs, browser resizing, etc.) and provide friendly error handling or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Unique candy types beyond standard match-3 games 2. Physics-based interactions or gravity effects 3. Customizable themes or board layouts). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to check for matches) 2. Function modules unrelated to Candy Crush gameplay (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects that slow down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), code reusability for similar candy types, and browser compatibility. Deduct 5 points if global variable pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the game doesn't work across major browsers. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Vibrant but harmonious color palette suitable for a candy-themed game 2) Proper layout with clear visual hierarchy and adequate spacing between elements 3) Professional font system with readable text sizes (body font size ≥ 14px). Deduct 3 points for each crowded visual element, 5 points for a jarring color combination, and 5 points for disorganized UI components. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Immediate visual/audio feedback on candy selection (≤ 100ms) 2) Smooth candy swapping and elimination animations (300-500ms) 3) Satisfying cascading effects that pause appropriately between sequences. Deduct 5 points for each interaction without feedback, 3 points for choppy animations during combo chains, and 5 points for unintuitive swipe controls or candy selection. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
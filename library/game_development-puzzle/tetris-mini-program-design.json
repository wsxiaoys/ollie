{
  "index": 780,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to make any code you provide executable and ready to run. Please help me design a working Tetris mini-program.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Tetris game mechanics fully implemented?",
      "description": "Review whether the code accurately implements tetromino movement (left/right/down), rotation, collision detection, and line clearing. Check if the game handles piece spawning, gravity, and increasing difficulty. Score 0 if core mechanics are missing, 5 if basic movement works but with issues, and 10 if all standard Tetris mechanics are properly implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the game board system properly designed?",
      "description": "Evaluate the game board implementation, including grid system, block rendering, boundary checking, and state management. The board should handle piece locking, line clearing animations, and game over detection. Deduct 5 points if the grid system is inconsistent, 3 points if boundary checks are incomplete, and 5 points if game over detection is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the Tetris gameplay features complete?",
      "description": "Check if the code includes standard Tetris features like piece preview, piece holding, score system, level progression, and increasing speed. Deduct 3 points for each missing feature. The game should follow standard Tetris guidelines for scoring and difficulty progression. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the control system responsive and intuitive?",
      "description": "Assess the implementation of keyboard/touch controls, including hard drop, soft drop, and wall kicks. Check whether the game supports both keyboard and touch controls with appropriate response times. Deduct 5 points if key controls are missing, 3 points if controls have noticeable input lag, and 3 points if proper control customization is absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid input sequences, browser resizing, game pausing/resuming, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Ghost piece showing where the tetromino will land 2. Multiple game modes like marathon/sprint/ultra 3. Combo system with visual feedback). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple collision detection algorithms) 2. Function modules unrelated to Tetris (e.g., unnecessary animations that don't enhance gameplay) 3. Fancy effects that affect performance (e.g., excessive particle effects during line clears). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/input handling layers), maintainability, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the game loop implementation causes performance issues. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (clear contrast between tetrominos and background) 2) Proper layout spacing (game board, next piece preview, score display properly arranged) 3) Professional font system (readable score and level indicators). Deduct 3 points for each visual element that causes confusion, 5 points for poor color choices that make pieces difficult to distinguish, and 5 points for cluttered UI that obscures gameplay. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Piece movement responds within 100ms 2) Line clear animations complete within 300-500ms 3) Game over sequence provides clear feedback. Deduct 5 points for laggy piece movement, 3 points for jerky animations, and 5 points for confusing or missing visual feedback during critical game events like level ups or game over. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "medium"
}
{
  "index": 191,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code for demonstration whenever possible.\nPlease write a Tetris game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Tetris game engine fully implemented?",
      "description": "Review whether the code accurately implements the tetromino mechanics (I, J, L, O, S, T, Z pieces), rotation system (preferably Super Rotation System), and collision detection. Score 0 if the core game logic is missing, 5 if basic piece movement is implemented but lacks proper rotation or collision, and 10 if the standard Tetris mechanics are completely implemented including wall kicks and hard/soft drops.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the game rules and scoring correctly implemented?",
      "description": "Check whether the code includes line clearing mechanics, handles scoring properly (single/double/triple/tetris line clears with appropriate point values), implements level progression with increasing speed, and includes next piece preview. Deduct 3 points if scoring logic is missing, 3 points if level progression is absent, 2 points if next piece preview is not implemented, and 2 points if line clearing animations are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game state management properly designed?",
      "description": "Evaluate whether the game includes proper state management for different game phases (start screen, active gameplay, pause, game over), save/load functionality, and high score tracking. Check if the game state can be properly reset for a new game. Deduct 3 points for missing pause functionality, 3 points for incomplete game over handling, and 4 points if state transitions are buggy or incomplete. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the control system responsive and player-friendly?",
      "description": "Review whether the game includes keyboard controls (arrow keys, spacebar), optional touch/click controls for mobile compatibility, and customizable key bindings. Test for input lag and whether the game handles input buffer properly (especially for rapid keypress and delayed auto-shift). Deduct 5 points if controls are not responsive, 3 points if mobile controls are missing, and 2 points if the control scheme is not intuitive. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid inputs, browser resizing, focus loss, etc.) and provide friendly error handling or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Ghost piece showing where the tetromino will land 2. Hold piece functionality 3. Multiple difficulty modes 4. Special visual/sound effects for combos). Add 2.5 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple rendering loops) 2. Function modules unrelated to Tetris (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects that cause lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/input handling), code organization, proper use of design patterns, and performance optimization. Deduct 3 points if global state pollution is found; deduct 3 points if the code duplication rate is too high; deduct 4 points if the game loop implementation causes performance issues. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the visual design follows classic Tetris aesthetics while maintaining modern UI principles: 1) Clear block visibility and distinction between piece types 2) Proper game board proportions 3) Well-designed UI elements for score, level, and next piece. Deduct 3 points for poor color choices that make pieces hard to distinguish, 4 points for cluttered UI that obscures gameplay, and 3 points for poor readability of game statistics. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game animations and interactions feel responsive and satisfying: 1) Piece movement and rotation should be instantaneous 2) Line clear animations should be visually pleasing but not too lengthy 3) Game over sequence should be clear. Deduct 4 points if piece movement feels laggy, 3 points if transitions between game states are jarring, and 3 points if visual feedback for player actions is missing or unclear. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "medium"
}
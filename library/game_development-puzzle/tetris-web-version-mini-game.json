{
  "index": 1304,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for display. Create a Tetris web version mini-game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Tetris game logic fully implemented?",
      "description": "Evaluate whether the code implements all core Tetris mechanics: tetromino random generation, rotation (including wall kicks), movement, collision detection, line clearing, and increasing difficulty levels. Score 0 if the core game logic is incomplete, 5 if basic movement and collision are implemented but lacking certain features, and 10 if all standard Tetris mechanics are correctly implemented according to modern Tetris guidelines.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the game board rendering system properly implemented?",
      "description": "Check if the game board is correctly rendered using HTML5 Canvas or DOM elements, with proper grid system, piece preview, and next piece display. Review whether the rendering is performant (60+ FPS) even during fast piece drops and line clears. Deduct 3 points if rendering is flickering, 5 points if the game slows down during animations, and 2 points if the grid alignment is inconsistent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the game controls responsive and user-friendly?",
      "description": "Examine keyboard controls implementation including left/right movement, rotation, soft drop, hard drop, and hold functionality. Check for touch controls on mobile devices. Deduct 3 points if key repeat rates are not optimized for gameplay, 5 points if any standard control is missing, and 3 points if there's noticeable input lag. Award 2 bonus points for customizable controls. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the scoring system and game progression properly implemented?",
      "description": "Verify the implementation of standard Tetris scoring mechanics (single/double/triple/tetris line clears), level progression, and speed increase. Check if the game tracks and displays high scores. Deduct 5 points if scoring doesn't follow standard Tetris rules, 3 points if level progression is absent, and 2 points if high score persistence is not implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser resizing, tab switching, invalid inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Ghost piece showing where tetromino will land 2. Hold piece functionality 3. Battle mode or AI opponent 4. Special visual effects for Tetris clears or combos). Add 2.5 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple game loop implementations) 2. Function modules unrelated to Tetris (e.g., unrelated mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects that cause lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 3 points if the codebase lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern game UI principles: 1) Clear visual distinction between game area and information panels 2) Readable score and level displays (even during fast gameplay) 3) Professional color scheme that enhances gameplay visibility 4) Responsive design that works across different screen sizes. Deduct 3 points for each UI element that hinders gameplay, 5 points for poor readability, and 5 points for non-responsive design. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to Tetris gameplay standards: 1) Piece movement feels responsive (≤ 100ms delay) 2) Line clear animations are satisfying but quick (≤ 500ms) 3) Game over and level up transitions are clear without disrupting flow. Deduct 5 points for laggy piece movement, 3 points for jarring or missing animations, and 5 points for unresponsive controls during animations. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
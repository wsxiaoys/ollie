{
  "index": 1735,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration. Please help me create a word matching game that focuses on memory and learning, with Chinese on one side and English on the other, in HTML code for sixth grade first semester.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core word matching game mechanism fully implemented?",
      "description": "Review whether the code implements a proper card-flipping mechanism for word matching, with random distribution of Chinese-English pairs, correct match detection, and score tracking. Score 0 if the core matching logic is not implemented, 5 if only basic flipping is implemented without proper matching validation, and 10 if it includes proper matching validation with appropriate feedback.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the Chinese-English vocabulary content appropriate for sixth grade first semester?",
      "description": "Evaluate whether the vocabulary selection matches the sixth grade first semester curriculum standards, with age-appropriate difficulty levels (roughly 300-500 common words). Deduct 5 points if the vocabulary is too advanced or too elementary, 3 points if there aren't enough word pairs (at least 15-20 pairs minimum), and 5 points if the Chinese-English translations are incorrect. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the game implement learning reinforcement features?",
      "description": "Check for features that reinforce vocabulary memorization, such as spaced repetition, hint systems, pronunciation aids, or review modes for previously matched words. Deduct 5 points if no learning reinforcement features exist, 3 points if only basic review is available. Give full points if comprehensive learning tools are implemented including audio pronunciation, repetition of difficult words, or progress tracking.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a clear game progression system?",
      "description": "Assess whether the game includes levels of increasing difficulty, achievement tracking, or a scoring system that encourages continued play and learning. Deduct 5 points if there's no progression system, 3 points if progression exists but without difficulty adjustment. Full points if the system includes multiple levels, performance metrics, and adaptive difficulty based on player performance.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code handles common abnormal situations (such as invalid inputs, browser compatibility issues, or unexpected user actions) and provides friendly error handling or recovery mechanisms. Code with strong robustness should effectively handle edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the learning experience (e.g., 1. Audio pronunciation of words 2. Visual memory aids like pictures 3. Animated feedback for correct/incorrect matches). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to restart a game) 2. Function modules unrelated to word matching (e.g., an unrelated mini-game) 3. Fancy effects that affect performance (e.g., excessive animations that slow down card flipping). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or if code organization is poor; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet educational design standards?",
      "description": "Evaluate whether the overall design follows child-friendly educational design principles: 1) Age-appropriate color scheme (bright but not distracting) 2) Clear and readable typography (font size â‰¥ 16px, simple fonts) 3) Intuitive layout with proper spacing between elements. Deduct 3 points for visual clutter, 5 points for text that's difficult to read, and 5 points for confusing navigation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction suitable for children?",
      "description": "Judge whether the interactive elements are appropriate for sixth-grade students: 1) Simple and obvious clickable elements 2) Clear feedback for actions 3) Forgiving interaction design that prevents frustration. Deduct 5 points for confusing interactions, 3 points for insufficient feedback, and 5 points for interactions requiring fine motor skills beyond a typical sixth-grader's ability. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "easy"
}
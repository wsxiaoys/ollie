{
  "index": 1524,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable and displayable. Write me a visualizable program that can solve Rubik's cubes up to 2560 orders. The first step is to generate a cube, then scramble it with random moves, then solve it, and finally end the program. Don't use any libraries because I can't use them here.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Rubik's cube generation and data structure correctly implemented?",
      "description": "Review whether the code accurately implements the N×N×N cube data structure (supporting up to 2560 orders) with proper face representation, coordinate mapping, and state initialization. Check if the cube generation includes correct color assignment for each face and proper indexing system for individual pieces. Score 0 if basic cube structure is missing, 5 if only supports small orders (<100), and 10 if efficiently handles large orders up to 2560 with optimized memory usage.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the cube scrambling algorithm properly implemented?",
      "description": "Evaluate whether the scrambling function generates truly random and solvable cube states using valid move sequences. Check if the implementation includes proper move notation (F, R, U, L, D, B with modifiers), move validation, and ensures the scrambled state is always solvable. Deduct 5 points if scrambling doesn't maintain cube solvability, 3 points if move generation is biased or not truly random. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the cube solving algorithm correctly implemented and efficient?",
      "description": "Check whether the solving algorithm can handle cubes of various orders efficiently. For large orders (>100), evaluate if advanced algorithms like reduction method or layer-by-layer approach are used. Deduct 5 points if the algorithm fails on orders >10, 3 points if solving time is unreasonably long for medium orders (10-50). Bonus 2 points if multiple solving strategies are implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the visualization system comprehensively designed?",
      "description": "Evaluate whether the visualization includes proper 3D rendering or isometric projection of the cube, smooth rotation animations, and clear color differentiation for faces. Check if the display scales appropriately for different cube orders and includes progress indicators during solving. Deduct 5 points if visualization is unclear for orders >5, 3 points if animations are jerky or missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle edge cases such as invalid cube orders, memory limitations for large cubes, and graceful degradation when approaching system limits. Code should include proper error handling for invalid moves, memory allocation failures, and timeout scenarios. Give 10 points for comprehensive error handling, 5 points for basic exception handling, and 0 points if no error handling is present.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes enhanced features such as: 1) Move counter and timer display 2) Step-by-step solving visualization with explanations 3) Pattern recognition for special cube states 4) Performance metrics for different cube orders 5) Interactive controls for manual manipulation. Add 2 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check for three types of redundancy: 1) Duplicate solving algorithms that serve the same purpose 2) Unnecessary visual effects that don't contribute to cube solving visualization 3) Redundant data structures or excessive memory allocation. Deduct 3 points for each redundancy found, and directly deduct 10 points if core cube operations are significantly slowed by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design separating cube logic, solving algorithms, and visualization layers. Check for proper function organization, meaningful variable names, and efficient algorithms for large cube orders. Deduct 5 points if code structure is monolithic without clear separation of concerns; deduct 5 points if algorithm complexity is unnecessarily high (e.g., O(n³) when O(n²) is possible); deduct 3 points if variable naming is unclear. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the visual design follows modern UI principles: 1) Harmonious color scheme that clearly distinguishes cube faces 2) Proper layout with adequate spacing between controls and cube display 3) Professional typography for labels and status information 4) Responsive design that adapts to different screen sizes. Deduct 3 points for each cluttered visual element, 5 points for poor color contrast affecting readability, and 5 points for chaotic layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the cube animations and transitions provide smooth user experience: 1) Cube rotation animations should be fluid (30+ fps) 2) Solving steps should be clearly visible with appropriate timing 3) Progress indicators should update smoothly 4) Visual feedback for each solving step should be immediate. Deduct 5 points for choppy animations, 3 points for unclear step transitions, and 5 points for poor performance on larger cube orders. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
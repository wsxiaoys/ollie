{
  "index": 1068,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Help me create a web-based Tetris game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Tetris core game mechanics fully implemented?",
      "description": "Review whether the code accurately implements the Tetris game board (typically 10x20 grid), seven standard tetromino pieces (I, O, T, S, Z, J, L), piece rotation system, and line clearing logic. Check if gravity-based piece falling is implemented with proper timing control. Score 0 if core mechanics are missing, 5 if only basic piece movement exists, and 10 if all standard Tetris rules including wall kicks and line clearing are fully implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the game control system responsive and intuitive?",
      "description": "Evaluate whether keyboard controls (arrow keys for movement, up/space for rotation, down for soft drop) are properly mapped and responsive. Check for smooth piece movement without lag, proper handling of key repeat rates, and support for common Tetris control schemes like DAS (Delayed Auto Shift). Deduct 3 points if controls feel sluggish, 5 points if rotation system is buggy, and 2 points if no soft/hard drop is implemented. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game state management and progression system implemented?",
      "description": "Check whether the code includes proper score calculation (points for line clears, soft drops, etc.), level progression with increasing speed, next piece preview, and game over detection. Verify if the game tracks statistics like lines cleared, current level, and implements proper difficulty scaling. Deduct 5 points if scoring system is missing, 3 points if no level progression, and 2 points if no next piece preview. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game loop and timing system properly architected?",
      "description": "Evaluate whether the game implements a proper game loop using requestAnimationFrame or setInterval with consistent timing. Check for proper separation between game logic updates and rendering, frame rate consistency, and pause/resume functionality. Verify that the game maintains stable performance across different devices. Deduct 5 points if game loop is poorly implemented, 3 points if timing is inconsistent, and 2 points if no pause functionality. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common edge cases (piece collision detection, boundary checking, rapid key presses, window resize events) and provide graceful error handling. Code should prevent illegal moves, handle browser compatibility issues, and maintain game state integrity. Robust code should effectively handle these scenarios, giving 10 points. If robustness is average, give 5 points, and if no error handling exists, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that enhance gameplay?",
      "description": "Check whether the code includes engaging features beyond basic Tetris (e.g., 1. Ghost piece preview showing drop location 2. Hold piece functionality 3. Combo/T-spin detection 4. Sound effects and background music 5. Local high score storage). Add 2 points for each well-implemented innovative feature (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Duplicate game logic implementations (e.g., multiple collision detection systems) 2. Unnecessary features unrelated to Tetris gameplay (e.g., built-in chat system) 3. Performance-heavy visual effects that don't add value (e.g., complex particle systems for every line clear). Deduct 3 points for each redundancy found, and directly deduct 10 points if core gameplay is impacted by bloated code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (separation of game logic, rendering, input handling), code organization, and maintainability. Check for proper variable naming, function decomposition, and absence of global state pollution. Deduct 5 points if code structure is monolithic; deduct 5 points if code duplication exceeds 25%; deduct 3 points if no clear separation of concerns. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface design meet professional gaming standards?",
      "description": "Evaluate whether the visual design follows modern game UI principles: 1) Clear game board with distinct grid lines and piece colors 2) Readable score/level display with proper contrast 3) Intuitive layout with game board centered and info panels positioned logically 4) Consistent color scheme that doesn't strain eyes during extended play. Deduct 3 points for poor color contrast, 5 points for cluttered layout, and 5 points for illegible text or confusing visual hierarchy. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Are the game animations and visual feedback smooth and polished?",
      "description": "Judge whether visual effects enhance gameplay experience: 1) Smooth piece movement and rotation animations 2) Satisfying line clear effects with appropriate timing 3) Clear visual feedback for piece placement and game events 4) Consistent 60fps performance during gameplay. Deduct 5 points for choppy animations, 3 points for delayed visual feedback, 5 points for missing line clear effects, and 2 points for inconsistent frame rates. Full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "medium"
}
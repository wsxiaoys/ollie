{
  "index": 1736,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be careful to ensure the code you generate is executable. As a programmer, please help me create a code for an English card-flipping memory game to learn weekly English vocabulary.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core memory game mechanism properly implemented?",
      "description": "Review whether the code accurately implements the card-flipping mechanism with state management for each card (flipped/unflipped), pair matching logic, and score tracking. Score 0 if the core game logic is missing, 5 if only basic flipping is implemented without matching, and 10 if the complete memory game logic with pair validation is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the English vocabulary learning component effectively integrated?",
      "description": "Check whether the code includes a system for presenting English vocabulary words with their meanings/definitions, proper word-pair associations, and methods to track vocabulary learning progress. Deduct 5 points if vocabulary is static without a learning component, 3 points if words are presented without meanings or context. The full score is 10 points for a comprehensive vocabulary learning system with spaced repetition concepts.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a proper weekly vocabulary management system?",
      "description": "Evaluate whether the code organizes vocabulary into weekly sets, includes functionality to progress from one week to another, and maintains learning history. Deduct 5 points if there's no clear weekly structure, 3 points if the structure exists but without progress tracking. Give 10 points for a complete weekly vocabulary management system with progress visualization.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the game include appropriate learning reinforcement features?",
      "description": "Assess whether the code implements features that reinforce vocabulary learning (such as pronunciation audio, example sentences, review mechanisms for previously learned words, difficulty progression). Deduct 3 points for each missing key learning reinforcement component. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, missing vocabulary data, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the learning experience (e.g., 1. Spaced repetition algorithm 2. Vocabulary pronunciation with text-to-speech 3. Progress statistics visualization 4. Personalized difficulty adjustment). Add 2.5 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems) 2. Function modules unrelated to vocabulary learning (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/data layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear file/component organization. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching suitable for learning (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 16px for good readability, clear distinction between vocabulary and definitions). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for hard-to-read text. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and pedagogically sound?",
      "description": "Judge whether the card-flipping and game interactions conform to educational design principles: 1) Immediate feedback on card matching attempts 2) Clear visual cues for matched/unmatched pairs 3) Appropriate animations that don't distract from learning 4) User-friendly controls for all age groups. Deduct 5 points for delayed feedback, 3 points for confusing visual cues, and 5 points for overly complex interaction patterns that detract from the learning focus. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "medium"
}
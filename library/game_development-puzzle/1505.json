{
  "index": 1505,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Help me write runnable code for a tile-matching game app that can eliminate matching blocks of the same color.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the tile-matching core gameplay fully implemented?",
      "description": "Review whether the code accurately implements a grid system for the tiles with proper color assignment, detection of adjacent matches (vertical and horizontal), and elimination mechanics. Score 0 if the core matching logic is missing, 5 if only basic matching detection is implemented, and 10 if the code includes cascading matches, special combinations, and proper score calculation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the game include proper initialization and state management?",
      "description": "Check if the game properly initializes the game board with random or preset patterns, ensures there are valid moves at the start, and maintains game state (running, paused, game over). The code should handle the generation of new tiles after elimination. Deduct 5 points if the initialization doesn't guarantee playable states, and 3 points if there's no proper state management system. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the player interaction system well-designed?",
      "description": "Evaluate the implementation of player controls (mouse/touch interactions) for selecting and swapping tiles. Check if the code validates move legality, provides visual feedback during interactions, and handles multi-input scenarios gracefully. Deduct 5 points if swapping mechanics aren't smooth, and 5 points if there's no visual feedback for selection/swapping. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the game include proper scoring and progression systems?",
      "description": "Review whether the code implements a clear scoring mechanism based on matches (considering chain reactions, combo multipliers), level progression with increasing difficulty, and game objectives/win conditions. Deduct 5 points if scoring is simplistic (fixed points per match), and 5 points if there's no difficulty progression. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid successive clicks, browser resize events, memory management for long gameplay sessions) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Special power-up tiles after specific patterns 2. Time-based challenges 3. Unique visual/sound effects for combos). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to check for matches) 2. Function modules unrelated to tile-matching (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/input handling layers), maintainability of the codebase, and optimization techniques. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no performance optimization for rendering loops. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern game UI principles: 1) Harmonious color matching with visual clarity of different tile types 2) Proper layout with clear game boundaries and UI elements 3) Professional typography for score display and game messages. Deduct 3 points for cluttered game board, 5 points for poor color contrast between tiles, and 5 points for hard-to-read game text. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Responsive tile selection (â‰¤ 100ms feedback) 2) Smooth animations for tile swapping and elimination (300-500ms) 3) Clear visual/audio feedback for matches and combos. Deduct 5 points for laggy animations, 3 points for abrupt transitions between game states, and 5 points for unclear visual feedback during matching. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
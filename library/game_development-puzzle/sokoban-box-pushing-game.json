{
  "index": 1748,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure the code you generate is executable and displayable. Please write a suggested Sokoban (box-pushing) game that I can run in my browser.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Sokoban game core mechanics fully implemented?",
      "description": "Review whether the code accurately implements the core Sokoban mechanics including player movement, box pushing, collision detection with walls, and win condition verification. Score 0 if the basic push mechanics are missing, 5 if only basic movement is implemented without proper collision detection, and 10 if all game rules are fully included with proper win state detection.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are level design and progression implemented?",
      "description": "Check whether the code includes a level system with multiple puzzles of increasing difficulty. Evaluate if levels are properly stored/loaded and if there's a progression system that tracks completed levels. Deduct 3 points if only a single level exists, 5 points if level progression is missing, and 2 points if difficulty scaling is poorly implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game state management properly implemented?",
      "description": "Evaluate whether the game implements proper state management including undo functionality, level restart, game saving/loading, and move counting. Deduct 3 points if undo functionality is missing, 3 points if there's no way to restart a level, and 4 points if game progress cannot be saved/loaded. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game responsive and browser-compatible?",
      "description": "Check whether the game renders properly across different screen sizes and browsers. Verify if the game adapts to different viewport dimensions, has touchscreen support for mobile play, and maintains aspect ratio without breaking the layout. Deduct 3 points for each major browser incompatibility, 5 points if the game is unplayable on mobile, and 2 points if the UI breaks on window resize. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid moves, browser refresh, window resizing, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Custom level editor 2. Move optimization suggestions 3. Time-based challenges 4. Animation effects for pushing). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to restart a level) 2. Function modules unrelated to Sokoban (e.g., unnecessary minigames within the main game) 3. Fancy effects that affect performance (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/input handling), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between game logic and rendering. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Movement response delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual feedback for valid/invalid moves. Deduct 5 points for each operation without feedback, 3 points for sluggish animations, and 5 points for confusing game state indicators. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "medium"
}
{
  "index": 1825,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to make the generated code executable for demonstration. Write a matching game (Lianliankan) using HTML language, displaying small animals.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core matching game (Lianliankan) logic fully implemented?",
      "description": "Review whether the code accurately implements the matching logic where players connect identical animal tiles that can be linked by a line with at most two turns. Check if the code includes validation for matching pairs, path-finding algorithm, and scoring mechanism. Score 0 if the core matching logic is not implemented, 5 if only basic pair validation exists without path-finding, and 10 if complete matching rules with proper path visualization are implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are animal graphics properly implemented and displayed?",
      "description": "Evaluate whether the game uses proper animal graphics (at least 6 different animal types), with consistent style and clear visibility. Check if images are preloaded to prevent flickering during gameplay. Deduct 3 points if fewer than 6 animal types are used, 4 points if images have inconsistent sizes or styles, and 5 points if images fail to load properly. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game board generation and layout properly implemented?",
      "description": "Check if the code generates a balanced game board with proper randomization that ensures all pairs can be matched. Verify that the board layout is responsive and properly aligned. Deduct 5 points if the board generation doesn't ensure solvability, 3 points if the layout is fixed and not responsive, and 2 points if the tile arrangement is visually confusing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there proper game state management and progression?",
      "description": "Evaluate if the game includes proper state management (start, play, win/lose conditions), timer functionality, scoring system, and level progression. Deduct 3 points if win/lose conditions aren't properly detected, 3 points if there's no timer or scoring system, and 4 points if the game lacks level progression or difficulty adjustment. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid clicking, clicking already matched tiles, invalid connections) and provide friendly error handling or recovery mechanisms. Code with strong robustness should prevent game-breaking behaviors and handle edge cases effectively, giving 10 points. If the robustness is average, give 5 points, and if no exception handling exists, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Hint system that helps players find matches 2. Special effects for successful matches 3. Combo system for consecutive quick matches 4. Different difficulty modes). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to reset the game) 2. Function modules unrelated to the matching game (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive animations that slow down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), code organization, and readability. Deduct 5 points if global variables are excessively used or if there's no separation of concerns; deduct 5 points if the code duplication rate is too high (over 30%); deduct 3 points if the code lacks proper comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms for matching animations 3) Clear visual indication of selected tiles and valid/invalid matches. Deduct 5 points for each operation without feedback, 3 points for animations that are too slow or jerky, and 5 points for unclear selection indicators. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "easy"
}
{
  "index": 1348,
  "question": "You are a coding expert. Please use your professional knowledge to generate accurate and expert responses. Make sure the code you provide is executable. Rewrite a Tetris mini-game for WeChat, with all detailed steps clearly explained.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Tetris core game logic fully implemented?",
      "description": "Review whether the code accurately implements the Tetris game mechanics through HTML/JavaScript, including 7 standard Tetromino pieces (I, O, T, S, Z, J, L), piece rotation system, line clearing logic, and collision detection. Score 0 if core game mechanics are missing, 5 if only basic piece movement is implemented, and 10 if all standard Tetris rules including T-spin detection and proper rotation systems are fully included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is WeChat Mini Program integration properly implemented?",
      "description": "Check whether the code follows WeChat Mini Program development standards, including proper use of WXML/WXSS/JavaScript structure, WeChat API integration for features like sharing scores, and compliance with WeChat's performance guidelines. Deduct 5 points if not using proper WeChat component lifecycle methods, and 3 points if missing WeChat-specific optimizations like canvas performance tuning. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game state management and persistence mechanism designed?",
      "description": "Evaluate whether the game implements proper state management including score tracking, level progression, high score persistence using WeChat's local storage, and pause/resume functionality. Two-way verification of game state consistency is required. Deduct 5 points if game state can be corrupted during interruptions. Check whether game progress can be saved and restored when users switch between apps. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the complete game experience and social features constructed?",
      "description": "Check whether the code includes complete Tetris experience features like increasing speed levels, preview of next pieces, hold functionality, and WeChat social integration such as leaderboards and score sharing. Deduct 5 points if standard Tetris preview/hold mechanics are not implemented, and 3 points if WeChat sharing capabilities are missing. Give 10 points if fully implemented with smooth social integration.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid key presses, app backgrounding, memory limitations, network interruptions, and user operation errors) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the Tetris experience (e.g., 1. Special effects for T-spins and Tetris clears 2. Achievement system integrated with WeChat 3. Ghost piece preview 4. Customizable themes 5. Vibration feedback for line clears). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems coexisting) 2. Function modules unrelated to Tetris gameplay (e.g., built-in chat system) 3. Fancy effects that affect game performance (e.g., excessive particle systems during line clears). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core Tetris gameplay is interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/rendering/input handling), WeChat Mini Program best practices compliance, and code organization. Deduct 5 points if global state pollution is found or improper WeChat component usage; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if not following WeChat Mini Program performance optimization guidelines. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the Tetris interface follows modern mobile game design principles: 1) Clear game board visibility with proper contrast 2) Intuitive control layout optimized for mobile touch 3) Consistent visual hierarchy for game info (score, level, next piece) 4) Professional color scheme that doesn't strain eyes during long play sessions. Deduct 3 points for each cramped UI element, 5 points for poor contrast affecting gameplay visibility, and 5 points for confusing control layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the game interaction smooth and responsive?",
      "description": "Judge whether the game controls and animations conform to mobile gaming standards: 1) Touch response delay â‰¤ 50ms for critical game actions 2) Smooth piece movement at 60fps 3) Proper tactile feedback for WeChat platform 4) Intuitive gesture controls (tap to rotate, swipe to move/drop). Deduct 5 points for each laggy control response, 3 points for choppy animations during fast gameplay, and 5 points for unintuitive control scheme. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
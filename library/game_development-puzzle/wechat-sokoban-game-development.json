{
  "index": 1399,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Help me write a code for a Sokoban (box pushing) game that can run on WeChat.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Sokoban gameplay mechanics fully implemented?",
      "description": "Review whether the code accurately implements box movement logic, player control, collision detection (wall, box, target), and win condition validation. Score 0 if core mechanics are missing, 5 if basic movement works but with bugs, and 10 if the complete ruleset is properly implemented, including detecting when boxes are pushed onto target spots.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the WeChat Mini Program integration properly implemented?",
      "description": "Evaluate if the code correctly uses WeChat Mini Program APIs and lifecycle functions (onLoad, onShow), follows WeChat development specifications, and implements page routing properly. Deduct 5 points if the code doesn't use wx.* APIs appropriately, 3 points if lifecycle methods are improperly handled. Check if the game adapts to different mobile screen sizes using rpx units or flex layouts.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the game include level design and progression mechanics?",
      "description": "Check if multiple levels are included with proper difficulty progression, level selection interface, and level completion tracking. At minimum, the game should have 5+ distinct levels and save player progress. Deduct 5 points if only one level exists, 3 points if level progression isn't saved between sessions, and 2 points if difficulty curve is poorly designed.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are WeChat-specific features utilized for enhanced gameplay?",
      "description": "Assess if the game leverages WeChat platform features such as cloud storage for saving progress, share functionality for level challenges, or user avatars integration. Give 3 points for each WeChat-specific feature properly implemented (maximum 10 points), with emphasis on features that enhance the social aspect of the game.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid moves, rapid taps, unexpected user input, or WeChat lifecycle interruptions) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Undo/redo functionality 2. Move counter and optimization hints 3. Custom character skins 4. Visual path indicators). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple movement control systems) 2. Function modules unrelated to the game (e.g., unnecessary social features) 3. Fancy effects that affect performance (e.g., excessive animations that slow down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), code maintainability, and adherence to WeChat Mini Program development best practices. Deduct 5 points if global state is mismanaged; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the project structure doesn't follow WeChat Mini Program conventions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern mobile game design principles: 1) Touchscreen-optimized controls (sufficiently large tap targets ≥ 44px) 2) Proper layout spacing (elements not cluttered or too close to screen edges) 3) Professional visual language (consistent with WeChat design language). Deduct 3 points for each hard-to-use control element, 5 points for poor visual hierarchy, and 5 points for designs that clash with WeChat's aesthetic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game's performance and interactivity are optimized for mobile: 1) Movement response delay ≤ 100ms 2) Smooth animations at minimum 30fps 3) Touch gestures that feel natural and intuitive. Deduct 5 points for each laggy animation, 3 points for unresponsive controls, and 5 points for poor touch area design that causes misoperations. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
{
  "index": 1541,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be careful to ensure that the generated code is executable for demonstration. Create a web-based single-player Tetris game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Tetris game mechanics fully implemented?",
      "description": "Review whether the code accurately implements the standard Tetris mechanics including piece rotation, movement, collision detection, line clearing, and scoring. Score 0 if the basic game loop is not implemented, 5 if only basic movement is implemented without proper collision or line clearing, and 10 if all standard Tetris mechanics are fully included with proper game physics.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all standard Tetris pieces (tetrominoes) correctly implemented?",
      "description": "Check whether all seven standard Tetris pieces (I, O, T, S, Z, J, L) are correctly implemented with their proper shapes, colors, and rotation behaviors. Each piece should follow the official rotation system (preferably SRS - Super Rotation System). Deduct 2 points if a piece is missing, 3 points if rotation system is inconsistent, and 5 points if collision detection during rotation fails. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game progression and difficulty system implemented?",
      "description": "Evaluate whether the game includes proper level progression, increasing speed as the player advances, and appropriate scoring mechanisms (points for line clears, with bonuses for multiple lines). Check for implementation of special scoring for techniques like T-spins or back-to-back Tetrises. Deduct 5 points if speed progression is missing, 3 points if the scoring system is overly simplified. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the next piece preview and piece holding functionality implemented?",
      "description": "Check whether the game includes standard modern Tetris features like displaying the next piece(s) in queue and the ability to hold a piece for later use. Evaluate the implementation of the piece swapping mechanism and whether it follows standard rules (can't swap twice in a row). Deduct 5 points if next piece preview is missing, and 5 points if hold functionality is not implemented or has incorrect rules. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid input, browser resize events, focus/blur events when switching tabs, etc.) and provide friendly error handling or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Ghost piece showing where the tetromino will land 2. Game statistics tracking and visualization 3. Special visual/audio effects for combos or Tetris clears). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple game loop implementations) 2. Function modules unrelated to Tetris (e.g., unnecessary social sharing features) 3. Fancy effects that affect performance (e.g., excessive particle animations that slow down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/input handling layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for the game board and pieces 2) Proper layout spacing with clear separation between game area and UI elements 3) Professional font system for score display and game information. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the control scheme and game responsiveness optimized?",
      "description": "Judge whether the game controls are intuitive and responsive: 1) Input response delay â‰¤ 50ms 2) Support for both keyboard and touch controls (for mobile devices) 3) Customizable controls or standard Tetris controls (arrow keys, spacebar for hard drop). Deduct 5 points for sluggish controls, 3 points for missing standard Tetris control options (like hard/soft drop), and 5 points for lack of mobile device support. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
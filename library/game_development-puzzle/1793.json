{
  "index": 1793,
  "question": "You are a code expert. Please utilize your professional knowledge to generate accurate and professional responses. Be sure to make the generated code executable for demonstration. Create a 6x6 Klotski (sliding block puzzle) game using HTML.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Klotski puzzle mechanism implemented correctly?",
      "description": "Evaluate whether the code accurately implements the 6x6 grid system with movable blocks, proper collision detection, and valid move validation. Check if blocks can only slide horizontally or vertically into empty spaces without jumping over other blocks. Score 0 if core sliding mechanism is missing, 5 if basic movement works but has bugs, and 10 if the sliding mechanism is flawless with smooth transitions.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is there a complete puzzle initialization and win-condition system?",
      "description": "Check if the code includes proper puzzle initialization with blocks of different sizes positioned correctly on the 6x6 grid, a clear objective (typically moving a specific block to a target position), and win-condition detection. Deduct 3 points if initial state is hardcoded without variety, 3 points if win conditions are unclear, and 5 points if there's no win detection implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the game include a move counter and history tracking?",
      "description": "Assess whether the implementation tracks the number of moves made, provides an undo/redo functionality, and maintains a move history that can be reviewed. Deduct 3 points if only basic move counting exists, 5 points if no undo functionality is provided, and 7 points if there's no history tracking at all. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a puzzle reset and level selection system?",
      "description": "Evaluate if the game allows players to reset the current puzzle to its initial state and provides multiple puzzle configurations or difficulty levels to choose from. Deduct 3 points if only reset functionality exists without level selection, 5 points if neither feature is implemented properly. Give 10 points if both reset and level selection are fully functional with at least 3 different puzzle configurations.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid clicking, invalid moves, browser resize, etc.) and provide friendly error handling or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Animation effects when sliding blocks 2. Hint system for next optimal move 3. Timer/leaderboard functionality 4. Puzzle solving visualization). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to reset the game) 2. Function modules unrelated to Klotski (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive animations that slow down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or proper encapsulation is missing; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Clear visual distinction between blocks of different types and the game board. Deduct 3 points for poor block differentiation, 5 points for unclear or inconsistent visual hierarchy, and 5 points for confusing or cluttered UI. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game interactions conform to human perception characteristics: 1) Immediate visual feedback on block selection and movement 2) Smooth transitions when blocks slide (150-300ms animation) 3) Clear indication of legal vs. illegal moves. Deduct 5 points if blocks move without animation, 3 points for laggy or jerky movements, and 5 points if there's no clear indication when attempting illegal moves. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
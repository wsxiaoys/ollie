{
  "index": 764,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration purposes. Please provide the program code for a Tetris game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Tetris gameplay mechanics fully implemented?",
      "description": "Review whether the code correctly implements the standard Tetris game mechanics including tetromino generation, rotation, movement (left, right, down), dropping, line clearing, and scoring. The implementation should follow the official Tetris guidelines with proper collision detection. Score 0 if core gameplay is missing, 5 if basic movement is implemented but with flaws, and 10 if all standard Tetris rules are fully implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all seven standard Tetris pieces (I, O, T, S, Z, J, L) correctly implemented?",
      "description": "Verify that all seven tetromino shapes are properly defined and rendered with appropriate colors. Each piece should have the correct rotation patterns according to the Super Rotation System (SRS) or another recognized rotation system. Deduct 2 points for each missing piece or incorrect rotation implementation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the game include level progression and increasing difficulty?",
      "description": "Evaluate whether the game implements increasing difficulty through speed progression as players clear lines or reach higher scores. The game should have a clear level system with appropriate speed increases per level. Deduct 5 points if there's no level progression, 3 points if the difficulty curve is poorly implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a preview system for upcoming pieces and score tracking?",
      "description": "Check if the game includes a next piece preview display and proper score tracking. A modern Tetris implementation should include at least a display of the next piece, scoring for different line clears (especially Tetris/4-line clears), and potentially hold piece functionality. Deduct 3 points for missing preview, 3 points for incomplete scoring system, and 2 points for missing hold function. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid user inputs, edge-case rotations near walls, timing issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Ghost piece showing where the tetromino will land 2. Hold piece functionality 3. Wall kick system 4. Combo system 5. T-spin recognition). Add 2 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to handle the same key press) 2. Function modules unrelated to Tetris (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations that slow down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/control layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if magic numbers are used throughout the code instead of named constants. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the game UI follows modern design principles: 1) Clean grid layout with clearly defined play area and information panels 2) Harmonious color scheme for blocks and background 3) Clear, readable fonts for score and level information 4) Appropriate sizing of all elements. Deduct 3 points for cluttered layout, 3 points for poor color choices that make pieces hard to distinguish, and 4 points for illegible text or poorly sized elements. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive?",
      "description": "Judge whether the game controls and animations meet performance standards: 1) Input response delay â‰¤ 100ms 2) Smooth piece movement and rotation 3) Immediate visual feedback for line clears and scoring 4) Consistent frame rate without stuttering. Deduct 3 points for input lag, 3 points for jerky animations, 2 points for missing visual feedback, and 2 points for performance issues during intensive gameplay. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "medium"
}
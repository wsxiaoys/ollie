{
  "index": 838,
  "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable and demonstrable. Using WeChat development tools, create a mini-game similar to \"Sheep a Sheep,\" implementing complete game logic and adding animation effects. Provide detailed code and gameplay simulation.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core matching logic of the 'Sheep a Sheep' game fully implemented?",
      "description": "Review whether the code accurately implements the elimination-by-matching mechanics where players need to match identical elements. Check if the implementation includes stack management, visibility detection (elements can only be selected when not blocked), and three-identical elimination rules. Score 0 if the core game logic is missing, 5 if basic matching works but edge cases aren't handled, 10 if the complete mechanics are implemented including special scenarios.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the level generation and difficulty progression system implemented?",
      "description": "Evaluate whether the code includes a procedural level generation system that creates increasingly difficult puzzles. Check if it manages element distribution to ensure levels are solvable but challenging. The system should track player progress and adjust difficulty accordingly. Score 0 if static levels only, 5 if basic procedural generation exists, 10 if it includes adaptive difficulty scaling based on player performance.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the WeChat Mini-Program specific APIs properly integrated?",
      "description": "Check whether the implementation correctly uses WeChat Mini-Program APIs (wx.createCanvas, wx.getSystemInfo, etc.) and follows the WeChat mini-game lifecycle. Verify that the game properly handles screen adaptation across different devices, uses wx.setPreferredFramesPerSecond for performance optimization, and implements proper resource loading with wx.loadSubpackage if needed. Deduct 3 points for each critical WeChat API misuse or omission.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game state management and persistence mechanism implemented?",
      "description": "Analyze whether the code implements proper game state management including save/resume functionality, level progress tracking, and score persistence using wx.setStorage or cloud capabilities. Check if the game properly handles interruptions (phone calls, app switching) and can restore the exact state. Score 0 if no state persistence exists, 5 if basic save/load exists, 10 if complete state management with error handling is implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as erroneous touch events, memory constraints, network fluctuations for leaderboards, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Special power-ups beyond the original game 2. Daily challenges or time-limited events 3. Social sharing features with customized screenshots). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to handle the same user interaction) 2. Function modules unrelated to the core gameplay (e.g., unnecessary mini-games within the game) 3. Fancy effects that affect performance (e.g., excessive particle effects causing lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/resource management layers), optimization for WeChat mini-game environment, and proper event handling patterns. Deduct 5 points if global state pollution is found or if proper encapsulation is not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if memory management is poor (causing potential leaks in long gameplay sessions). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the visual design matches the playful yet clean aesthetic of successful mini-games: 1) Harmonious color matching with consistent theme 2) Clear visual hierarchy with properly sized game elements (considering touch targets should be at least 44x44px) 3) Appropriate use of WeChat's visual language. Deduct 3 points for each inconsistent visual element, 5 points for unclear game state visualization, and 5 points for text that's too small to read on mobile. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the animations and game feedback conform to mobile game best practices: 1) Touch response within 100ms 2) Element matching/elimination animations between 200-500ms 3) Clear visual and audio feedback for successful/unsuccessful interactions. Deduct 5 points for delayed touch response, 3 points for frame rate drops below 30fps during animations, and 5 points for confusing or missing feedback during critical game moments. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "hard"
}
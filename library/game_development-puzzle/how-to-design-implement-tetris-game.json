{
  "index": 1175,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable. How would you design and implement code for a Tetris game?",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Tetris game mechanics fully implemented?",
      "description": "Review whether the code accurately implements the standard Tetris mechanics including piece rotation, movement, dropping, line clearing, and scoring. Check if the 7 standard Tetrimino shapes are correctly defined and if their rotation points follow official Tetris guidelines. Score 0 if core game logic is missing, 5 if basic movement is implemented but with flaws, and 10 if all standard Tetris mechanics are correctly implemented including wall kicks and SRS rotation system.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the game board properly implemented?",
      "description": "Evaluate the implementation of the standard 10x20 game board (or 10x22 with hidden rows), boundary detection, collision detection, and grid system. Check if the board state is properly managed and updated. Deduct 5 points if the board dimensions are incorrect, 3 points if collision detection has bugs, and 2 points if the board state management is inefficient. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the game controls and user input handling implemented correctly?",
      "description": "Check if the code handles keyboard/touch inputs properly with support for standard controls (left, right, rotate, hard drop, soft drop). Assess if the code implements DAS (Delayed Auto Shift) and ARR (Auto-Repeat Rate) for smooth piece movement. Deduct 3 points if key bindings cannot be customized, 3 points if there's significant input lag, and 5 points if critical controls are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game progression system properly implemented?",
      "description": "Review the implementation of level progression, speed increases, scoring system, and next piece preview. Check if the game follows the standard Tetris scoring system with bonuses for T-spins, combos, and perfect clears. Deduct 3 points if level progression is missing, 3 points if the scoring system is incomplete, and 5 points if there's no next piece preview or hold feature. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as unexpected inputs, game state inconsistencies, browser compatibility issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Ghost piece showing where the current piece will land 2. Hold piece functionality 3. Battle mode features 4. Dynamic difficulty adjustment). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple game loop mechanisms) 2. Function modules unrelated to Tetris (e.g., unrelated mini-games) 3. Fancy effects that affect performance (e.g., excessive animations that cause lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), code readability, proper commenting, and efficient algorithms. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 3 points if the code duplication rate is too high (over 30%); deduct 3 points if the game loop implementation is inefficient. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the game UI follows modern design principles: 1) Clear block visibility and distinction 2) Readable score/level display 3) Proper layout with next piece preview and hold piece areas 4) Consistent color scheme following Tetris standards. Deduct 3 points for poor block visibility, 3 points for cluttered UI elements, 5 points for illegible text information. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game runs at a consistent frame rate (60 FPS recommended), whether piece movements are smooth, and if animations (line clearing, game over) are visually appealing without disrupting gameplay. Deduct 5 points for frame rate drops during gameplay, 3 points for jerky piece movement, and 5 points for animations that interrupt the game flow. Check if the game timing system uses requestAnimationFrame or similar for smooth rendering. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Puzzle",
  "difficulty": "medium"
}
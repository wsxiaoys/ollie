{
  "index": 1492,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration purposes. Write a visualization tool with buttons in Python. The tool requirements are: it should help quickly bind data in work environments, allow 3D model fine-tuning, enable local interaction with SaaS composer, and automatically complete 3D configurations based on images of venues and scenes.",
  "checklist": [
    {
      "id": 0,
      "title": "Data binding implementation",
      "description": "Review whether the code implements comprehensive data binding functionality for work environments, including support for multiple data formats (CSV, JSON, SQL databases), preview capabilities, and real-time synchronization. Score 0 if data binding is absent, 5 if basic binding is implemented but lacks flexibility, and 10 if the solution provides robust two-way binding with validation and error handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "3D model fine-tuning capabilities",
      "description": "Evaluate the implementation of 3D model manipulation tools. Check whether the code provides essential manipulation functions (scaling, rotation, translation), material/texture editing, and lighting adjustment controls. Deduct 3 points if transformation controls are incomplete, 3 points if material editing is missing, and 2 points if lighting controls are absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Local SaaS composer interaction",
      "description": "Assess whether the code establishes effective local interaction with SaaS composer services, including authentication mechanisms, API integration, and state synchronization. Deduct 5 points if authentication is insecure or missing, 3 points if API calls lack error handling, and 2 points if there's no offline capability. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Automatic 3D configuration from images",
      "description": "Examine the implementation of image-to-3D conversion functionality. Verify if the code includes computer vision algorithms for scene recognition, depth estimation, and 3D reconstruction. Score 0 if the feature is missing, 5 if basic recognition exists but produces inaccurate results, and 10 if the system effectively generates realistic 3D environments with proper spatial relationships from venue images.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Code robustness",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, network failures, resource-intensive operations) and provide friendly error messages or recovery mechanisms. Code with strong robustness should effectively handle edge cases, scoring 10 points. If robustness is average, score 5 points, and if exceptions are unhandled, score 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Innovative features",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-assisted scene recognition 2. Real-time collaboration capabilities 3. VR/AR preview mode). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Code efficiency and optimization",
      "description": "Strictly check three types of inefficiencies: 1. Computational bottlenecks in 3D rendering 2. Memory leaks or excessive memory usage 3. Inefficient algorithms for image processing. Deduct 3 points for each significant inefficiency found, and directly deduct 10 points if the tool becomes unusable due to performance issues under normal operating conditions.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Engineering quality",
      "description": "Review modular design (such as separating UI/business logic/data processing/3D rendering), unit test coverage, and proper dependency management. Deduct 5 points if global state is unmanaged or design patterns are misused; deduct 3 points if code duplication rate exceeds 20%; deduct 2 points if dependencies are hardcoded without version control. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Interface design and usability",
      "description": "Evaluate whether the UI follows professional design principles: 1) Intuitive layout with logical grouping of controls 2) Clear visual hierarchy with proper spacing 3) Consistent color scheme and component styling. Deduct 3 points for cluttered interfaces, 3 points for inconsistent visual language, and 4 points if essential functions require more than 3 clicks to access. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Interactive experience and responsiveness",
      "description": "Judge whether the application provides smooth interaction: 1) Real-time feedback for user actions 2) Progress indicators for long-running processes 3) Appropriate keyboard shortcuts and mouse interactions for 3D manipulation. Deduct 3 points for each operation with delayed feedback (>200ms), 3 points for missing progress indicators, and 4 points if the UI freezes during resource-intensive operations. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-3D Simulation",
  "difficulty": "hard"
}
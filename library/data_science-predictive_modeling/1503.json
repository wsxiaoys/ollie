{
  "index": 1503,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Take care to ensure that the code you produce is executable for demonstration. You should create a program that connects to market software to provide buy and sell signals based on individually provided indicator requirements.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the market data connection implementation complete?",
      "description": "Review whether the code properly implements connection to market software with authentication, error handling, and reconnection mechanisms. Check if it handles different API protocols (REST, WebSocket, FIX) and includes rate limiting compliance. Score 0 if no connection is implemented, 5 if basic connection exists but lacks error handling, and 10 if a robust connection system with failover is provided.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the technical indicators correctly implemented?",
      "description": "Evaluate whether common technical indicators (e.g., moving averages, RSI, MACD, Bollinger Bands) are accurately calculated with proper mathematical formulas and optimized algorithms. Verify indicator parameterization for customization. Deduct 5 points for calculation errors, 3 points for inefficient implementations that would cause performance issues with large datasets. Full score requires at least 5 properly implemented indicators with customizable parameters.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the signal generation logic comprehensive?",
      "description": "Check if buy/sell signal generation follows clear rules based on indicator combinations. Verify presence of signal strength categorization, false signal filtering, and confirmation logic. Assess if the system handles conflicting signals appropriately. Deduct 5 points if signals are based on single indicators only, 3 points if there's no noise filtering. Give 10 points only if the system includes multiple timeframe analysis and signal confirmation strategies.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the program include backtesting capability?",
      "description": "Evaluate whether the code includes historical backtesting functionality with performance metrics (win rate, profit factor, maximum drawdown, Sharpe ratio). Check if it handles different market conditions and allows parameter optimization. Score 0 if no backtesting exists, 5 if basic backtesting without performance metrics is implemented, and 10 if comprehensive backtesting with optimization capabilities is provided.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as API disconnections, market data gaps, extreme volatility events, etc.) and provide appropriate error handling and recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Machine learning signal validation 2. Sentiment analysis integration 3. Risk management with position sizing algorithms). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar indicators or signals 2. Function modules unrelated to trading decision making 3. Unnecessary complex calculations that add little value to signal generation. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data fetching/signal generation/notification layers), unit test coverage, and logging mechanisms. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no appropriate error logging system. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the visualization interface meet professional standards?",
      "description": "Evaluate whether the trading interface (if applicable) follows professional design principles: 1) Clear presentation of indicators and signals 2) Proper use of colors for buy/sell signals (e.g., green/red) 3) Legible charts with appropriate time scaling. Deduct 3 points for cluttered visualizations, 5 points for misleading visual representations of data, and 5 points for charts lacking essential information (price, volume, time). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the alert and notification system effective?",
      "description": "Judge whether the signal notification system is well-designed: 1) Timely alerts within 1 second of signal generation 2) Multiple notification channels (email, SMS, push notifications) 3) Clear differentiation between signal types and urgency levels. Deduct 5 points for delayed notifications, 3 points for limited notification options, and 5 points for ambiguous alert messages that don't clearly indicate action required. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Predictive Modeling",
  "difficulty": "hard"
}
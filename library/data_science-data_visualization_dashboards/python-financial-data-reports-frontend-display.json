{
  "index": 1390,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration. Implement frontend display of financial data reports in Python.",
  "checklist": [
    {
      "id": 0,
      "title": "Does the code implement effective financial data visualization?",
      "description": "Review whether the code effectively uses visualization libraries (like Matplotlib, Plotly, Bokeh, or Dash) to display financial data through appropriate chart types (line charts for time series, bar charts for comparisons, pie charts for distributions). Score 0 if no visualizations are implemented, 5 if basic charts are created without customization, and 10 if comprehensive visualizations with proper financial indicators are created.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is there proper data handling and preprocessing for financial reports?",
      "description": "Evaluate whether the code includes proper financial data handling (using Pandas, NumPy), including cleaning missing values, handling outliers, normalizing data, and calculating financial metrics (e.g., moving averages, volatility, returns). Deduct 3 points if data validation is missing, 3 points if no financial calculations are performed, and 4 points if the preprocessing pipeline is incomplete. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there an interactive dashboard or report interface?",
      "description": "Check whether the code implements an interactive frontend (using Dash, Streamlit, Flask with JavaScript, or similar) that allows users to filter data, select time periods, drill down into details, and customize the financial report view. Deduct 5 points if no interactivity is implemented, 3 points if only basic filters exist, and 2 points if the interface lacks responsiveness. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are appropriate financial metrics and KPIs displayed?",
      "description": "Assess whether the code calculates and displays relevant financial metrics (ROI, P/E ratio, EBITDA, cash flow analysis, risk metrics like Beta or Sharpe ratio). Deduct 3 points for each missing essential financial metric category, and award full 10 points only if comprehensive metrics with explanations are provided for financial decision-making.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing data, API failures, invalid user inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered trend predictions 2. PDF export with customizable templates 3. Alert system for threshold violations). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar chart types or calculations 2. Function modules unrelated to financial reporting 3. Excessive animations or visual elements that distract from financial insights. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/visualization/interface layers), unit test coverage, and build process automation. Deduct 5 points if global variables are overused or design patterns are not applied; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated or documented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the financial dashboard follows professional design principles: 1) Financial industry color scheme (conservative palette with highlight colors for alerts) 2) Proper layout spacing with clear hierarchy of information 3) Consistent typography that prioritizes readability (especially for numbers and tables). Deduct 3 points for each cluttered data visualization, 5 points for inappropriate color schemes in financial contexts, and 5 points for poor information hierarchy. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects enhance financial data understanding: 1) Chart transitions that maintain context 2) Fast data filtering response (â‰¤ 500ms) 3) Clear visual cues for data comparisons and trends. Deduct 5 points for lagging data updates, 3 points for confusing transitions between different views, and 5 points for difficult navigation between different financial metrics or time periods. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "medium"
}
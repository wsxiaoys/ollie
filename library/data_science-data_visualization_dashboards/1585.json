{
  "index": 1585,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code in your demonstrations. According to the spreadsheet data, automatically generate a bar chart for age groups and a bar chart for education levels.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the data processing logic correctly implemented?",
      "description": "Review whether the code correctly extracts and processes age groups and education levels from the spreadsheet data. Check if data aggregation functions (count, average, groupBy) are implemented properly. Score 0 if data extraction is missing, 5 if basic extraction exists but with errors, and 10 if data processing is complete and handles edge cases (empty cells, invalid data types, etc.).",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the bar charts properly implemented with appropriate visualization libraries?",
      "description": "Evaluate whether suitable visualization libraries (D3.js, Chart.js, Highcharts, etc.) are used correctly. Check if the API calls follow best practices and if the library features are utilized effectively. Deduct 5 points if the library implementation is overly complex or verbose, and 3 points if advanced features like responsiveness are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are both charts (age groups and education levels) properly configured?",
      "description": "Check if both charts are properly configured with appropriate scales, labels, titles, and legends. Verify that categorical data for age groups and education levels is handled correctly. Deduct 5 points if one chart is missing or severely incomplete, and 3 points for each chart with missing essential elements (axis labels, titles). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the data-to-visualization binding automatic and responsive?",
      "description": "Assess whether the charts automatically update when data changes and if there's a clear connection between the spreadsheet data and visualization. Check for proper event listeners or reactive frameworks. Deduct 5 points if manual intervention is needed for updates, and 3 points if the binding exists but has performance issues with larger datasets. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing data, incorrect data types, empty spreadsheets, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive tooltips with detailed information 2. Animation transitions when data updates 3. Additional statistical analysis visualizations). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visualization functions 2. Function modules unrelated to chart generation 3. Fancy effects that affect performance (e.g., excessive animations or 3D effects that don't add value). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/visualization/UI layers), code reusability for both charts, and proper error handling. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation between data and presentation layers. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the chart design follows modern data visualization principles: 1) Appropriate color scheme with sufficient contrast 2) Proper spacing between chart elements 3) Professional typography with readable labels and legends. Deduct 3 points for each cluttered visual element, 5 points for poor color choices that hinder data interpretation, and 5 points for illegible text or improper label positioning. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the chart interaction smooth and intuitive?",
      "description": "Judge whether the charts provide useful interactivity: 1) Hover tooltips with relevant data 2) Possible filtering or sorting options 3) Clear visual feedback for user interactions. Deduct 5 points for non-interactive charts, 3 points for laggy interactions, and 5 points for confusing or unintuitive interaction patterns. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
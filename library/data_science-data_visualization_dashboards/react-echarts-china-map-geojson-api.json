{
  "index": 1658,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration purposes. Use React, TypeScript, and ECharts to implement a China map with provincial and city granularity, obtaining the GeoJSON through an API.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the GeoJSON data fetching and error handling implemented correctly?",
      "description": "Verify that the code properly fetches the GeoJSON data from an API using standard fetch/axios methods with proper error handling. Check if there's a loading state, error state management, and retry mechanism. The implementation should include proper TypeScript interfaces for the GeoJSON structure. Deduct 5 points if error handling is missing, 3 points if no loading state is shown, 2 points if TypeScript types are incorrect or missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the ECharts map visualization properly configured and rendered?",
      "description": "Examine whether the ECharts instance is correctly initialized with the GeoJSON data and if proper event listeners are set up for component unmounting. Check if the map rendering includes essential features like zoom controls, tooltips, and proper area highlighting. Verify if the map visualization adjusts to container size changes. Score 0 if the map doesn't render, 5 if basic rendering works but lacks responsiveness, and 10 if fully implemented with all essential features.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the provincial and city granularity switching mechanism implemented?",
      "description": "Evaluate whether the code provides a clear mechanism to switch between provincial and city-level views with appropriate drill-down functionality. Check if the transition between different granularity levels is smooth and if the code handles the relationships between provinces and their cities correctly. Deduct 5 points if only one granularity level is implemented, 3 points if switching exists but with bugs, and 2 points if the city data is incomplete. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there appropriate data visualization (e.g., choropleth coloring, markers) on the map?",
      "description": "Check if the map includes data visualization elements like choropleth coloring based on data values, markers for points of interest, or other visual indicators. Verify that the visualization includes a legend, proper color scales, and options to toggle different data layers. Deduct 5 points if there's no data visualization beyond the base map, 3 points if the visualization lacks legends, and 2 points if the color scheme is problematic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as API failures, malformed GeoJSON data, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Custom map themes 2. Advanced filtering capabilities 3. Interactive data comparison between regions). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple map rendering approaches coexisting) 2. Function modules unrelated to map visualization (e.g., unnecessary animations) 3. Fancy effects that affect performance (e.g., excessive rerendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review React component structure, proper use of TypeScript, code splitting, custom hooks, and performance optimizations (like memoization). Deduct 5 points if there are prop drilling issues instead of using context or proper state management; deduct 5 points if TypeScript is used poorly with many 'any' types; deduct 5 points if the component architecture doesn't follow single-responsibility principle. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for the map (distinguishable regions without being garish) 2) Proper layout spacing for controls and legends 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic control placement. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the map interactions conform to human perception characteristics: 1) Hover/click feedback delay ≤ 100ms 2) Zoom/pan animation smoothness 3) Clear visual indication of selected areas. Deduct 5 points for each operation without feedback, 3 points for laggy zoom/pan operations, and 5 points for unclear selection states. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
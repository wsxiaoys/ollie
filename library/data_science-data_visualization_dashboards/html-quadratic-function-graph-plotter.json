{
  "index": 1496,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration. I'm a programming beginner, and I want to create an application that plots a quadratic function graph based on coefficients a, b, and c using a programming language. Please recommend detailed step-by-step instructions for implementing this with HTML.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the quadratic function plotting functionality fully implemented?",
      "description": "Review whether the code accurately implements the plotting of a quadratic function (y = ax² + bx + c) with correct mathematical calculations. Check if the graph correctly responds to different coefficient values (a, b, c) and handles edge cases (e.g., a=0). Score 0 if plotting is not implemented, 5 if only basic plotting is done, and 10 if the implementation includes proper scaling and axis display.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the user interface for coefficient input well-designed?",
      "description": "Evaluate the user interface for inputting coefficients a, b, and c. Check if the input fields are clearly labeled, have appropriate validation, and provide immediate feedback. Score 0 if there's no input interface, 5 if basic inputs are present but lack validation or clear labeling, and 10 if the interface is intuitive with proper validation and real-time feedback.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the graph visualization properly implemented with axis scaling?",
      "description": "Check if the visualization includes proper axis scaling, grid lines, and labels. The graph should adapt to different coefficient values by appropriately adjusting the viewport. Deduct 5 points if the scaling is fixed and doesn't adapt to function behavior, 3 points if axes aren't labeled, and 2 points if grid lines are missing or inconsistent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation include interactive features for better understanding?",
      "description": "Assess whether the solution includes interactive features like zooming, panning, displaying coordinates on hover, or animating the effect of changing coefficients. Deduct 5 points if no interactive features are implemented, and give full 10 points only if multiple meaningful interactive elements enhance the learning experience.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as non-numeric inputs, extreme coefficient values, browser resizing, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Displaying the function formula with proper mathematical notation 2. Showing important points like vertex, x-intercepts, or y-intercept 3. Allowing comparison of multiple functions). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar graphing functions 2. Function modules unrelated to the quadratic function visualization 3. Fancy effects that affect performance without adding educational value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating calculation logic/view rendering/user interaction), code organization, and maintainability. Deduct 5 points if global state pollution is found or if there's no separation of concerns; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments explaining complex calculations. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Graph updates within 100ms after coefficient changes 2) Smooth transitions when the graph changes 3) Clear visual focus on important elements of the function. Deduct 5 points for each operation without feedback, 3 points for jerky graph updates, and 5 points for confusing interface interactions. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
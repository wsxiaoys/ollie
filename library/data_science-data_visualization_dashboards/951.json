{
  "index": 951,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable when possible. Help me create an HTML tool with an input box for tables on the interface. Users can paste table content into this input box, and there's a button to generate a chart. The button will create a trend chart based on the table data organized by date. Please provide sample data for demonstration.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the HTML table input functionality properly implemented?",
      "description": "Verify if the code provides a clear, user-friendly input box for pasting tabular data. Check if it handles various table formats (tab-separated, CSV, space-aligned) and provides clear instructions to users on expected input format. Score 0 if no input mechanism exists, 5 if basic input is implemented but lacks format flexibility, 10 if the implementation handles multiple formats with clear user guidance.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the table data parsing mechanism robust?",
      "description": "Evaluate the code's ability to parse and validate table data, especially date recognition. Check if it correctly identifies headers, data types (dates, numbers), and handles malformed data with appropriate error messages. Deduct 5 points if date parsing is inconsistent, 3 points if it can't detect column types automatically, and 2 points if it fails with irregular spacing/formatting. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the trend chart generation complete and accurate?",
      "description": "Assess if the code properly generates a visualization based on the date-organized data. Check if it correctly identifies time series data, plots appropriate trend lines, and includes necessary chart elements (axes, legends, titles). Deduct 5 points if date sequencing is incorrect, 3 points if numerical data scaling is inappropriate, and 2 points if the chart type doesn't match the data characteristics. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there sample data included for demonstration?",
      "description": "Verify if the solution includes realistic, diverse sample data that demonstrates the tool's capabilities. The sample should include multiple data points over various dates, potentially with some edge cases. Give 3 points for basic sample data, 7 points for comprehensive examples that showcase different chart scenarios, and 10 points for example data with multiple variables and date ranges that thoroughly test the system.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as malformed input data, non-date columns, missing values, extremely large datasets) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Multiple chart type options 2. Interactive tooltips/zooming 3. Data filtering capabilities 4. Export functionality). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple parsing methods that do the same thing) 2. Function modules unrelated to chart generation (e.g., unnecessary animations) 3. Fancy effects that affect performance (e.g., heavy rendering processes). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data parsing/visualization/UI components), error handling patterns, and code organization. Deduct 5 points if global variables are excessively used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation between data processing and visualization logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive?",
      "description": "Judge whether the chart rendering and user interactions are performant: 1) Chart generation completes within 500ms for standard datasets 2) Interaction features (if any) respond within 100ms 3) Visual feedback is provided during processing of large datasets. Deduct 5 points for noticeable lag when generating charts, 3 points for missing loading indicators during processing, and 5 points for browser freezing with larger inputs. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
{
  "index": 1123,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Please create a runnable HTML file for a team capability matrix chart and render it.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the team capability matrix data structure properly designed and implemented?",
      "description": "Review whether the code accurately implements a comprehensive data model for team members and their capabilities through JavaScript objects/arrays. Check if it includes proper data validation, supports multiple skill levels (e.g., beginner/intermediate/expert), and handles dynamic data updates. Score 0 if no structured data model exists, 5 if only basic member-skill mapping is implemented, and 10 if a complete hierarchical capability framework with validation is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the matrix visualization rendering fully functional?",
      "description": "Evaluate whether the HTML/CSS/JavaScript implementation creates a proper matrix layout with clear row/column headers, capability indicators (colors/icons/numbers), and responsive grid structure. Check if it supports different visualization modes (heatmap, bubble chart, or traditional grid). Deduct 5 points if the matrix layout is not properly aligned, and 3 points if capability levels are not visually distinguishable. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are interactive features and filtering mechanisms implemented?",
      "description": "Check whether the code includes interactive capabilities such as sorting by team member or skill, filtering by capability level, search functionality, and hover effects showing detailed information. Evaluate if click interactions provide drill-down details or editing capabilities. Deduct 5 points if no interactive features exist, and 3 points if interactions lack visual feedback. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the chart scalable and handles large datasets efficiently?",
      "description": "Assess whether the implementation can handle teams with 20+ members and 15+ skills without performance degradation. Check if virtual scrolling, pagination, or data chunking is implemented for large datasets. Evaluate if the rendering performance remains smooth during interactions. Deduct 5 points if the chart becomes unresponsive with large data, and 3 points if loading states are not handled properly. Give 10 points if fully optimized for scalability.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing data fields, invalid capability values, empty team lists, malformed input data, etc.) and provide friendly error prompts or fallback mechanisms. Code with strong robustness should gracefully handle edge cases and provide meaningful error messages, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the user experience (e.g., 1. Export to PDF/Excel functionality 2. Skill gap analysis with recommendations 3. Team composition optimizer 4. Historical capability tracking 5. Integration with external HR systems). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple chart rendering methods coexisting) 2. Function modules unrelated to capability matrix (e.g., built-in chat system) 3. Excessive animations that affect readability (e.g., constantly moving elements). Deduct 3 points for each redundancy found, and directly deduct 10 points if core matrix functionality is interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data layer/visualization layer/interaction layer), code organization, and maintainability. Deduct 5 points if global variables pollute the namespace or no clear separation of concerns; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks proper documentation or comments. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color scheme for capability levels (using consistent color theory) 2) Proper spacing and alignment (grid elements follow consistent padding/margin rules) 3) Professional typography (readable font sizes â‰¥ 12px, appropriate contrast ratios). Deduct 3 points for each visually cluttered element, 5 points for poor color accessibility, and 5 points for inconsistent visual hierarchy. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Hover effects respond within 100ms 2) Sorting/filtering animations are smooth and under 400ms 3) Clear visual feedback for all interactive elements 4) Intuitive navigation and selection states. Deduct 5 points for each interaction without proper feedback, 3 points for laggy animations during data updates, and 5 points for confusing or hidden interactive elements. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "medium"
}
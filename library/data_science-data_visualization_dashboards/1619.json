{
  "index": 1619,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration purposes. Create a personnel data dashboard that includes visualization design and data display, output in HTML format.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the dashboard framework properly implemented?",
      "description": "Review whether the code implements a responsive layout structure with proper HTML5 semantic markup (header, main, sections, footer) and CSS grid/flexbox for organizing dashboard components. Score 0 if there's no structured layout, 5 points for basic layout implementation, and 10 points for a fully responsive dashboard framework with proper breakpoints for different screen sizes.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are essential personnel data visualizations included?",
      "description": "Evaluate if the dashboard includes at least 3 different visualization types (e.g., bar charts, pie charts, line graphs) that appropriately represent personnel data such as demographics, performance metrics, attendance, etc. Each visualization should have proper titles, legends, and tooltips. Deduct 3 points for each missing essential visualization, and 2 points for visualizations without proper labeling and interactivity. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the dashboard include filtering and sorting capabilities?",
      "description": "Check whether the dashboard implements interactive data filtering (by department, date range, performance metrics, etc.) and sorting capabilities to help users analyze personnel data. Score 0 if no filtering/sorting exists, 5 points for basic filtering, and 10 points for comprehensive filtering with multiple parameters and instant visual feedback when filters are applied.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there proper data handling and state management?",
      "description": "Assess how the code manages data loading, error handling, and state management. Look for proper data fetch mechanisms, loading indicators, error messages, and efficient data transformation for visualization. Deduct 5 points if there's no error handling, 3 points if loading states aren't managed, and 5 points if data transformation is inefficient or missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty data sets, data loading failures, user input errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time data updates 2. Export functionality for reports 3. Custom dashboard layouts/themes 4. Predictive analytics visualization). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple chart libraries used for the same purpose) 2. Function modules unrelated to personnel data (e.g., irrelevant news feeds) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the page). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/visualization/UI components), code organization, and performance optimization. Deduct 5 points if global variable pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern dashboard design principles: 1) Harmonious color matching suitable for data visualization (no more than 3 primary colors) 2) Proper layout spacing with clear visual hierarchy 3) Professional typography system (body font size â‰¥ 14px, proper contrast for readability). Deduct 3 points for each cluttered visualization, 5 points for color schemes that hinder data interpretation, and 5 points for poor information hierarchy. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dashboard interactions conform to user expectations: 1) Chart interactions respond within 100ms 2) Smooth transitions between different data views 3) Consistent interaction patterns across all visualizations. Deduct 5 points for each interaction without visual feedback, 3 points for laggy transitions, and 5 points if critical dashboard controls are difficult to discover or use. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
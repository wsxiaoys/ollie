{
  "index": 697,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Based on three years of grades, generate HTML code to display bar charts showing grade distribution across score ranges and line graphs illustrating grade changes over the years.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the data visualization for bar charts properly implemented?",
      "description": "Evaluate whether the HTML/CSS/JavaScript code correctly implements bar charts showing grade distribution across score ranges. Check for proper axis labeling, consistent scaling, appropriate color usage, and clear visual representation of data. Score 0 if bar charts are missing, 5 if implemented with basic functionality but lacking proper styling or labels, and 10 if fully implemented with professional appearance.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the line graph functionality for grade changes over years implemented correctly?",
      "description": "Assess the implementation of line graphs showing grade changes over the three years. Verify that the data points are accurately plotted, lines are properly connected, and trend visualization is clear. Check for proper axis scaling, year labeling, and data point markers. Deduct 5 points if the line graph lacks smoothing or animation, and 3 points if hover states for data points are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the data handling and processing logic complete?",
      "description": "Review the code's ability to process and transform the three years of grade data into appropriate formats for visualization. Check for proper aggregation functions for calculating distributions, statistical summaries (mean, median, etc.), and data normalization. Deduct 5 points if the code doesn't handle different data scales appropriately, and 3 points if it lacks validation for input data. Full score is 10 points if data processing is comprehensive and efficient.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the visualization responsive and interactive?",
      "description": "Evaluate whether the visualization provides interactive elements such as tooltips, highlighting on hover, zoom functionality, or filtering options. Check if the charts resize properly on different screen sizes. Deduct 5 points if basic interactivity is missing (like tooltips), and 3 points if the visualization breaks on mobile screens. Award 10 points for fully responsive design with rich interactive features.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common edge cases (such as missing data points, extreme values, zero values, etc.) and provide graceful error handling with user-friendly messages. Code with strong robustness should be able to effectively handle these abnormal situations, giving 10 points. If the robustness is average, give 5 points, and if no error handling is implemented, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Animated transitions between data views 2. Dynamic color coding based on performance thresholds 3. Comparative analysis tools). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visualization functions (e.g., multiple chart libraries used for the same purpose) 2. Function modules unrelated to grade visualization (e.g., irrelevant widgets) 3. Heavy visual effects that affect performance (e.g., unnecessary 3D effects or animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core visualization functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/visualization/interaction layers), reusability of components, and performance optimization. Deduct 5 points if global namespace pollution is found; deduct 5 points if the code has high duplication rate (over 30%); deduct 5 points if no performance optimization is implemented for large datasets. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional data visualization standards?",
      "description": "Evaluate whether the visualization follows data visualization best practices: 1) Appropriate color palette that distinguishes data series clearly 2) Proper chart proportions (aspect ratio between 4:3 and 16:9) 3) Consistent typography system (legends, axes, and labels follow hierarchical font sizing). Deduct 3 points for cluttered visualizations, 5 points for misleading visual representations (e.g., truncated axes), and 5 points for poor information hierarchy. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and informative?",
      "description": "Judge whether the interactive elements enhance data understanding: 1) Smooth transitions between data views (â‰¤ 500ms) 2) Informative tooltips that show exact values 3) Clear visual feedback on user interactions. Deduct 5 points for jerky animations, 3 points for delayed response on interaction (> 200ms), and 5 points for confusing or missing interaction cues. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
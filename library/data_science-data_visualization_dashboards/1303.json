{
  "index": 1303,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable when possible. Help me write a Python program to create a graphical representation of the logistics flow map for the top 20 countries in a panoramic view.",
  "checklist": [
    {
      "id": 0,
      "title": "Data acquisition and preprocessing implementation",
      "description": "Evaluate whether the code includes proper data acquisition methods (API calls, CSV imports, or database connections) and thorough data preprocessing. Check for data cleaning, normalization, and handling of missing values. Assess whether the top 20 countries are properly identified based on appropriate metrics (trade volume, GDP, etc.). Score 0 if data acquisition is missing, 5 if basic data handling is present but incomplete, and 10 if comprehensive data pipeline with validation is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Logistics flow visualization accuracy",
      "description": "Check whether the visualization accurately represents logistics flows between countries using appropriate visual elements (arrows, line thickness for volume, color coding for direction/type). Verify if the flow magnitude is properly scaled and if the directionality is clear. Deduct 5 points if flows lack directional indicators, 3 points if scaling is inconsistent, and 3 points if the visualization misrepresents actual data patterns. Full score requires both accuracy and clarity in flow representation.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Panoramic view implementation",
      "description": "Assess whether the code creates a true panoramic view showing all connections simultaneously. Verify the use of appropriate map projections (e.g., Mercator, Robinson, or Mollweide) that minimize distortion for global visualization. Check if the view allows for comprehensive understanding of global logistics patterns. Score 0 if the view is fragmented, 5 if basic global visualization is present but with significant distortion, and 10 if a well-implemented panoramic projection is used.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Interactive elements and functionality",
      "description": "Evaluate the implementation of interactive elements such as zooming, panning, filtering by trade type/volume, and country selection. Check whether tooltips display relevant data on hover and if the interactivity enhances data exploration. Deduct 5 points if basic interactions are missing, 3 points if interactions are implemented but buggy, and 2 points if tooltips lack detailed information. The full score requires smooth, intuitive interactions.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing data, API failures, invalid inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Time-series animation of flow changes 2. Comparative analysis tools 3. Prediction modeling of future flows). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visualization functions 2. Function modules unrelated to logistics flow mapping 3. Fancy effects that affect performance and readability (e.g., unnecessary 3D effects or animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/visualization/interaction layers), function documentation, and code maintainability. Deduct 5 points if global variable pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the visualization meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern data visualization principles: 1) Appropriate color scheme (colorblind-friendly, meaningful color mapping) 2) Clean layout with proper legends and labels 3) Balanced visual hierarchy that guides attention to important patterns. Deduct 3 points for cluttered visuals, 5 points for misleading color schemes, and 5 points for poor use of visual space. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the visualization performance optimized?",
      "description": "Judge whether the visualization handles large datasets efficiently: 1) Rendering optimization for many data points 2) Appropriate use of aggregation or binning for dense data 3) Memory management for large datasets. Deduct 5 points for noticeable lag with full dataset, 3 points for inefficient data structures, and 5 points if the visualization crashes with the complete dataset. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "medium"
}
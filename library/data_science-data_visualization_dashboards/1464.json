{
  "index": 1464,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Implement temperature data visualization using Vue 3 and Leaflet.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Vue 3 + Leaflet integration properly implemented?",
      "description": "Evaluate whether the Vue 3 component structure correctly integrates with the Leaflet library. Check for proper lifecycle hooks management (onMounted, onBeforeUnmount), Leaflet map initialization, and proper cleanup. Score 0 if the integration is broken, 5 if basic integration exists but with issues, and 10 if the integration is seamless with proper Vue 3 Composition API usage.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the temperature data visualization effectively implemented?",
      "description": "Examine how temperature data is visualized on the map. Check for appropriate visualization techniques (heatmap, colored markers, chloropleth, etc.) that accurately represent temperature variations. Assess if color scales are intuitive and if legends are provided. Score 0 if visualization is missing, 5 if basic visualization exists but lacks clarity, and 10 if visualization is comprehensive with proper color mapping and clear visual cues.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the data fetching and processing mechanism well-designed?",
      "description": "Review the implementation of data retrieval (API calls, static data imports) and processing logic. Check for error handling during data fetching, data transformation for visualization compatibility, and caching strategies. Deduct 5 points if error states aren't handled, 3 points if there's no loading state, and 3 points if data processing is inefficient. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are interactive map features properly implemented?",
      "description": "Assess the implementation of map interactions such as zooming, panning, tooltips on hover, and click events on temperature data points. Check if interaction with temperature layers is intuitive and responsive. Deduct 5 points if essential map interactions are broken, 3 points if temperature data isn't interactive, and 2 points if interactions lack smooth transitions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty data, API failures, incorrect data formats, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Time-based animation of temperature changes 2. Multiple visualization modes (heatmap/isolines/colored markers) 3. Comparison tools for different time periods). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant map library imports or duplicate visualization layers 2. Unnecessary UI components that don't contribute to temperature visualization 3. Heavy animations or effects that slow down map rendering. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core visualization functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating map configuration/data handling/UI components), reusability of components, and proper Vue 3 best practices. Deduct 5 points if global state management is messy or Composition API is misused; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation of concerns between visualization logic and UI. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for both UI and temperature visualization (color scales should be scientifically appropriate) 2) Proper layout spacing for controls and legends 3) Professional font system for temperature indicators and map labels. Deduct 3 points for each crowded visual element, 5 points for confusing temperature color scales, and 5 points for poorly positioned legends or controls. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Map loading and rendering performance (should complete within 2 seconds) 2) Smooth transitions when changing temperature visualization settings 3) Responsive tooltip displays when interacting with temperature data. Deduct 5 points for laggy map performance, 3 points for jarring transitions between data views, and 5 points for delayed response when interacting with temperature points. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
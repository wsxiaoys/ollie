{
  "index": 1615,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration as much as possible. Alright, now I need to build an annual air quality analysis page, please provide the code for HTML, CSS, and JavaScript files.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the air quality data visualization fully implemented?",
      "description": "Review whether the code implements appropriate visualization methods (charts, maps, etc.) to display annual air quality data. Check if key metrics like AQI, PM2.5, PM10, O3, NO2, SO2 are included. Score 0 if visualizations are missing, 5 if only basic charts are implemented, and 10 if multiple interactive visualization types are provided with clear data representation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is temporal analysis functionality implemented?",
      "description": "Evaluate whether the code includes features for analyzing air quality trends over time (monthly patterns, seasonal variations, year-over-year comparisons). Check if time-series charts have proper date formatting, zoom/pan capabilities, and period selection options. Deduct 5 points if only static time views are available, and 3 points if comparative analysis is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are filtering and data manipulation features properly implemented?",
      "description": "Check whether users can filter the air quality data by different parameters (location, pollutant type, time period, threshold values). Validate if the filtering is responsive and properly updates the visualizations. Deduct 5 points if filtering options are limited, and 3 points if there's no visual feedback during filtering. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the data loading and processing mechanism designed appropriately?",
      "description": "Assess how the code handles data loading, parsing, and processing. Check for proper error handling during data fetching, loading indicators, and data caching strategies. Validate if the code can handle large datasets efficiently through techniques like data aggregation or lazy loading. Deduct 5 points if loading states aren't handled, and 3 points if data processing is inefficient. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing data points, API failures, invalid user inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Predictive air quality forecasting 2. Correlation analysis with weather data 3. Interactive health impact indicators based on AQI). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visualizations (e.g., multiple line charts showing the same data) 2. Function modules unrelated to air quality analysis (e.g., unrelated weather widgets) 3. Fancy effects that affect performance (e.g., excessive animations or 3D effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/visualization/UI layers), code organization, and optimization techniques. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if performance optimization techniques (like debouncing for filters) are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for different air quality levels (using standardized AQI color schemes) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for misleading color representations of air quality data, and 5 points for chaotic dashboard layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Chart transitions respond within 300ms 2) Tooltips and data popups appear within 100ms of hover 3) Clear visual feedback for selection states. Deduct 5 points for laggy chart updates, 3 points for jumpy transitions between data views, and 5 points for confusing interaction patterns when exploring the data. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "medium"
}
{
  "index": 1409,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure to ensure the generated code is executable for demonstration. Write a complete data visualization page using the MVC pattern in Javaweb and echarts that can interact with a mini-program.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the MVC architecture properly implemented in the JavaWeb application?",
      "description": "Evaluate whether the code clearly separates Model (data handling), View (presentation), and Controller (business logic) components. Check for proper package structure, clear responsibilities between layers, and absence of logic leakage across layers. Score 0 if MVC is not implemented, 5 if basic separation exists but with some mixed responsibilities, and 10 if the architecture follows industry best practices with clean separation of concerns.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the ECharts implementation complete and correctly configured?",
      "description": "Review whether ECharts is properly initialized, options are correctly configured, and data binding is implemented. Check for proper chart type selection based on data characteristics, responsive design implementation, and theme configuration. Deduct 3 points if chart options are incomplete, 5 points if charts don't adapt to container size changes, and 5 points if data binding mechanisms are missing or incorrect. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the mini-program interaction interface properly designed and implemented?",
      "description": "Evaluate whether the code implements a clear API for mini-program communication (RESTful API, WebSocket, etc.), includes authentication mechanisms, proper data serialization/deserialization, and error handling. Deduct 5 points if no authentication is implemented, 3 points if error responses aren't standardized, and 5 points if the API doesn't follow best practices for mini-program interaction. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the data flow between components efficient and properly implemented?",
      "description": "Check whether data transfer between backend, frontend visualization, and mini-program is optimized. Look for proper data transformation layers, caching mechanisms, and asynchronous loading patterns. Deduct 5 points if large datasets aren't paginated or chunked, 3 points if data isn't appropriately transformed for visualization, and 5 points if there's no real-time data refresh mechanism. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid input data, network errors, chart rendering failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive drill-down visualizations 2. Real-time collaborative viewing 3. AI-powered data insights 4. Custom theme switching). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visualization components 2. Function modules unrelated to data visualization 3. Fancy effects that affect performance (e.g., excessive animations or 3D effects that slow down rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating frontend/backend concerns, visualization logic/data processing), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern visualization design principles: 1) Harmonious color matching for charts and UI (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Clear visual hierarchy for data visualization. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for poor data-ink ratio. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the visualization interactions conform to human perception characteristics: 1) Chart hover/click feedback delay ≤ 100ms 2) Transition animations controlled between 300-500ms 3) Clear visual focus guidance 4) Intuitive controls for data exploration. Deduct 5 points for each operation without feedback, 3 points for laggy chart transitions during interactions, and 5 points for confusing or hidden interaction controls. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
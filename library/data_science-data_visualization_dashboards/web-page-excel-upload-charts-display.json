{
  "index": 1766,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable. Create a web page using HTML+CSS+Java that can upload Excel files and display charts on the web page.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Excel file upload function fully implemented?",
      "description": "Review whether the code accurately implements file upload through HTML input and JavaScript, including file type validation (only Excel formats like .xlsx, .xls), file size restrictions, and proper error handling for invalid files. Check if drag-and-drop upload is supported. Score 0 if basic upload is not working, 5 if only basic upload without validation is implemented, and 10 if comprehensive upload with all validations and user feedback is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the Excel data parsing and processing correctly implemented?",
      "description": "Evaluate whether the code properly parses Excel files using appropriate libraries (such as SheetJS/xlsx.js), handles different data types (numbers, strings, dates), manages empty cells, and converts data into usable JavaScript objects/arrays. Check if multiple sheets are supported. Deduct 5 points if date formatting is incorrect, 3 points if special characters cause parsing errors. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are comprehensive and interactive charts implemented?",
      "description": "Check whether the code generates meaningful charts from Excel data using proper charting libraries (Chart.js, D3.js, etc.), supports multiple chart types (bar, line, pie, scatter), includes interactive features (hover tooltips, zoom, legend toggles), and handles dynamic data updates. Deduct 5 points if charts are static without interaction, 3 points if chart types are limited to basic ones only. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the data visualization workflow and user experience well-designed?",
      "description": "Evaluate whether the application provides a smooth user journey from file upload to chart display, includes data preview before visualization, allows users to select which columns/rows to chart, provides chart customization options (colors, titles, axis labels), and handles large datasets efficiently. Deduct 5 points if no data preview is provided, 3 points if chart customization is limited. Give 10 points if fully implemented with excellent UX flow.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted Excel files, network interruption, oversized files, malformed data, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time chart animation during data loading 2. Export charts as images/PDF 3. Multiple file comparison views 4. Data filtering and search capabilities 5. Chart template gallery). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file parsing libraries loaded simultaneously) 2. Function modules unrelated to Excel processing and charting (e.g., built-in games or social features) 3. Excessive animations that slow down data processing. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (separating file handling/data processing/visualization layers), proper error handling patterns, and clean code structure. Deduct 5 points if global variables pollute the namespace or no proper design patterns are used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no proper dependency management or code organization is implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface design meet professional standards?",
      "description": "Evaluate whether the overall design follows modern web design principles: 1) Harmonious color scheme (no more than 3 primary colors) 2) Proper spacing and layout (consistent margins and padding) 3) Professional typography (readable font sizes â‰¥ 14px, proper line height) 4) Clear visual hierarchy for upload area, data preview, and charts. Deduct 3 points for each cluttered visual element, 5 points for poor color combinations, and 5 points for inconsistent layout patterns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Are the interactions smooth and provide clear feedback?",
      "description": "Judge whether the user interactions are intuitive and responsive: 1) File upload progress indicators 2) Loading states during Excel parsing 3) Smooth chart rendering transitions 4) Clear success/error messages 5) Responsive design for different screen sizes. Deduct 5 points for each operation without proper feedback, 3 points for slow response times (>2 seconds for file processing), and 5 points for unclear navigation or confusing interface states. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
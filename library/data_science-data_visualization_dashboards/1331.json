{
  "index": 1331,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes. I now want to create code that visualizes the complexity of sentence structures between experts and AI, please generate this for me.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the sentence structure complexity visualization fully implemented?",
      "description": "Review whether the code accurately implements a visualization system for sentence complexity through HTML/JavaScript, including metrics like sentence length, nesting levels, and syntactic structure. Score 0 if there's no visualization, 5 if only basic metrics are visualized, and 10 if the system comprehensively analyzes and displays multiple complexity factors with comparative capabilities.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the implementation distinguish between expert and AI-generated text?",
      "description": "Check whether the visualization clearly differentiates between expert and AI text patterns. The system should identify and highlight characteristic differences in sentence structure, complexity patterns, and linguistic features. Deduct 5 points if there's no comparative analysis, and 3 points if the differentiation lacks clear visual indicators. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the natural language processing component properly designed?",
      "description": "Evaluate whether the code includes proper NLP processing for text analysis, such as tokenization, parsing, and syntactic tree generation. The implementation should handle various linguistic phenomena correctly. Deduct 5 points if only superficial text metrics are used without proper parsing, and 3 points if the parsing capabilities are limited to simple structures. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are interactive exploration features provided in the visualization?",
      "description": "Assess whether the visualization offers interactive elements for users to explore different aspects of sentence complexity (e.g., filtering by complexity level, comparing multiple texts, zooming into specific structures). Deduct 3 points for each missing core interactive capability. The visualization should respond to user interactions with appropriate feedback. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle various edge cases such as extremely long sentences, malformed input, mixed languages, or unusual syntactic structures. Code with strong robustness should handle these cases gracefully with appropriate error messages or fallback visualizations, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time analysis as text is typed 2. Exportable visualization reports with annotations 3. Historical comparison of analyzed texts). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar text analysis functions 2. Function modules unrelated to sentence complexity visualization 3. Fancy effects that affect performance without adding analytical value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core visualization functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating text processing/visualization/data layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional data visualization standards?",
      "description": "Evaluate whether the visualization follows modern data visualization principles: 1) Appropriate color encoding (consistent meaning, colorblind-friendly) 2) Proper use of visual hierarchy and white space 3) Clear labeling and legends. Deduct 3 points for each confusing visual element, 5 points for misleading visual encoding, and 5 points for visualizations that obscure rather than clarify the underlying data. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive?",
      "description": "Judge whether the interactive elements respond efficiently to user actions: 1) Analysis feedback delay â‰¤ 500ms for typical texts 2) Smooth transitions when switching between visualization modes 3) Responsive design that works across device sizes. Deduct 5 points for each operation without feedback, 3 points for noticeable lag when processing longer texts, and 5 points for visualizations that break on common screen sizes. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
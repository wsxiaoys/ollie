{
  "index": 1508,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable and presentable. How do I write a program for stock trading volume bar charts?",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core functionality of the stock trading volume bar chart fully implemented?",
      "description": "Review whether the code accurately implements the visualization of trading volume data through bars, including proper scaling, axis representation, and data binding. Score 0 if the core visualization logic is not implemented, 5 if only basic bars are shown without proper scaling, and 10 if the implementation includes proper data normalization, axis labeling, and responsive sizing.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the data processing mechanism robust and efficient?",
      "description": "Evaluate how the code processes stock data, including parsing, filtering, and aggregation for visualization. Check for date/time handling, handling of missing values, and proper data normalization. Deduct 5 points if there's no data validation, 3 points if performance optimizations for large datasets are missing, and 3 points if time-based aggregation options (daily/weekly/monthly) are absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are interactive features included for data exploration?",
      "description": "Assess whether the chart includes essential interactive features like tooltips showing detailed volume information, zoom/pan capabilities for exploring different time periods, and clickable elements for drill-down analysis. Deduct 5 points if tooltips are missing, 3 points for lack of zoom/pan functionality, and 3 points if there's no way to interact with individual bars. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there integration with complementary stock metrics/visualizations?",
      "description": "Check if the volume chart is integrated or can work alongside other stock metrics like price movement, moving averages, or technical indicators. Volume-price relationship visualization is crucial for trading analysis. Deduct 5 points if there's no price data correlation, 3 points if comparison with historical volume averages is missing, and 3 points if volume-based indicators (e.g., OBV) are not included. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing data points, extremely high volume spikes, API failures, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Volume profile visualization on the side, 2. Automatic pattern recognition for volume spikes, 3. Color coding based on price-volume divergence). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visualization methods (e.g., multiple ways to render the same bars) 2. Function modules unrelated to trading volume visualization (e.g., unrelated social media integration) 3. Fancy effects that affect performance (e.g., excessive animations that hinder chart readability). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/visualization/interaction layers), reusability of chart components, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no consideration for rendering performance with large datasets. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional financial visualization standards?",
      "description": "Evaluate whether the overall design follows financial charting principles: 1) Appropriate color scheme (using green/red for up/down volume or neutral colors with clear contrast) 2) Clean layout with proper data-ink ratio (minimal chartjunk) 3) Professional typography (readable numbers, proper axis labels, clear title). Deduct 3 points for cluttered visuals, 5 points for misleading visual encoding, and 5 points for poor readability of critical information. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive?",
      "description": "Judge whether the chart interactions conform to user expectations: 1) Hover/tooltip response within 100ms 2) Smooth transitions when updating data or changing time frames 3) Responsive design that works across device sizes. Deduct 5 points for laggy interactions with large datasets, 3 points for jarring visual updates when changing parameters, and 5 points for non-responsive design that breaks on different screen sizes. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "medium"
}
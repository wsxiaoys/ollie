{
  "index": 1613,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. uniapp, implement an editable knowledge graph.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the knowledge graph data structure properly implemented?",
      "description": "Review whether the code accurately implements a graph data structure for knowledge representation, including nodes (concepts) and edges (relationships). Score 0 if there's no clear graph structure, 5 if basic node-edge representation exists, and 10 if it includes advanced features like node types, edge weights, and directional relationships.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the graph editing capabilities fully functional?",
      "description": "Check if the implementation allows CRUD operations (Create, Read, Update, Delete) for both nodes and edges. Verify the presence of node/edge selection, dragging, resizing, and content editing. Deduct 3 points if any basic operation is missing, and 5 points if multi-selection or batch operations aren't supported. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the visualization rendering optimized for uniapp?",
      "description": "Evaluate whether the visualization leverages appropriate uniapp rendering methods (canvas vs. component-based) based on graph complexity. Check if it handles cross-platform differences (iOS/Android/H5) and applies performance optimizations like culling for off-screen elements or level-of-detail techniques. Deduct 5 points if rendering is sluggish with >50 nodes, and 3 points if platform-specific issues exist. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation use appropriate uniapp features?",
      "description": "Assess whether the code uses uniapp-specific components and APIs properly. Check for proper utilization of uni-app lifecycle hooks, conditional compilation for platform differences, and appropriate use of uniapp UI components. Deduct 5 points for excessive web-view usage when native components would be more appropriate, and 5 points if the code doesn't follow uniapp's development paradigm. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as malformed graph data, user operation errors, or touch event conflicts) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Auto-layout algorithms for graph organization 2. Export/import functionality with standard knowledge graph formats 3. Gesture shortcuts for rapid graph manipulation). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple graph manipulation libraries) 2. Function modules unrelated to knowledge graph editing (e.g., unneeded social features) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating graph model/view/controller layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Touch feedback delay ≤ 100ms 2) Graph manipulation responsiveness on different devices 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual lag during graph manipulation, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "easy"
}
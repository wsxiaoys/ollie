{
  "index": 1026,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Write a piece of code for visualizing a family tree.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the family tree data structure properly designed?",
      "description": "Evaluate whether the code implements an appropriate data structure (e.g., tree, graph) to represent family relationships. Check for proper parent-child connections, sibling relationships, and support for complex family structures (step-relationships, multiple marriages, etc.). Score 0 if no proper structure exists, 5 if basic parent-child relationships are represented, 10 if the structure handles all complex family relationships.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the tree visualization rendering implementation complete?",
      "description": "Review the rendering mechanism used (Canvas, SVG, HTML DOM) and assess whether it properly visualizes hierarchical relationships. Check for appropriate node spacing, branch connections, and hierarchical layout. Deduct 5 points if nodes overlap frequently, 3 points if connections between family members are unclear, and 2 points if the hierarchical structure is difficult to follow. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are interactive features for family tree exploration provided?",
      "description": "Check for interactive features like zooming, panning, expanding/collapsing nodes, searching, and filtering. Evaluate whether the implementation includes tooltips for additional information and node selection capabilities. Score 0 if no interactivity exists, 5 if basic interactions are implemented, and 10 if comprehensive exploration features are available with smooth transitions.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation support data input/editing functionality?",
      "description": "Assess whether the code includes functionality for adding, editing, and removing family members. Check for validation of input data, undo/redo capabilities, and data persistence options (local storage, export/import). Deduct 5 points if editing is not supported, 3 points if validation is missing, and 2 points if no data persistence mechanism exists. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as malformed data input, empty trees, extremely large families, circular references, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Timeline view of generations 2. Statistical analysis of family demographics 3. Automatic layout optimization for complex trees). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple tree traversal algorithms doing the same thing) 2. Function modules unrelated to family tree visualization (e.g., a built-in weather widget) 3. Fancy effects that affect performance (e.g., excessive animations when displaying family members). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data model/view/controller layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast navigation of large trees, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "medium"
}
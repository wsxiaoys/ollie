{
  "index": 934,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure that the code you generate is executable and can be demonstrated. In an independent alert monitoring interface window, display which stock belongs to which pattern alert (Wave or MACD) and show which timeframe condition the stock meets (15-minute, 30-minute, 60-minute, or daily chart), along with real-time stock prices and alert timestamps.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the alert monitoring system properly structured?",
      "description": "Evaluate if the code implements a clear separation between data fetching, pattern recognition (Wave and MACD), and UI display components. Check for appropriate usage of event handling for real-time updates and proper initialization sequence. Score 0 if the core monitoring system is not implemented, 5 if basic structure exists but lacks proper separation of concerns, and 10 if the architecture follows best practices with clean component boundaries.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the stock pattern recognition algorithms correctly implemented?",
      "description": "Examine the implementation of both Wave pattern and MACD pattern detection algorithms. The Wave pattern should include proper trend line calculations with support/resistance levels, while the MACD should correctly implement signal line crossovers, histogram analysis, and divergence detection. Deduct 3 points if either pattern algorithm is missing, 5 points if the algorithms lack proper validation thresholds, and 2 points if they don't handle edge cases (like data gaps). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the multi-timeframe analysis functionality complete?",
      "description": "Review whether the code properly handles and displays analysis across all required timeframes (15-min, 30-min, 60-min, daily). Check for appropriate data aggregation, resampling techniques, and consistent calculation across timeframes. Deduct 2 points for each missing timeframe implementation, 3 points if timeframe switching affects calculation consistency, and 4 points if there's no correlation analysis between timeframes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are real-time stock prices and alert timestamps properly integrated?",
      "description": "Assess whether the interface includes accurate real-time stock price updates with appropriate refresh rates (≤5 seconds for active stocks), properly formatted timestamps with timezone handling, and visual indicators for price changes (e.g., color coding for up/down movements). Deduct 3 points if timestamps lack proper formatting, 4 points if price updates aren't real-time or lack change indicators, and 3 points if there's no historical price context provided. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as API failures, data feed interruptions, malformed data responses, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle network latency, server disconnections, and include graceful degradation. Give 10 points for comprehensive error handling, 5 points for average robustness, and 0 points if no exception handling exists.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Pattern strength indicators 2. Alert notification system with sound/vibration 3. Historical alert performance statistics 4. Custom pattern threshold adjustment). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar alert mechanisms (e.g., multiple overlapping event listeners) 2. Function modules unrelated to stock monitoring (e.g., unnecessary social sharing options) 3. Fancy effects that affect performance (e.g., excessive animations that slow down critical updates). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core alert functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data fetching/analysis/visualization layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional financial dashboard standards?",
      "description": "Evaluate whether the design follows professional financial dashboard principles: 1) Appropriate color scheme for financial data (using red/green conventions correctly) 2) Information density optimization (key metrics visible without scrolling) 3) Professional typography (monospace for numbers, clear hierarchy for alerts vs. details). Deduct 3 points for cluttered layouts, 5 points for poor visual prioritization of critical alerts, and 5 points for inconsistent data visualization techniques. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the alert interaction efficient and trader-friendly?",
      "description": "Judge whether the alert system meets trader needs: 1) Alert response time ≤ 500ms from pattern detection 2) One-click access to detailed chart view from alerts 3) Filtering/sorting capabilities for high alert volume scenarios. Deduct 5 points for alerts that require multiple clicks to access details, 3 points for lack of alert prioritization system, and 5 points for missing alert history/persistence. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "hard"
}
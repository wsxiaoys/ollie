{
  "index": 334,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. Given a large scatter dataset [x,y,value], create a heatmap using d3.js.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core heatmap visualization properly implemented?",
      "description": "Evaluate whether the code correctly creates a d3.js heatmap from [x,y,value] data. Check if it properly handles data binning, color mapping, and heat intensity visualization. Score 0 if the heatmap is not implemented, 5 if only basic visualization is present without proper data processing, and 10 if it includes proper data binning, smoothing, and appropriate color scales for the heatmap.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the data processing and binning logic correctly implemented?",
      "description": "Check whether the code includes adequate data processing for converting scattered [x,y,value] points into a gridded heatmap. Verify the binning algorithm (hexagonal or rectangular), density calculation method, and handling of overlapping points. Deduct 5 points if the binning algorithm is inefficient for large datasets (>1000 points), and 3 points if edge cases (like outliers or sparse areas) are not handled. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the color scale appropriately designed and implemented?",
      "description": "Assess the color scale implementation – whether it uses appropriate sequential/diverging color schemes, provides proper contrast for data visibility, and includes color legend integration. The scale should respect perceptual uniformity and accessibility standards. Deduct 5 points if the color scale does not match data distribution, 3 points for poor color accessibility, and 2 points if no legend is provided. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are appropriate interactions and responsiveness implemented?",
      "description": "Evaluate whether the heatmap includes useful interactions like tooltips for data points, zooming/panning capabilities, and whether it's responsive to different screen sizes. Check for smooth transitions when filtering or updating data. Deduct 3 points for each missing key interaction (tooltip, zoom, responsive sizing), and 5 points if transitions between data updates are jarring. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty datasets, non-numeric values, extremely large datasets, browser resize events, etc.) and provide friendly error handling or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic kernel density estimation 2. Animated transitions between different dataset views 3. Customizable smoothing parameters 4. Integration with statistical analysis tools). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant data processing loops that could be optimized 2. Function modules unrelated to heatmap visualization 3. Fancy effects that affect performance (e.g., unnecessary animations or DOM manipulations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/visualization/interaction logic), reusable components, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no performance optimizations for large datasets (>10,000 points). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern visualization principles: 1) Clean, non-distracting container design 2) Proper aspect ratio and use of space (data-ink ratio) 3) Professional labeling and typography (consistent font family, readable sizes). Deduct 3 points for cluttered axes or legends, 5 points for poor use of visualization space, and 5 points for inconsistent or unreadable text elements. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Hover feedback delay ≤ 100ms 2) Transition animation duration controlled between 200-400ms 3) Clear visual cues for interactive elements. Deduct 5 points for each interaction without feedback, 3 points for laggy rendering with large datasets, and 5 points for confusing or inconsistent interaction patterns. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Data Science-Data Visualization Dashboards",
  "difficulty": "hard"
}
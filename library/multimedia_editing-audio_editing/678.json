{
  "index": 678,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Try to ensure the generated code is executable and demonstrable.\n\n======== ROLE ========\nYou are an experienced code expert. You are provided with a software development requirement description and asked to generate project code based on these requirements. Strictly follow the rules to help users generate complete project code with simple and easily understood comments. Don't output anything else.\n\n======== OUTPUT RULES ========\n1. Always generate complete and runnable project code, ensuring the project is fully executable\n2. Ensure all code files you output are complete, don't omit any code\n3. Carefully review and check all code before final output, evaluating its executability. If the code cannot execute or contains errors, regenerate it\n4. If the requirements involve external API access or using user data (images, videos, audio, etc.), please provide simulated data\n\n======== PROJECT REQUIREMENTS ========\nDesign an audio pitch shifter where users can upload audio files, select pitch shift options (such as raising by an octave, lowering by an octave, etc.), and preview the pitch shift effect in real-time. After editing is complete, users can export the pitch-shifted audio file.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the audio file upload functionality properly implemented?",
      "description": "Check if the code includes proper file input handling for audio files (mp3, wav, etc.), validation of file types, error handling for corrupted files, and feedback during upload process. The implementation should handle different audio formats and include proper UI feedback during the upload process.0 points if no upload functionality exists, 5 points for basic file selection without validation, 10 points for complete implementation with file type validation, progress indicators, and error handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the pitch shifting core algorithm correctly implemented?",
      "description": "Evaluate whether the pitch shifting algorithm preserves audio quality while changing pitch. Check for implementation of time-domain or frequency-domain processing (such as phase vocoder, PSOLA, or similar algorithms). The implementation should handle various pitch shifts without introducing significant artifacts.0 points if no pitch shifting is implemented, 5 points for basic implementation with noticeable quality loss, 10 points for professional-grade algorithm with minimal artifacts even at extreme pitch shifts.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the pitch shift options comprehensive and user-friendly?",
      "description": "Review the range of available pitch shift options (octave up/down, semitone adjustments, custom ratio). Check if the UI includes intuitive controls like sliders or preset buttons for common shifts. Options should be presented in musical terminology where appropriate.0 points if only fixed options exist, 5 points for basic semitone/octave controls, 10 points for comprehensive options with both musical intervals and precise numeric values with visual feedback.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is real-time preview functionality implemented effectively?",
      "description": "Check whether users can preview the pitch-shifted audio in real-time, with minimal latency between adjustment and playback. Verify if preview includes waveform visualization that updates with pitch changes. The system should have buffer management to ensure smooth playback.0 points if no preview exists, 5 points for basic preview with noticeable delay, 10 points for immediate responsive preview with visual waveform changes and proper playhead tracking.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code handles edge cases such as very large files, unsupported formats, browser compatibility issues, and memory management during processing. Error handling should be comprehensive with user-friendly messages.0 points if no exception handling exists, 5 points for basic error catching, 10 points for comprehensive error prevention, detection, and recovery with helpful user feedback.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check for additional useful features beyond basic requirements (e.g., formant preservation, multi-track support, batch processing, harmonization effects, or real-time spectral visualization).Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check for unnecessary code complexities, duplicate audio processing routines, or flashy UI elements that impair performance without adding value to the core pitch shifting functionality.Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review the separation of concerns (audio processing logic, UI components, file operations), proper use of Web Audio API, memory management for large audio files, and browser compatibility considerations.Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate the audio editor interface for clarity, accessibility, and professional appearance. Check for appropriate visualization of audio (waveforms, spectrograms) that update with pitch changes, consistent control styling, and proper spacing of UI elements.Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic audio control layout.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the pitch adjustment controls respond immediately, if audio playback starts/stops without delay, and if the export process provides appropriate progress indication. Check for smooth waveform scrolling during playback and responsive UI even during processing.Deduct 5 points for each operation without feedback, 3 points for audio glitches during adjustment, and 5 points for export functionality that freezes the UI.",
      "maxScore": 10
    }
  ],
  "class": "Multimedia Editing-Audio Editing",
  "difficulty": "hard"
}
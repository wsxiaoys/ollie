{
  "index": 575,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable when possible. Create a music player application where users can search for songs, create playlists, play, pause, and switch between songs. Song data should be retrieved through a music API, and the application should support online playback and display song covers, artist information, etc. The playback progress should update in real-time.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the music API integration and data management fully implemented?",
      "description": "Review whether the code properly integrates with music APIs (such as Spotify, Apple Music, or similar services) with proper authentication handling, rate limiting, and error responses. Check if song metadata (title, artist, album, duration, cover art) is correctly parsed and cached. Evaluate data structure design for efficient storage and retrieval of track information. Score 0 if API integration is missing, 5 if basic search is implemented but lacks metadata handling, and 10 if comprehensive API integration with proper error handling and caching is present.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the playlist management system comprehensively designed?",
      "description": "Check whether the code implements complete playlist functionality including creation, deletion, modification, and persistence of playlists. Evaluate if drag-and-drop reordering, duplicate detection, and playlist sharing capabilities are included. Review local storage or database integration for playlist persistence across sessions. Deduct 3 points if playlist operations lack undo functionality, 5 points if persistence is not implemented, and 2 points if drag-and-drop interactions are missing. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the audio playback engine robust and feature-complete?",
      "description": "Evaluate whether the audio playback system supports seamless transitions between tracks, proper buffering strategies, and crossfade capabilities. Check if the player handles various audio formats, implements proper preloading for next tracks, and manages memory efficiently during long listening sessions. Review real-time progress updates with millisecond precision and seek functionality. Deduct 5 points if buffering causes frequent interruptions, 3 points if seek operations are imprecise, and 5 points if memory leaks occur during extended playback. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the search and discovery functionality intelligent and responsive?",
      "description": "Check whether the search implementation includes autocomplete, search history, advanced filtering (by artist, album, genre, year), and fuzzy matching capabilities. Evaluate if search results are paginated efficiently and include relevant metadata. Review if the system implements search result caching and provides search suggestions. Give 10 points if all features are implemented with sub-200ms response times, 5 points if basic search works but lacks advanced features, and 0 points if search functionality is non-functional or extremely slow.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network failures during streaming, invalid API responses, corrupted audio files, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should gracefully handle API rate limits, network timeouts, and audio loading failures. Give 10 points if comprehensive error handling is present, 5 points if basic error handling exists, and 0 points if no exception handling is implemented.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the music experience (e.g., 1. Real-time audio visualization/spectrum analyzer 2. Lyrics synchronization with playback 3. Smart playlist generation based on listening history 4. Social sharing of currently playing tracks 5. Equalizer with custom presets 6. Sleep timer and alarm integration). Add 2-3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple audio context instances, duplicate playlist logic) 2. Function modules unrelated to music playback (e.g., built-in games, unrelated social features) 3. Performance-heavy effects that don't enhance user experience (e.g., excessive visual effects during playback). Deduct 3 points for each redundancy found, and directly deduct 10 points if core music functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating audio engine/UI components/API services), proper state management, and build process automation. Check for proper TypeScript usage, component reusability, and performance optimization. Deduct 5 points if global audio state pollution is found or audio context is not properly managed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process lacks optimization for audio assets. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional music app design standards?",
      "description": "Evaluate whether the overall design follows modern music app design principles: 1) Harmonious color scheme that complements album artwork 2) Proper visual hierarchy with clear focus on currently playing track 3) Professional typography system with readable artist/track information 4) Consistent iconography for playback controls. Deduct 3 points for each cluttered interface element, 5 points for poor contrast affecting readability, and 5 points if the design doesn't adapt well to different album artwork colors. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and intuitive for music playback?",
      "description": "Judge whether the interactive elements conform to music app standards: 1) Playback control responsiveness â‰¤ 50ms 2) Smooth progress bar scrubbing with real-time preview 3) Intuitive gesture controls (swipe for next/previous track) 4) Visual feedback for all user actions 5) Smooth transitions between different app states (search, playlist, now playing). Deduct 5 points for each unresponsive control, 3 points for jerky progress bar animations, and 5 points if key music controls are hard to access during playback. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Multimedia Editing-Audio Editing",
  "difficulty": "hard"
}
{
  "index": 674,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to make the code you provide executable for demonstration. Develop a frontend audio denoising application where users can upload audio files containing noise, click on a denoising button to process the audio, then listen to and download the noise-reduced audio after processing is complete.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the audio file upload functionality properly implemented?",
      "description": "Check if the code implements a complete audio file upload system with proper file type validation (accepting common audio formats like MP3, WAV, OGG), file size restrictions, and clear user feedback during upload. The upload component should handle errors gracefully and provide visual confirmation when files are successfully uploaded. Deduct 5 points if only certain formats are supported, 3 points if there's no size validation, and 5 points if error handling is missing. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the audio denoising processing functionality implemented?",
      "description": "Evaluate whether the code includes an actual audio denoising algorithm (using Web Audio API, audio processing libraries, or WebAssembly implementations) rather than just simulating the process. Check if the implementation includes configurable denoising parameters (noise threshold, sensitivity, etc.) and provides visual feedback during processing. Score 0 if only simulated, 5 if basic algorithm without customization, and 10 if a comprehensive solution with configurable parameters is implemented.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the audio playback functionality complete?",
      "description": "Review whether the code provides comparative playback between original and processed audio, with standard audio controls (play/pause, volume, progress bar, time display). The interface should allow A/B testing between original and processed versions. Deduct 3 points if seeking functionality is missing, 3 points if volume control is absent, and 5 points if comparative listening isn't possible. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the processed audio download functionality implemented?",
      "description": "Check if the code correctly implements downloading of the processed audio file with appropriate format options (WAV, MP3, etc.), proper filename handling, and metadata preservation. The download should work across different browsers and include error handling. Deduct 3 points if only one format is supported, 5 points if metadata is stripped, and 3 points if browser compatibility issues exist. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as unsupported file formats, corrupted audio files, processing timeouts, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time visualization of audio waveform and noise reduction 2. Multiple denoising algorithms to choose from 3. Batch processing capability). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple audio processing engines) 2. Function modules unrelated to audio denoising (e.g., unnecessary image editing tools) 3. Fancy effects that affect performance (e.g., excessive animations that slow down audio processing). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/audio processing/storage layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual feedback during audio processing. Deduct 5 points for each operation without feedback, 3 points for lack of progress indicators during processing, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Multimedia Editing-Audio Editing",
  "difficulty": "medium"
}
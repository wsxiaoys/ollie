{
  "index": 470,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code when possible. Develop a frontend program for audio trimming and labeling, where users can upload audio, trim specific time segments, add text labels to the trimmed audio, and finally save the audio file with the label information.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the audio uploading and playback functionality fully implemented?",
      "description": "Check if the code implements a complete audio file upload mechanism with format validation (.mp3, .wav, etc.) and proper error handling for unsupported formats. Verify that the audio playback controls include play/pause, volume control, and a working progress display. Score 0 if audio upload/playback is missing, 5 if basic functionality works but lacks format validation or error handling, and 10 if fully implemented with comprehensive format support and robust error handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the audio trimming functionality properly implemented?",
      "description": "Evaluate whether the trimming interface allows precise selection of start and end points with visual feedback (e.g., highlighted regions, time markers). Check if the waveform visualization is implemented to aid in precise trimming. Score 0 if trimming functionality is absent, 5 if basic trimming works but lacks precision controls or visual feedback, and 10 if the implementation includes fine-grained time controls (at least millisecond precision) with visual waveform representation.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the audio labeling system comprehensive?",
      "description": "Assess whether the code implements a labeling system that allows adding, editing, and deleting text labels for trimmed segments. Check if labels are properly associated with specific time ranges and if multiple labels can be added to different segments. Score 0 if labeling functionality is missing, 5 if basic labeling exists but lacks editing capabilities or proper time association, and 10 if the implementation includes a complete label management system with metadata support.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the saving and exporting functionality complete?",
      "description": "Review whether the code provides functionality to save trimmed audio segments along with their associated labels. Check if the export format preserves both audio quality and label information (e.g., JSON metadata, embedded ID3 tags for MP3). Score 0 if export functionality is missing, 5 if basic export works but doesn't preserve labels properly, and 10 if the implementation includes multiple export options with preserved metadata and batch export capabilities.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as corrupt audio files, browser compatibility issues, memory limitations with large files) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-assisted auto-labeling 2. Voice-to-text transcription integration 3. Keyboard shortcuts for efficient editing 4. Label categorization with color coding). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple audio processing libraries loaded) 2. Function modules unrelated to audio editing (e.g., unnecessary social sharing features) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating audio processing logic/UI components/data management), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Audio processing operations respond within 200ms 2) Waveform rendering is smooth even with longer audio files 3) Clear visual feedback when applying labels or trimming operations. Deduct 5 points for each operation without feedback, 3 points for laggy waveform displays during scrolling/zooming, and 5 points for unintuitive label interaction. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Multimedia Editing-Audio Editing",
  "difficulty": "medium"
}
{
  "index": 520,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable when possible.\n\n## Role ##\nYou are an experienced code expert. You are given a software development requirement description and asked to generate project code according to the project requirements. Strictly follow the rules to help users generate complete project code with simple and easy-to-understand language comments. Don't output anything else.\n\n## Output Rules ##\n1. You should always generate complete, runnable project code, and ensure the project is fully executable\n2. Ensure all code files you output are complete, don't omit any code\n3. Carefully review and check all code before final output to evaluate its executability. If the code cannot be executed or contains errors, regenerate it\n4. If the requirements involve external API access or use of user data (images, videos, audio, etc.), please provide mock data\n\n## Project Requirements Description ##\nPlease write code to implement a music material management system where musicians can upload their audio files, set metadata such as BPM and key, add categorization tags. The system should support online audio playback, waveform display, audio editing, favorites organization, and provide advanced search functionality by style, mood, length and other attributes.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the audio file upload and management system fully implemented?",
      "description": "Review whether the code accurately implements audio file upload with proper validation (format, size limits), metadata extraction/editing (BPM, key, duration), and categorization tag management. Check if file storage is properly handled with unique naming and path management. Score 0 if core upload functionality is missing, 5 if only basic upload is implemented without metadata handling, and 10 if complete audio management with validation and metadata is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the online audio playback and waveform visualization implemented?",
      "description": "Check whether the audio player includes standard controls (play/pause/seek/volume), real-time waveform display using Web Audio API or Canvas, and visual progress indicators. Evaluate if waveform rendering is smooth and responsive. Deduct 5 points if waveform display is missing or non-functional, 3 points if playback controls are incomplete or unresponsive. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the audio editing functionality designed with proper tools?",
      "description": "Evaluate whether the system provides essential audio editing capabilities such as trim/cut, fade in/out, volume adjustment, and basic effects. Check if editing operations are reflected in real-time waveform updates and if changes can be saved/exported. Deduct 5 points if only basic trim functionality exists, 3 points if real-time preview is missing. Give 10 points if comprehensive editing tools are fully implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the advanced search and filtering system constructed effectively?",
      "description": "Check whether the code includes comprehensive search functionality by multiple attributes (style, mood, BPM range, key, duration, tags) with proper indexing and filtering logic. Evaluate if search results are displayed efficiently with pagination or infinite scroll. Deduct 5 points if search is limited to basic text matching, 3 points if performance optimization is missing for large datasets. Give 10 points if fully implemented with advanced filtering options.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted audio files, network interruption during upload, unsupported formats, storage quota exceeded, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the music management experience (e.g., 1. AI-powered BPM/key detection 2. Collaborative playlist creation 3. Audio similarity matching 4. Spectral analysis visualization 5. Smart tagging suggestions). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple audio player instances) 2. Function modules unrelated to music management (e.g., built-in social media integration) 3. Fancy effects that affect audio performance (e.g., excessive visual animations during playback). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core audio functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating audio processing/UI/data management layers), proper error handling, and code organization. Deduct 5 points if global state pollution is found or audio context is not properly managed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if audio resources are not properly disposed of to prevent memory leaks. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern music application design principles: 1) Harmonious color matching suitable for audio interfaces (no more than 3 primary colors) 2) Proper layout spacing for music controls (element spacing follows the 8px multiple principle) 3) Professional typography system (body font size ≥ 14px, line height over 1.5 times) 4) Clear visual hierarchy for audio metadata display. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic audio control layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the audio interface interactions conform to user expectations: 1) Audio control response delay ≤ 50ms 2) Waveform rendering smooth at 60fps 3) Smooth transitions between different views 4) Clear visual feedback for all audio operations 5) Intuitive drag-and-drop for file uploads. Deduct 5 points for each audio operation without immediate feedback, 3 points for laggy waveform display, and 5 points for unresponsive audio controls. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
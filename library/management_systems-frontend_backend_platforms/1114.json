{
  "index": 1114,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code whenever possible. Project overview: Manage shared spaces within a building (such as meeting rooms, activity rooms, rest areas, etc.). Implement a system for reservation and usage monitoring of shared spaces.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the reservation system core functionality fully implemented?",
      "description": "Review whether the code accurately implements the essential reservation features including calendar visualization, time slot selection, conflict detection, and confirmation flow. Score 0 if the reservation logic is missing, 5 if only basic booking without conflict checking exists, and 10 if it includes comprehensive features like recurring bookings, priority rules, and waiting lists.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the space management functionality properly implemented?",
      "description": "Evaluate whether the system allows administrators to add, edit, and remove shared spaces with appropriate attributes (capacity, equipment, location, type). Check if spaces can be categorized, searched, and filtered. Deduct 5 points if space modification functionality is missing; deduct 3 points if there's no validation for space attributes. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the usage monitoring and analytics component developed?",
      "description": "Assess whether the code implements space utilization tracking, usage statistics, and visualization of occupancy data. Check for features like usage reports, peak time identification, and underutilized space detection. Score 0 if monitoring is absent, 5 if basic logging exists without analytics, and 10 if comprehensive dashboards with actionable insights are implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the user management and permission system properly designed?",
      "description": "Verify the implementation of user roles (admin, regular users, space managers) with appropriate permission controls. Check if the system handles authentication, authorization, and maintains audit logs of user actions. Deduct 5 points if role-based access control is missing; deduct 3 points if there's no audit trail. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as double-booking attempts, invalid time inputs, system overload during peak hours, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time occupancy sensors integration 2. Automatic room suggestion based on meeting requirements 3. Mobile check-in/QR code verification). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple booking confirmation flows) 2. Function modules unrelated to space management (e.g., built-in chat system when notifications would suffice) 3. Fancy effects that affect performance (e.g., unnecessary 3D room renderings). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating business logic/UI/data access layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
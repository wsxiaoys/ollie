{
  "index": 1654,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure that any code you generate is executable and ready for demonstration. Write a canteen inventory management system using PyQt.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core inventory management functionality implemented?",
      "description": "Review whether the code implements essential inventory management features including: adding/removing items, updating quantities, tracking expiration dates, and categorizing food items. Score 0 if these core functions are missing, 5 if basic CRUD operations are implemented, 10 if it includes advanced features like batch operations and inventory forecasting.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the PyQt UI properly implemented with appropriate layouts?",
      "description": "Evaluate the PyQt implementation including proper use of layouts (QVBoxLayout, QHBoxLayout, QGridLayout), responsive design principles, and proper widget hierarchy. Deduct 3 points for improper layout management causing visual issues, 3 points for fixed-size elements that don't adapt to window resizing, and 3 points if the UI elements are poorly organized. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a proper database integration with CRUD operations?",
      "description": "Check whether the system properly integrates with a database (SQLite, MySQL, etc.) with proper connection handling, transaction management, and prepared statements to prevent SQL injection. Deduct 5 points if no database is used (only in-memory storage), 3 points if connections aren't properly closed, and 5 points if there's no error handling for database operations. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a reporting and analysis functionality?",
      "description": "Assess whether the system includes reporting features such as inventory valuation, consumption trends, stock alerts, and waste tracking. Look for data visualization components and exportable reports. Deduct 3 points for each missing essential report type, 5 points if there's no visualization capability, and 5 points if data export functionality is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, database connection failures, concurrent access issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Barcode/QR code scanning integration 2. AI-powered inventory prediction 3. Supplier management and automated ordering). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to perform the same task) 2. Function modules unrelated to inventory management (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., unnecessary animations or visual effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/business logic/data layers using MVC or MVVM patterns), unit test coverage, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there is no separation of concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (consistent margins and padding) 3) Professional font system (readable font sizes, appropriate contrast). Deduct 3 points for each crowded visual element, 5 points for clashing colors, and 5 points for inconsistent visual hierarchy. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay â‰¤ 100ms 2) Appropriate loading indicators for long operations 3) Clear visual focus guidance and keyboard navigation support. Deduct 5 points for each operation without feedback, 3 points for UI freezing during database operations, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "easy"
}
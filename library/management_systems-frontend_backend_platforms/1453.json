{
  "index": 1453,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Using educational management as an example, help me write a comprehensive system that includes teaching courses, laboratory courses, and experiments. In this educational management system, laboratory courses are part of the teaching management, laboratory courses contain experiments, teachers create experiment-related information, and students learn through experiments.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core educational management system fully implemented?",
      "description": "Review whether the code accurately implements the fundamental educational management system components including course management (creation, updating, deletion), teacher/student registration, enrollment functionality, and grade tracking. Score 0 if no core functionality is implemented, 5 if only basic CRUD operations are available, and 10 if a complete system with role-based permissions and workflow is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the laboratory course management subsystem properly integrated?",
      "description": "Evaluate whether laboratory courses are properly implemented as a specialized type of course with appropriate inheritance/composition relationships to the main course structure. Check if lab courses have distinct properties (equipment requirements, capacity limits, safety protocols) while maintaining core course attributes. Deduct 5 points if labs are implemented as completely separate entities without proper integration, and 3 points if lab-specific attributes are missing. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the experiment management functionality comprehensive?",
      "description": "Check whether experiments within laboratory courses have complete lifecycle management including creation by teachers, assignment to students, submission by students, evaluation, and feedback mechanisms. Verify if experiments have appropriate metadata (time estimates, difficulty levels, prerequisites, learning objectives). Deduct 5 points if the experiment submission workflow is incomplete, and 3 points if metadata or learning analytics are missing. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the teacher-student interaction model properly designed?",
      "description": "Assess whether the system successfully models teacher-student relationships across regular courses and laboratory experiments. Check if teachers can create, assign, track, and evaluate student experiment participation, and if students can view assignments, submit work, receive feedback, and track progress. Deduct 5 points if the notification system for new assignments/submissions is missing, and 3 points if the feedback mechanism is one-directional. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as duplicate enrollments, scheduling conflicts, submission after deadlines, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the educational experience (e.g., 1. AI-assisted grading system 2. Interactive virtual laboratory simulations 3. Learning analytics dashboard with performance predictions). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple user management systems coexisting) 2. Function modules unrelated to educational management (e.g., a built-in social network) 3. Fancy effects that affect performance (e.g., unnecessary animations in critical workflows). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating business logic/view/data access layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
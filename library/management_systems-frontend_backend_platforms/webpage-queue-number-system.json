{
  "index": 1384,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Pay attention to ensure the code you generate is executable for demonstration. Develop a queue number system webpage using HTML+JavaScript.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core queue management system fully implemented?",
      "description": "Review whether the code accurately implements queue data structures and operations (enqueue, dequeue, display current/next number). Score 0 if the core queue logic is not implemented, 5 if basic queue operations exist but lack proper state management, and 10 if the complete queue lifecycle with appropriate events is handled.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the essential UI components for a queue system present?",
      "description": "Check if the interface includes: current number display, next number button, new ticket generation, queue status indicator, and estimated wait time. Deduct 2 points for each missing essential component. The interface should clearly distinguish between customer view and service counter view. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the queue number generation and tracking mechanism implemented?",
      "description": "Evaluate whether the system generates unique sequential numbers, maintains correct queue order, and properly handles number transitions. Deduct 3 points if uniqueness isn't guaranteed, 4 points if the queue order can be corrupted, and 3 points if there's no visual indication of state changes when numbers advance. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is data persistence implemented for queue state?",
      "description": "Check if the queue state persists across page refreshes (via localStorage, sessionStorage, or similar). Verify that queue history is maintained and that the system can recover from browser refreshes without losing state. Award 0 points if no persistence exists, 5 points for basic persistence, and 10 points for comprehensive state management with history.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid clicking, out-of-sequence operations, browser storage limitations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Audio announcements for next numbers 2. Visual estimation of waiting times 3. Priority queue handling for special cases 4. Real-time statistics dashboard). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to reset the queue) 2. Function modules unrelated to queue management (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations when numbers change). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating queue logic/UI/storage layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between business logic and presentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation for number changes between 300-500ms 3) Clear visual focus on the current serving number. Deduct 5 points for each operation without feedback, 3 points for jarring transitions when updating queue numbers, and 5 points for confusing UI state during queue operations. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "easy"
}
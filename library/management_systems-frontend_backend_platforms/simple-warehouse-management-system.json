{
  "index": 1694,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Help me write a simple warehouse management system using a programming language.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core data model properly implemented?",
      "description": "Check if the code implements essential data structures (Product, Inventory, Order, User entities) with appropriate attributes and relationships. Evaluate if proper normalization principles are applied to avoid data redundancy. Score 0 if no data model is implemented, 5 if basic entities exist but relationships are poorly defined, and 10 if a complete, normalized data model is implemented with proper validation rules.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are CRUD operations for inventory management fully implemented?",
      "description": "Verify that the code includes Create, Read, Update, Delete operations for inventory items with proper input validation and error handling. Check if stock level tracking, batch operations, and inventory history are implemented. Deduct 3 points if any CRUD operation is missing, 2 points if validation is insufficient, and 3 points if inventory history tracking is absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the warehouse location management system implemented?",
      "description": "Assess if the code implements a location system (zones, aisles, shelves, bins) with proper item placement logic and optimization. Check if location search, space utilization calculations, and reordering suggestions are implemented. Deduct 4 points if the location system is oversimplified (just using IDs), 3 points if there's no optimization logic, and 2 points if visualization of warehouse layout is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are reporting and analytics features implemented?",
      "description": "Evaluate whether the system provides essential reports (inventory status, stock movements, expiration alerts, reorder recommendations) with appropriate filtering and export capabilities. Check if any basic analytics (turnover rates, inventory value, forecasting) are implemented. Score 0 if no reporting exists, 5 if only basic listing without analytics is provided, and 10 if comprehensive reporting with visual representations is implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, duplicate entries, concurrent access, system failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Barcode/QR code integration 2. Mobile-friendly interface 3. Predictive inventory forecasting 4. Supplier integration). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to update inventory) 2. Function modules unrelated to warehouse management (e.g., a built-in email client) 3. Fancy effects that affect performance (e.g., unnecessary animations in a business application). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating domain logic/persistence/presentation layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast data operations, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "medium"
}
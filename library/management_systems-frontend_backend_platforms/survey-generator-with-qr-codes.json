{
  "index": 1368,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable. Help me create a program that can generate surveys, where the surveys produced by our program can be accessed via QR code.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the survey generation system complete and functional?",
      "description": "Review whether the code provides a complete survey creation workflow including form definition, question types (multiple choice, text input, ratings), validation rules, and survey publishing. Score 0 if the core survey creation is not implemented, 5 if only basic question types are supported, and 10 if it includes advanced features like branching logic and conditional questions.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the QR code generation properly implemented?",
      "description": "Evaluate if the QR code generation uses established libraries (like qrcode.js or QRious) with proper error handling. Check if the QR codes store proper URLs with unique identifiers for each survey, and if they're generated with appropriate error correction levels (M or Q recommended for reliability). Deduct 5 points if the QR codes don't link directly to the surveys, and 3 points if the resolution or size options are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the system have a survey data storage and retrieval mechanism?",
      "description": "Check if the program implements proper data persistence for both survey definitions and responses. The system should use a database (SQL or NoSQL) or at minimum localStorage with proper data structures. Verify if there's data validation before storage and proper error handling for failed saves. Deduct 5 points if there's no response data aggregation, and 5 points if there's no secure authentication for accessing results. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a responsive survey viewing interface for QR code recipients?",
      "description": "Evaluate if the survey interface adapts to different screen sizes (desktop, tablet, mobile) since QR codes are often scanned on mobile devices. Check for touch-friendly UI elements, appropriate font sizes (minimum 16px on mobile), and proper viewport configuration. Deduct 5 points if the survey doesn't render properly on mobile screens, and 5 points if the survey submission process isn't optimized for touch interfaces. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network failures during survey submission, malformed input data, QR code scanning failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time response analytics 2. Survey templates library 3. Multi-language support for international surveys 4. Offline completion capability with sync when online). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple QR code generators coexisting) 2. Function modules unrelated to survey management (e.g., a built-in image editor) 3. Fancy effects that affect performance (e.g., excessive animations in survey forms). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating survey definition/rendering/data collection layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
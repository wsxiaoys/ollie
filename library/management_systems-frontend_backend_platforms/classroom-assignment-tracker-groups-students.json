{
  "index": 1205,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable when possible. Help me create a classroom assignment tracking system with a middle section displaying groups in a tiled layout with large, prominent text, and where the right side can show multiple students' names per line for those who haven't completed assignments.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the classroom assignment tracking system fully implemented?",
      "description": "Review whether the code implements a complete tracking system including the ability to add/remove assignments, track completion status, and manage students and groups. Score 0 if the core functionality is missing, 5 if only basic tracking is implemented, and 10 if the system provides comprehensive assignment management with status updates and filtering capabilities.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the tiled layout with groups in the middle section properly implemented?",
      "description": "Check if the middle section displays groups in a tiled layout with large, prominent text as specified. The tiles should be visually distinct, properly sized, and maintain consistent spacing. Deduct 3 points if the text is not prominent, 3 points if the tiling is inconsistent, and 4 points if the layout doesn't adapt to different screen sizes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the right-side panel correctly showing multiple students per line?",
      "description": "Evaluate whether the right panel shows multiple students' names per line for those who haven't completed assignments. The implementation should optimize space while maintaining readability. Deduct 5 points if only one student is displayed per line, 3 points if the display is cluttered or hard to read, and 2 points if there's no visual differentiation between complete/incomplete status. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the data structure design appropriate for tracking assignments?",
      "description": "Assess whether the code uses efficient data structures for tracking assignments, students, groups, and completion status. The structure should allow for quick lookups and updates. Deduct 4 points for inefficient data structures that would slow down the application, 3 points for missing relationships between entities, and 3 points if there's no provision for data persistence. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, missing data, large datasets, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time progress visualization 2. Automated reminder system 3. Progress tracking over time with charts). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to track the same data) 2. Function modules unrelated to assignment tracking (e.g., irrelevant calculators or tools) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data model/view/controller layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "easy"
}
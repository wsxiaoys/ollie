{
  "index": 1263,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for display purposes. Use HTML to help me simulate a Navicat operation interface.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Navicat UI layout structure properly implemented?",
      "description": "Evaluate whether the HTML code accurately replicates Navicat's signature three-pane layout (connection tree, object browser, and query/result panels). Score 0 if layout is completely different from Navicat, 5 if basic structure is present but with major differences, and 10 if the UI closely resembles the authentic Navicat interface with proper proportions and component placement.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the essential Navicat database connection components implemented?",
      "description": "Check for connection management interface elements including connection dialog, server type selection (MySQL, PostgreSQL, Oracle, etc.), connection parameters form, and test connection functionality. Deduct 3 points if connection dialog is missing, 3 points if server type selection is limited, and 4 points if connection parameter fields are incomplete. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the database object browser functionality simulated?",
      "description": "Verify implementation of the hierarchical tree view for databases, tables, views, stored procedures, etc. Tree nodes should be expandable/collapsible and provide contextual actions. Deduct 5 points if the tree structure is flat or non-interactive, 3 points if context menus are missing, and 2 points if icons don't properly represent object types. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the SQL query editor and results display implemented?",
      "description": "Assess whether the code includes a proper SQL input area with syntax highlighting, execution controls, and a tabulated results panel. Deduct 4 points for missing syntax highlighting, 3 points for absence of execution controls, and 3 points if result display doesn't support pagination or column sorting. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid SQL syntax, connection failures, large result sets, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dark/light theme switching 2. SQL history with search function 3. Visual query builder). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple query execution methods) 2. Function modules unrelated to database management (e.g., built-in games) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI components, database logic, and state management), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's excessive inline styling instead of CSS classes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching matching Navicat's professional look 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance for database operations. Deduct 5 points for each operation without feedback, 3 points for visual after-images during interface transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
{
  "index": 621,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Try to ensure the generated code is executable and displayable. ======== ROLE ========\nYou are an experienced code expert. I will provide you with a software development requirement description, and you need to generate project code based on these requirements. Strictly follow the rules to help users generate complete project code with simple and easy-to-understand comments, without outputting anything else.\n\n======== OUTPUT RULES ========\n1. You should always generate complete, runnable project code, and ensure the project is fully executable\n2. Ensure all code files you output are complete, do not omit any code\n3. Before the final output, carefully review and check all code to evaluate its executability. If the code cannot be executed or contains errors, regenerate it\n4. If the requirements involve external API access or need to use user data (images, videos, audio, etc.), please provide simulated data\n\n======== PROJECT REQUIREMENTS ========\nCreate a device maintenance reminder system where maintenance cycles must be set when registering devices (based on operating hours/calendar days). The homepage should use colors to distinguish device maintenance status (green-normal, yellow-due within 7 days, red-overdue). Clicking on a device should display maintenance history records and allow adding new maintenance records (including maintenance personnel and consumables used).",
  "checklist": [
    {
      "id": 0,
      "title": "Is the device registration system with maintenance cycle setting fully implemented?",
      "description": "Review whether the code implements a complete device registration system allowing for setting maintenance cycles in both operating hours and calendar days. Check if it includes input validation for mandatory fields, device categorization, and handles edge cases (like negative cycle values or extremely large numbers). Score 0 if core registration functionality is missing, 5 if basic registration exists but lacks proper cycle configuration, and 10 if the registration system is comprehensive with validation and flexible cycle setting options.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the color-coded device status visualization properly implemented?",
      "description": "Evaluate whether the status visualization accurately implements the three-tier color system (green-normal, yellow-due within 7 days, red-overdue). Verify if the color states update dynamically based on real-time calculations rather than fixed values. Check if the visualization is accessible (includes text indicators alongside colors) and handles edge cases like devices with multiple maintenance types. Deduct 5 points if color logic is inconsistent, 3 points if the visualization isn't responsive across different screen sizes.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the device detail view with maintenance history records complete?",
      "description": "Check whether clicking on a device properly displays comprehensive maintenance history with chronological ordering and filtering options. Verify if the history view includes all relevant information (maintenance dates, personnel, actions taken, consumables used). Assess whether pagination or lazy loading is implemented for devices with extensive history. Score 0 if history viewing is not implemented, 5 if basic history exists but lacks filtering/sorting, and 10 if the history view is comprehensive and user-friendly.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the maintenance record addition functionality properly implemented?",
      "description": "Review the new maintenance record addition functionality including form validation, personnel selection, consumables tracking, and automatic date stamping. Verify if the system recalculates next maintenance dates after new records are added. Check if maintenance personnel authentication/authorization is implemented. Deduct 5 points if form validation is missing, 3 points if there's no confirmation dialog before submission, and 2 points if consumables tracking is incomplete.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network interruption, user input errors, database connection issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Predictive maintenance suggestions based on history 2. Consumables inventory management integration 3. Mobile-friendly notifications for upcoming maintenance). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple date calculation methods coexisting) 2. Function modules unrelated to maintenance tracking (e.g., a built-in weather widget) 3. Fancy effects that affect performance (e.g., unnecessary animations on the device list). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating device logic/maintenance tracking/UI layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors beyond the required status colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance when switching between device list and maintenance details. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast switching between views, and 5 points for hard-to-find maintenance addition buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "medium"
}
{
  "index": 1169,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that the code you generate is executable for demonstration. Help me design a mini-program called \"Equipment Owner's Pocket Station,\" which needs to have features for importing substation blueprints and special method materials, as well as socket functionality.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the blueprint import functionality completely implemented?",
      "description": "Review whether the code properly handles various blueprint formats (SVG, DXF, PDF), implements proper parsing and rendering of technical drawings, and maintains accurate scale/proportion. Score 0 if import functionality is missing, 5 if only basic formats are supported without validation, and 10 if the implementation includes format validation, error handling, and proper scaling mechanisms.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the special method materials management system well-designed?",
      "description": "Assess whether the code implements a comprehensive materials library that includes categorization, search functionality, and metadata management. Check if material properties are properly modeled with appropriate data structures. Deduct 5 points if searching/filtering is not implemented, 3 points if material versioning is missing. Give 10 points for a complete implementation that includes material compatibility checks and usage recommendations.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the socket functionality properly implemented?",
      "description": "Evaluate the WebSocket/Socket.IO implementation for real-time data exchange between clients and servers. Check for proper connection management, error handling, reconnection strategies, and data serialization. Deduct 5 points if there's no heartbeat mechanism, 3 points if security measures (authentication/encryption) are missing. The full score is 10 points for robust bidirectional communication with proper error handling.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the application have a complete equipment management workflow?",
      "description": "Check whether the code implements a full equipment lifecycle management system, including inventory tracking, maintenance scheduling, inspection records, and alert mechanisms. Deduct 5 points if historical tracking is not implemented, and 3 points if the maintenance reminder system is missing. Give 10 points if the implementation includes condition monitoring and predictive maintenance features.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid input data, network interruption, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Augmented reality for equipment visualization 2. Voice command integration for hands-free operation 3. QR code scanning for quick equipment identification). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to import the same blueprint format) 2. Function modules unrelated to equipment management (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., unnecessary 3D animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating business logic/UI/network layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
{
  "index": 905,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Note that any code you generate should be executable. Help me design a front-end and back-end separated hospital DIP (Diagnosis-related Groups) grouping software.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the DRG grouping algorithm correctly implemented?",
      "description": "Review whether the code accurately implements the DRG grouping logic including ICD-10 diagnosis code parsing, procedure code classification, and patient demographic factor weighting. Check if the grouping tree traversal algorithm correctly handles complex medical scenarios (comorbidities, complications, age stratification). Score 0 if core grouping logic is missing, 5 if only basic classification is implemented, and 10 if full DRG specification compliance including MDC (Major Diagnostic Categories) and relative weight calculations are included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the medical data processing and validation system robust?",
      "description": "Evaluate whether the system properly validates medical coding inputs (ICD-10-CM/PCS format validation), handles data standardization, and implements medical terminology mapping. Check for proper handling of incomplete medical records, duplicate entries, and cross-referencing between diagnosis and procedure codes. Deduct 5 points if medical data integrity checks are missing, 3 points if standardization protocols are not implemented. Full score requires comprehensive medical data quality assurance.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the hospital workflow integration properly designed?",
      "description": "Check whether the system integrates with typical hospital information systems (HIS/EMR) through proper APIs, supports batch processing of patient records, and provides real-time grouping results. Evaluate if the workflow supports different user roles (physicians, coders, administrators) with appropriate access controls. Deduct 5 points if API integration is incomplete, 3 points if batch processing is inefficient. Requires seamless integration with existing hospital IT infrastructure.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are comprehensive reporting and analytics features implemented?",
      "description": "Assess whether the system provides detailed DRG distribution reports, cost analysis dashboards, case mix index calculations, and trend analysis over time. Check for export capabilities (PDF, Excel), customizable report templates, and statistical summaries for hospital management. Deduct 5 points if reporting lacks depth, 3 points if visualization components are missing. Full implementation should include executive dashboards and operational reports.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid medical codes, system timeouts, corrupted patient data, concurrent user operations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle these edge cases including graceful degradation during system failures, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the healthcare workflow experience (e.g., 1. AI-powered coding suggestions 2. Real-time DRG impact prediction during patient admission 3. Interactive case complexity visualization 4. Automated coding discrepancy detection). Add 3 points for each practical innovative feature implemented that adds genuine value to hospital operations (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple patient search mechanisms coexisting) 2. Function modules unrelated to DRG grouping (e.g., built-in patient scheduling system) 3. Fancy effects that affect performance (e.g., heavy animations in data tables). Deduct 3 points for each redundancy found, and directly deduct 10 points if core medical functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating business logic/data access/presentation layers), unit test coverage for critical medical algorithms, API documentation quality, and deployment automation. Deduct 5 points if global state pollution is found or proper architectural patterns are not used; deduct 5 points if code duplication rate is too high (over 30%); deduct 5 points if deployment process is not automated or lacks proper environment configuration. Full score requires enterprise-grade code quality.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface design meet healthcare professional standards?",
      "description": "Evaluate whether the design follows healthcare UI/UX best practices: 1) Clinical color scheme (avoiding red/green confusion for medical professionals) 2) High contrast ratios for accessibility (WCAG 2.1 AA compliance) 3) Medical data presentation standards (proper table layouts, clear hierarchy). Deduct 3 points for each accessibility violation, 5 points for poor medical data readability, and 5 points for non-intuitive navigation that could impact clinical workflow. Full score requires healthcare-specific design considerations.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to healthcare professional workflow needs: 1) Form submission feedback delay â‰¤ 100ms 2) Data loading transitions controlled between 300-500ms 3) Clear visual indicators for data processing states 4) Intuitive navigation between patient records. Deduct 5 points for each operation without proper feedback, 3 points for laggy data table interactions, and 5 points if critical functions are hard to locate during busy clinical workflows. Full score requires seamless user experience optimized for healthcare environments.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
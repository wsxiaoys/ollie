{
  "index": 1247,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code whenever possible. Please create a frontend CRUD example for customers and users using Tauri+Vite+Svelte, with an existing Rust+Actix-web+MySQL backend already in place.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Tauri+Vite+Svelte frontend architecture properly implemented?",
      "description": "Review whether the code correctly configures Tauri with Vite and Svelte, including proper tauri.conf.json setup, frontend build configuration, and IPC (Inter-Process Communication) bridge implementation. Check if the Svelte components are properly structured with reactive state management. Score 0 if the Tauri integration is missing or broken, 5 if basic setup exists but lacks proper IPC implementation, and 10 if all components are seamlessly integrated with proper error handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are complete CRUD operations fully implemented for both customers and users?",
      "description": "Evaluate whether all Create, Read, Update, Delete operations are implemented for both customer and user entities. Check if the frontend properly communicates with the Rust+Actix-web backend through HTTP requests or Tauri commands. Verify data validation, form handling, and proper state updates after operations. Deduct 3 points for each missing CRUD operation, 2 points if data validation is incomplete, and 2 points if state management is inconsistent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the backend integration with Rust+Actix-web+MySQL properly handled?",
      "description": "Check whether the frontend correctly interfaces with the existing Rust+Actix-web backend, including proper API endpoint usage, request/response handling, and MySQL data persistence. Verify error handling for network failures, database connection issues, and API response parsing. Deduct 4 points if API integration is incomplete, 3 points if error handling is missing, and 3 points if data persistence verification is absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the data flow and state management architecture well-designed?",
      "description": "Evaluate whether the application implements proper state management using Svelte stores or similar patterns for handling customer and user data. Check if the data flow between components is logical, if loading states are handled, and if the UI updates reactively to data changes. Deduct 4 points if state management is chaotic, 3 points if loading states are not handled, and 3 points if component communication is poorly implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, invalid input data, backend service unavailability, Tauri API errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the CRUD experience (e.g., 1. Real-time data synchronization with WebSocket 2. Advanced search and filtering capabilities 3. Data export/import functionality 4. Offline mode with local storage 5. Bulk operations for multiple records). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple form validation logics coexisting) 2. Function modules unrelated to CRUD operations (e.g., built-in games or unnecessary utilities) 3. Overcomplicated UI components that don't add value (e.g., excessive animations for simple operations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core CRUD functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating API layer/components/stores), proper TypeScript usage, component reusability, and build process configuration. Deduct 5 points if global state pollution is found or Svelte best practices are not followed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if Vite configuration is not optimized or build process has issues. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the CRUD interface follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Consistent form design and table layouts. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic form/table layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the CRUD operations provide smooth user experience: 1) Form submission feedback delay ≤ 100ms 2) Loading indicators for async operations 3) Smooth transitions between list/detail views 4) Clear visual feedback for successful/failed operations 5) Intuitive navigation between customer and user management. Deduct 5 points for each operation without proper feedback, 3 points for jarring transitions, and 5 points for confusing navigation patterns. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "medium"
}
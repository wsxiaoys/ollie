{
  "index": 1666,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration purposes. Help design a form management system, similar to those in low-code platforms.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core form builder functionality properly implemented?",
      "description": "Check if the code includes essential form components (inputs, checkboxes, selects, etc.) with proper data binding and validation. Form elements should have proper attributes including labels, placeholders, and accessible markup. Score 0 if the form builder core is missing, 5 if only basic elements are included, and 10 if a comprehensive component library with validation is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is drag-and-drop functionality for form construction implemented?",
      "description": "Evaluate whether the system includes intuitive drag-and-drop functionality for arranging form elements. This should include element positioning, nesting capabilities, and grid/layout management. Deduct 5 points if drag-and-drop is missing, 3 points if it's rudimentary without proper visual feedback. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is form data management and submission handling implemented?",
      "description": "Assess the implementation of form data management including state management, data validation, conditional logic, and submission handling. Look for features like form state persistence, API integration options, and error handling during submission. Deduct 5 points if validation is missing, 3 points if conditional logic is absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are form templates and saving/loading mechanisms provided?",
      "description": "Check if the system includes template management functionalities such as saving forms as templates, loading existing templates, and importing/exporting form configurations (JSON/XML). Deduct 5 points if export/import is missing, 3 points if there's no template library. Give 10 points if fully implemented with version control.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid form configurations, network failures during submission, browser compatibility issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-assisted form creation 2. Accessibility checker with recommendations 3. Multi-device preview mode). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar form components (e.g., multiple text input implementations) 2. Function modules unrelated to form management (e.g., unnecessary image galleries) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating form model/view/controller layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
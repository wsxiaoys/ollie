{
  "index": 696,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable and demonstrable. How would you design a program or app to conveniently input, save, and search animal information?",
  "checklist": [
    {
      "id": 0,
      "title": "Is the animal information data model properly designed?",
      "description": "Evaluate whether the code implements a comprehensive data model for animal information (properties like species, age, habitat, conservation status, etc.). Check if appropriate data types are used, if relationships between entities are properly defined, and if there's support for taxonomic hierarchy. Score 10 if the model is comprehensive with validation rules, 5 if basic but functional, 0 if severely lacking essential fields.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the input mechanism user-friendly and comprehensive?",
      "description": "Check if the code provides intuitive interfaces for data entry with field validation, auto-completion, and guided input. Assess if it handles different input types (text, numbers, images) and supports both quick entry and detailed information. Deduct 3 points if validation is missing, 3 points if the interface is cluttered, and 4 points if it lacks appropriate input controls for different data types.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the data persistence layer properly implemented?",
      "description": "Evaluate the data storage implementation (database, file system, cloud storage). Check if CRUD operations are complete, if there's proper error handling for storage failures, and if the solution includes data backup/recovery mechanisms. Award full 10 points if it includes transaction handling and data migration capabilities, 5 points if basic persistence works but lacks robustness, 0 if data isn't reliably saved.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the search functionality efficient and versatile?",
      "description": "Assess the search implementation for features like full-text search, filters, advanced search options, and performance optimization for large datasets. Check if it handles partial matches, phonetic similarity, and taxonomic relationships. Score 10 if it includes indexed search with multiple parameters and performance considerations, 5 if basic search works but with limitations, 0 if search capability is missing or non-functional.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid input, storage failures, network issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered species identification from images 2. Geolocation tracking for wildlife sightings 3. Data visualization for population trends). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple storage systems without clear purpose) 2. Function modules unrelated to animal information management 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/business logic/presentation layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast scrolling through animal lists, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "easy"
}
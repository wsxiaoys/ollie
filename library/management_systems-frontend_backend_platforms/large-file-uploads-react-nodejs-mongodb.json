{
  "index": 729,
  "question": "You are a code expert. Please utilize your professional knowledge to generate accurate, professional responses. Be sure to ensure that the code you generate is executable for display. Create a basic functionality for large file uploads combining React, Node.js, and MongoDB for data portability.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the client-side file chunking mechanism properly implemented?",
      "description": "Review whether the React code implements file chunking correctly, including optimal chunk size determination (typically 2-5MB), MD5/SHA hash calculation for file identification, and proper progress tracking. Check if the implementation handles large files (>1GB) without browser freezing. Score 0 if chunking is not implemented, 5 if basic chunking exists but with suboptimal performance, and 10 if all aspects are well-implemented with performance considerations.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the server-side chunk reception and assembly mechanism complete?",
      "description": "Evaluate whether the Node.js server properly handles chunk reception, validation, temporary storage, and final assembly. Check for concurrent chunk processing, validation of chunk order and integrity, and proper error handling during assembly. Deduct 5 points if chunk validation is missing, 3 points if no concurrent processing is implemented, and 2 points if temporary file management is inadequate. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the upload resume functionality implemented?",
      "description": "Check whether the code implements upload resumption after interruption by maintaining chunk state, implementing client-server negotiation to identify missing chunks, and providing recovery mechanisms. Verify that the solution works across page refreshes using local storage or IndexedDB. Deduct 5 points if state persistence is missing, 3 points if chunk verification is incomplete, and 2 points if the UI doesn't reflect resumable status. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the MongoDB integration for file metadata properly designed?",
      "description": "Assess whether the MongoDB schema design for file metadata is properly implemented, including file versioning support, efficient querying capabilities, and metadata extraction. Check for appropriate indexing strategies and data validation. Deduct 5 points if the schema design is overly simplistic, 3 points if no indexes are defined, and 2 points if there's no metadata extraction from uploaded files. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code handles common error scenarios such as network interruptions, server errors, disk space issues, malformed chunks, and duplicate uploads. Check for comprehensive error logging, user-friendly error messages, and graceful degradation. Code with strong robustness should effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time file processing/analysis during upload 2. Intelligent upload speed optimization based on network conditions 3. Client-side encryption 4. Advanced file type detection/validation). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file hash calculation methods) 2. Function modules unrelated to file upload (e.g., excessive analytics) 3. Performance-impacting features (e.g., unnecessary re-renders in React components). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating upload logic/UI/API layers), test coverage for critical functions (especially chunk processing), and build process automation. Deduct 5 points if global state management is poorly implemented; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if environment configuration is hardcoded. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the upload interface follows modern design principles: 1) Clear visual progress indication with percentage and remaining time 2) Proper layout for file information and controls 3) Responsive design that works on different screen sizes. Deduct 3 points for each cluttered visual element, 5 points for confusing progress indicators, and 5 points for non-responsive layouts. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the upload experience conforms to user expectations: 1) Immediate feedback when files are selected 2) Smooth progress updates without UI jank 3) Clear status changes for upload states (queued, uploading, completed, failed). Deduct 5 points for laggy UI during uploads, 3 points for misleading progress indicators, and 5 points for missing upload status notifications. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
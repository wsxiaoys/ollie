{
  "index": 1062,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration. Write a user login window program where a successful login verification leads to a window transition.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the user login form properly implemented?",
      "description": "Check if the login form has necessary fields (username/email and password), proper labels, and input validation. The form should prevent submission with empty fields and validate input formats (e.g., email pattern). Score 0 if form is missing, 5 if basic form exists without validation, 10 if complete with client-side validation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the authentication logic correctly implemented?",
      "description": "Evaluate if the authentication process is properly coded with credential verification (even if mocked). Check for secure password handling (e.g., hashing if applicable). The authentication should return clear success/failure responses. Deduct 5 points if credentials are hardcoded, 3 points if there's no error handling. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the window transition implemented and smooth?",
      "description": "Verify that a successful login triggers a transition to a new window/screen. Assess if the transition uses proper animation (fade/slide) and follows UI/UX best practices. Score 0 if no transition exists, 5 if basic abrupt transition is implemented, 10 if the transition is smooth with appropriate visual feedback.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is session management properly handled?",
      "description": "Check whether the code implements session handling after successful login (e.g., tokens, cookies, localStorage). Evaluate if the session persists appropriately and includes timeout/expiry mechanisms. Deduct 5 points if no session management exists, 3 points if session security measures are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network errors, invalid input, login failures) and provide friendly error messages. Code with strong robustness should handle these edge cases effectively, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Remember me functionality 2. Password strength meter 3. Multi-factor authentication 4. Login history display). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple validation methods) 2. Function modules unrelated to login (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/authentication logic), proper error handling, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during transitions, and 5 points for hard-to-find login button. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "easy"
}
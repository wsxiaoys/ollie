{
  "index": 601,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Please write code to implement a project management system where team members can create projects, assign tasks, and update task progress; project managers can view the overall progress of all projects, generate project reports, and manage team members.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core project management functionality fully implemented?",
      "description": "Evaluate whether the code implements essential project management features: project creation, task assignment, and progress tracking. Check if the data model properly represents projects, tasks, and users with appropriate relationships. Score 0 if the core functionality is missing, 5 if only basic features are implemented without proper relationships, and 10 if the system has a complete implementation with validation and business rules.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the task management system properly designed?",
      "description": "Review whether the task management system includes status tracking, priority assignment, dependency management, and deadline handling. Check if tasks can be properly assigned to team members with notifications. Deduct 3 points if dependency management is missing, 3 points if there's no deadline tracking mechanism, and 3 points if priority assignment is not implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the project manager features properly implemented?",
      "description": "Assess the implementation of project manager-specific features like overall progress tracking, report generation, and team management. Verify that managers can view consolidated dashboards showing project statuses, generate various reports (e.g., burndown charts, completion rates), and manage team member assignments and roles. Deduct 3 points if dashboard views are missing, 4 points if reporting functionality is absent, and 3 points if team management features are incomplete. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the user authentication and authorization system properly implemented?",
      "description": "Examine whether the system includes proper authentication (login/logout) and role-based authorization (differentiating between regular team members and project managers). Check for security best practices like password hashing, protection against common vulnerabilities, and proper session management. Deduct 5 points if role-based access control is missing, 3 points if authentication lacks security features, and 2 points if session management is insecure. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, database connection errors, concurrent edits, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should implement proper error handling, input validation, and transaction management. If the robustness is excellent, give 10 points. If it's average, give 5 points, and if no error handling exists, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Automated task assignment based on workload 2. Real-time collaboration features 3. Interactive visualizations of project dependencies). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to track progress) 2. Function modules unrelated to project management (e.g., built-in chat system if not essential) 3. Overly complex features that add little value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating business logic/data access/presentation layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast data updates, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "medium"
}
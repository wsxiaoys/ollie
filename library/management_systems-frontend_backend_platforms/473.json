{
  "index": 473,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Develop a film and TV crew announcement management system that includes weather API displays for shooting locations and automatic costume-role associations with scenes. Include daily progress comparison with planned Gantt charts, with delayed scenes displaying impact factor tags (weather/actors/etc.).",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core film and TV crew announcement management system fully implemented?",
      "description": "Review whether the code accurately implements CRUD operations for crew announcements, schedule management, and role assignments. Check if the system supports different user roles (director, producer, crew members) with appropriate access controls. Score 0 if the core announcement system is not implemented, 5 if only basic announcement functions exist, and 10 if comprehensive management features are included with proper data validation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the weather API integration properly implemented?",
      "description": "Evaluate whether the weather API is correctly integrated with location-based data, showing current and forecasted conditions for shooting locations. Check if the code handles API rate limits, connection failures, and data caching. The implementation should include visual indicators for weather conditions affecting shooting. Deduct 5 points if the API integration is basic without error handling, 3 points if weather data is not linked to shooting locations properly. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the costume-role association with scenes functionality complete?",
      "description": "Check if the system maintains a database of costumes and characters with proper relationships to scenes. The code should allow for automatic assignment based on scene requirements and handle conflicts. Verify if costume tracking includes availability status and maintenance schedules. Deduct 5 points if associations are manual only, 3 points if costume tracking lacks detail. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the progress comparison with Gantt charts and impact factor tagging implemented effectively?",
      "description": "Review whether the code implements visual Gantt chart comparisons between planned and actual progress, with dynamic updates based on daily reports. Check if delayed scenes are properly tagged with impact factors (weather/actors/logistics/equipment) and if these tags are programmatically determined based on system data. Deduct 5 points if Gantt visualization is static, 5 points if impact factors are not automatically associated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as API failures, network interruptions, concurrent user edits, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time notifications with priority system 2. AI-based schedule optimization suggestions 3. Visual weather impact projection). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple notification systems coexisting) 2. Function modules unrelated to film crew management (e.g., a built-in game for waiting times) 3. Fancy effects that affect performance (e.g., unnecessary animations in critical workflow screens). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating business logic/UI/data access layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
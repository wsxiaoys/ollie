{
  "index": 406,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Try to ensure that the generated code is executable for demonstration. Create an online personnel information collection form based on the Excel template. In the Excel sheet, items named as \"Table 1\", \"Table 2\"... are the forms that need to be collected. Items marked with an asterisk are required fields. Some questions with dropdown validation in Excel should also provide options in the collection form.\n\nThe online collection form is divided into [Server side] and [Form-filling side]. The [Server side] analyzes the uploaded Excel template to generate online collection form questions and creates a QR code for the online collection form. Employees scan the code with their phones to enter the [Form-filling side] to complete the form. After filling everything out, they click submit, and the information is automatically summarized on the [Server side]. The [Server side] displays \"* people have submitted\". After all personnel collection is completed, the [Server side] clicks to summarize and generate an Excel file containing all personnel information in the same format as the template. The [Server side] mobile phone enables a hotspot, and other people's mobile phones connect to the [Server side] phone's hotspot for network transmission. Generate this using HTML.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Excel template parsing function fully implemented?",
      "description": "Review whether the code accurately parses Excel files through JavaScript libraries (such as SheetJS/xlsx), extracts form structures including 'Table 1', 'Table 2' naming patterns, identifies required fields marked with asterisks, and recognizes dropdown validation rules. Score 0 if template parsing is not implemented, 5 if only basic sheet reading is implemented, and 10 if all Excel features (required fields, dropdowns, table structures) are fully parsed and converted to form schema.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the QR code generation and mobile hotspot networking implemented?",
      "description": "Check whether QR code generation is implemented using libraries like qrcode.js to create scannable links for the collection form. Verify if the system provides clear instructions for mobile hotspot setup and local network communication. Deduct 5 points if QR codes don't contain proper form URLs, and 3 points if hotspot networking guidance is missing or unclear. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the dual-interface system (Server side & Form-filling side) properly designed?",
      "description": "Evaluate whether the code implements distinct interfaces for server management and mobile form filling. Server side should display submission count, template upload, and summary generation. Form-filling side should be mobile-optimized with touch-friendly inputs. Deduct 5 points if interfaces aren't clearly separated, and 3 points if mobile responsiveness is poor. Check real-time submission counter updates. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the data collection and Excel export workflow complete?",
      "description": "Check whether the code includes complete data flow: form submission → server storage → real-time counter updates → final Excel generation matching original template format. Deduct 5 points if submitted data isn't properly stored or displayed, and 3 points if Excel export doesn't maintain original formatting. Verify that the summary function generates downloadable Excel files. Give 10 points if fully implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted Excel files, network interruption, invalid form data, duplicate submissions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Progress visualization showing completion status 2. Form field validation with real-time feedback 3. Offline form caching for poor network conditions 4. Batch template processing). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple Excel parsing libraries coexisting) 2. Function modules unrelated to form collection (e.g., built-in file manager) 3. Fancy effects that affect mobile performance (e.g., heavy animations on form pages). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating Excel parsing/form generation/data storage layers), error handling coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no dependency management or build process is provided. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Mobile-first responsive design. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for poor mobile interface layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Form input feedback delay ≤ 100ms 2) Page transitions controlled between 300-500ms 3) Clear visual focus guidance for form fields 4) Touch-friendly button sizes (≥44px) for mobile. Deduct 5 points for each operation without feedback, 3 points for laggy form interactions, and 5 points for hard-to-tap mobile interface elements. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "medium"
}
{
  "index": 840,
  "question": "You are a code expert, please use your professional knowledge to generate accurate, professional responses. Try to ensure the generated code is executable for demonstration. I want to create a program for performance evaluation that allows users to view evaluation criteria categories with their serial numbers and names, where evaluatees can fill in bonus items and self-assess their scores. The data should then be exported or uploaded directly to evaluators for verification and scoring. Evaluations occur quarterly, and the system should be able to display bonus items from previous quarters as needed, with automatic flagging of repeated work content that receives multiple bonuses. The system should display current quarter scores and rankings, as well as cumulative annual scores and rankings. Please recommend a suitable programming language and provide reference code.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the evaluation criteria display system fully implemented?",
      "description": "Review whether the code accurately implements the display of evaluation criteria categories with serial numbers and names. Check if the interface allows users to browse and understand the criteria structure clearly. Score 0 if the criteria display is not implemented, 5 if only basic display is implemented without proper organization, and 10 if the criteria are well-structured with intuitive navigation and visual hierarchy.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the self-assessment functionality completely implemented?",
      "description": "Evaluate whether the code implements the self-assessment functionality for evaluatees to fill in bonus items and self-assess their scores. Check if users can easily add new bonus items, provide descriptions, and assign self-assessment scores. Deduct 3 points if the interface is not intuitive, 4 points if validation is missing for score ranges, and 5 points if there's no way to save draft assessments. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the system implement data export and submission to evaluators?",
      "description": "Check whether the system allows for exporting assessment data and/or direct submission to evaluators. The solution should include a secure mechanism for data transfer and verification by evaluators. Deduct 5 points if only one method (export or direct upload) is implemented, 3 points if the data format is not standardized, and 5 points if there's no confirmation mechanism for successful submission. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the historical data view and duplicate bonus detection implemented?",
      "description": "Evaluate whether the system properly displays bonus items from previous quarters and automatically flags repeated work content that receives multiple bonuses. Check if the historical view allows for easy comparison between quarters. Deduct 5 points if the historical view is missing, 5 points if duplicate detection is not implemented, and 3 points if the flagging mechanism isn't visually clear. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid input data, network interruptions, concurrent user operations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visualization of score trends over time 2. Automated recommendations for improvement based on evaluation patterns 3. Real-time comparative performance metrics with anonymized peer data). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems coexisting) 2. Function modules unrelated to performance evaluation (e.g., built-in games or entertainment features) 3. Fancy effects that affect performance (e.g., unnecessary animations or visualizations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/logic/UI layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast data loading, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
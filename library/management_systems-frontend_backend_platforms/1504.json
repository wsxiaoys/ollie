{
  "index": 1504,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and expert responses. Make sure the code you provide is executable and can be demonstrated. I want to design a scheduling application mini-program that can support multiple people and multiple types of shifts. Please provide the HTML implementation and instructions on how to use it.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the multi-person schedule management system fully implemented?",
      "description": "Review whether the code implements a complete scheduling system that allows adding, editing, and deleting multiple users and shift types. Check if it includes user management features (adding/removing users, assigning roles/permissions). Score 0 if core scheduling functionality is missing, 5 if only basic scheduling is implemented, and 10 if it includes comprehensive user management with different permission levels.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are multiple shift types supported with proper visualization?",
      "description": "Evaluate whether the code supports defining and displaying various shift types (morning/evening/night shifts, on-call, vacation, etc.) with distinct visual indicators (colors, icons, patterns). Check if shifts can be customized with properties like duration, priority, and constraints. Deduct 5 points if only fixed shift types are available, 3 points if visual differentiation is poor. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is conflict detection and resolution functionality implemented?",
      "description": "Check if the system detects scheduling conflicts (double-booking, insufficient rest periods, exceeding working hour limits) and provides resolution methods. Verify if there are warnings for potential issues (approaching overtime, uneven distribution). Deduct 5 points if conflict detection is missing, 3 points if only basic detection without resolution options is implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the calendar view implementation interactive and user-friendly?",
      "description": "Assess whether the calendar supports multiple views (daily, weekly, monthly) with drag-and-drop functionality for schedule adjustments. Check if it includes features like zooming, filtering, and aggregated views. Deduct 5 points if only one view is available, 3 points if interactive features are limited. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid date inputs, overlapping shifts, concurrent schedule modifications, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-assisted schedule optimization 2. Automatic fair distribution of undesirable shifts 3. Mobile notification system for schedule changes 4. Integration with external calendar systems). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple calendar libraries used simultaneously) 2. Function modules unrelated to scheduling (e.g., built-in messaging system that's not scheduling-related) 3. Fancy effects that affect performance (e.g., excessive animations or visual effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI components/state management/data services), use of appropriate design patterns, code reusability, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's tight coupling between components. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching with clear shift type differentiation 2) Proper layout spacing for calendar cells and control panels 3) Professional typography system with adequate text hierarchy. Deduct 3 points for each crowded visual element, 5 points for conflicting or confusing color schemes, and 5 points for poor information hierarchy. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Immediate visual feedback when adding/editing shifts 2) Smooth transitions between calendar views 3) Intuitive drag-and-drop interactions with appropriate animations. Deduct 5 points for each operation without feedback, 3 points for laggy transitions during view changes, and 5 points for unintuitive scheduling controls. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
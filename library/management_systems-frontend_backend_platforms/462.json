{
  "index": 462,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code in your demonstration. Implement a package management system for a parcel collection point where recipients can input their collection code on a front-end page to query package information (including tracking number, courier company, and collection status). Collection point staff (username: worker, password: express123) can log into the backend to add, delete and modify package information, and process collection operations.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the recipient search/query functionality fully implemented?",
      "description": "Review whether the code implements a complete package search system using collection codes. Check if the query interface is intuitive, provides real-time feedback, and includes error handling for invalid codes. Score 0 if the core search functionality is missing, 5 if basic lookup is implemented but lacks validation or proper error handling, and 10 if the implementation includes comprehensive validation, error states, and clear user feedback.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the staff authentication system properly implemented?",
      "description": "Evaluate whether the login system for staff (username: worker, password: express123) includes proper authentication mechanisms. Check for token-based authentication, session management, password hashing, CSRF protection, and secure storage. Deduct 3 points if passwords are stored in plain text, 3 points if there's no session timeout, and 4 points if authentication can be easily bypassed. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the package CRUD functionality complete for staff?",
      "description": "Assess whether staff can perform all required operations (Create, Read, Update, Delete) on package information. Check for form validation, proper data structure for package information (tracking number, courier company, collection status), and intuitive interfaces for each operation. Deduct 3 points for each missing operation, and 2 points if batch operations are not supported when appropriate. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the package collection process workflow implemented?",
      "description": "Review whether the code includes a complete workflow for package collection, including status updates, timestamps for collection, validation of collection codes, and notification mechanisms. Check if the system maintains an audit trail of collections. Deduct 5 points if status updates aren't atomic operations, 3 points if there's no collection timestamp recording, and 2 points if there's no collection confirmation step. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, network interruptions, concurrent operations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time package tracking integration 2. SMS/email notifications to recipients 3. QR code generation for contactless collection). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to search packages) 2. Function modules unrelated to package management (e.g., built-in games for users waiting) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating backend/frontend, using MVC or similar patterns), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "easy"
}
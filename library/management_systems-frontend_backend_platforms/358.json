{
  "index": 358,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Create a web module that includes factory area dropdown buttons, department filter keys, cost code filter keys, date range filter keys, and the ability to import security personnel, security unit prices, annual/monthly/daily security expenses, and annual/monthly/daily security budget.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the factory area dropdown implementation complete?",
      "description": "Check whether the code properly implements the factory area dropdown with proper data structure, event handling, and state management. The dropdown should be populated dynamically from a data source, have proper selection handling, and trigger appropriate filter actions. Deduct 5 points if the dropdown is static/hardcoded, 3 points if it lacks visual feedback on selection, and 3 points if it doesn't properly trigger filtering actions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all required filter components implemented?",
      "description": "Evaluate the implementation of the department filter, cost code filter, and date range filter components. Each filter should have appropriate UI controls (e.g., multi-select checkboxes for departments, dropdown or search for cost codes, and date pickers for date range). Each missing filter deducts 4 points, incomplete implementation deducts 2 points per filter. Date range filter must support both single date and range selection. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the data import functionality for security personnel properly implemented?",
      "description": "Review whether the code supports importing security personnel data through CSV/Excel file upload or manual entry form. Check for validation of input data (e.g., name format, ID validation, role assignment), data transformation, and storage handling. Deduct 5 points if there's no data validation, 3 points if the import process lacks error handling or feedback, and 3 points if there's no preview before final import. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are the security expense calculations and budget comparison features implemented?",
      "description": "Check if the module can correctly calculate security expenses at annual/monthly/daily levels based on personnel data and unit prices, and compare them with the corresponding budget values. Verify the calculation logic for different time periods. Deduct 4 points if calculations are incorrect, 3 points if comparison visualization is missing, and 3 points if there's no variance analysis or highlighting of over-budget scenarios. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid data imports, network errors during data fetching, invalid filter combinations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dashboard visualization with charts showing expense trends 2. Automatic alerts for budget overruns 3. Personnel allocation optimization suggestions). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar filters or calculations 2. Function modules unrelated to security management/budgeting 3. Fancy effects that affect performance or distract from core functionality. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/UI/calculation logic), component reusability, state management approach, and build process. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated or dependencies are poorly managed. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Filter application feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance when navigating between filter and reporting views. Deduct 5 points for each operation without feedback, 3 points for laggy transitions during filter updates, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
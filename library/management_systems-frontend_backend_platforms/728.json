{
  "index": 728,
  "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code for demonstration. Create an electronic medical record editor using JavaScript, HTML, CSS, and Markdown.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core electronic medical record editing functionality implemented?",
      "description": "Review whether the code properly implements a Markdown editor with medical record-specific features such as structured templates for patient information, medical history, diagnosis, treatment plans, and follow-ups. Score 0 if basic editing is not implemented, 5 if only simple text editing is available, and 10 if it includes specialized medical formatting options and templates.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the implementation include proper data structure for medical records?",
      "description": "Check if the code includes appropriate data structures for storing and managing medical record components (patient demographics, vital signs, medications, allergies, lab results, etc.). Evaluate if the structure allows for proper organization, quick retrieval, and maintaining relationships between different medical data elements. Deduct 5 points if the data structure is too simplistic, and 3 points if it doesn't support proper medical record organization. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is data validation and medical terminology support implemented?",
      "description": "Assess whether the editor validates medical-specific data (e.g., vital sign ranges, drug dosages, ICD-10 codes) and provides medical terminology assistance (autocomplete, standardized terms). Check if there's integration with or simulation of medical coding systems. Deduct 5 points if basic validation is missing, and 3 points if there's no medical terminology support. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation address medical record security and privacy?",
      "description": "Examine if the code includes considerations for HIPAA compliance, such as user authentication, access controls, audit logging, data encryption, or session timeouts. Check if there are warnings about PHI handling. Deduct 5 points if no security features are implemented, and 3 points if only basic measures are present. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid medical data input, browser compatibility issues, network interruptions during saving, etc.) and provides friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the medical record experience (e.g., 1. Voice-to-text for dictation 2. Automated coding assistance 3. Interactive anatomical diagrams 4. Decision support alerts). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple save mechanisms with overlapping functionality) 2. Function modules unrelated to medical record keeping (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., unnecessary animations that slow down critical medical data entry). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/data model/validation logic), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional medical software standards?",
      "description": "Evaluate whether the overall design follows healthcare UI principles: 1) Neutral, calming color scheme with clear visual hierarchy 2) Proper layout with distinct sections for different medical record components 3) Professional typography with excellent readability (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for cluttered layouts, 5 points for inappropriate color schemes in a medical context, and 5 points for poor information hierarchy. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction optimized for clinical workflow?",
      "description": "Judge whether the UI interactions support efficient clinical documentation: 1) Quick access to common templates and terms 2) Minimal clicks for frequent actions (≤ 3 clicks) 3) Clear visual feedback for saved vs. unsaved data. Deduct 5 points for workflows requiring excessive navigation, 3 points for slow response times (> 300ms) during data entry, and 5 points for missing autosave or data recovery features. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "medium"
}
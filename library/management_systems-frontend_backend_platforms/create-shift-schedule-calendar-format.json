{
  "index": 1704,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration purposes. I want to create a shift schedule based on a calendar format, and I would like you to help me with the design.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the calendar base structure properly implemented?",
      "description": "Review whether the code accurately implements a calendar view with proper month/week navigation, date selection, and display of current/selected dates. Score 0 if the calendar structure is missing, 5 if basic calendar display is implemented, and 10 if the calendar includes advanced features like multi-view options (month/week/day) and proper date handling across month boundaries.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the shift scheduling functionality fully implemented?",
      "description": "Evaluate whether the code allows for creating, editing, and deleting shifts on the calendar. Check if the implementation supports multiple shifts per day, shift categorization (morning/afternoon/night), and proper validation for overlapping shifts. Score 0 if shift scheduling is not implemented, 5 if basic scheduling is available, and 10 if comprehensive shift management with conflict resolution is provided.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the employee/resource allocation system implemented?",
      "description": "Check if the code includes functionality to assign employees/resources to shifts, manage employee availability, and handle shift swapping or reassignment. Deduct 5 points if employee management is missing, and 3 points if conflict detection for employee scheduling is not implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there data persistence and import/export functionality?",
      "description": "Assess whether the schedule can be saved (local storage or backend), and if import/export features are available (CSV, iCal, etc.). Check if the system handles data recovery in case of browser crashes. Deduct 5 points if no persistence mechanism exists, and 3 points if import/export features are missing. Give 10 points if fully implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid date inputs, overlapping shifts, browser timezone differences, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Drag-and-drop shift assignment 2. Automated shift distribution algorithms 3. Mobile responsiveness with touch gestures 4. Visual indicators for shift coverage/understaffing). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple date pickers or calendar views) 2. Function modules unrelated to scheduling (e.g., unnecessary analytics that complicate the UI) 3. Fancy effects that affect performance (e.g., excessive animations when switching views). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating calendar logic/scheduling logic/UI components), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors, with clear differentiation between shift types) 2) Proper layout spacing (element spacing follows the 8px multiple principle, with clear cell boundaries) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times, with proper hierarchy for calendar elements). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms for shift creation/editing 2) Transition animation duration controlled between 300-500ms for calendar navigation 3) Clear visual focus guidance for current selection. Deduct 5 points for each operation without feedback, 3 points for visual after-images during calendar navigation, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
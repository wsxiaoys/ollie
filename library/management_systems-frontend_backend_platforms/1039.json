{
  "index": 1039,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Write a computer program for managing the inventory of low-voltage engineering equipment through QR code generation and Excel import/export functionality.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the QR code generation functionality fully implemented?",
      "description": "Review whether the code accurately generates QR codes for equipment items with proper error handling and configuration options. Check if the QR codes contain essential inventory information (ID, name, location, status) and if the implementation supports different QR code formats and densities. Score 0 if QR functionality is absent, 5 if basic QR generation exists but lacks configuration options, and 10 if the implementation is robust with customization features.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the Excel import/export functionality properly implemented?",
      "description": "Evaluate the implementation of Excel file handling. The code should support bidirectional data transfer (import and export), handle various Excel formats (.xlsx, .xls, .csv), and include validation mechanisms for imported data. Deduct 3 points if only one direction is supported, 3 points if data validation is missing, and 2 points if the code doesn't handle Excel formatting properly. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the inventory data model well-designed and implemented?",
      "description": "Check whether the data model covers essential equipment attributes (ID, name, type, location, purchase date, maintenance history, current status). Assess whether the model supports relationships between items (e.g., components of larger equipment) and includes proper data validation. Deduct 3 points for missing critical attributes, 3 points for inadequate validation, and 4 points if the model doesn't support relationships between inventory items. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the integration between QR code scanning and inventory management seamless?",
      "description": "Analyze how QR code scanning integrates with the inventory system. The code should handle scan events, update inventory records accordingly, and provide error handling for failed scans or unrecognized codes. Deduct 3 points if scan processing is unreliable, 3 points if the update mechanism isn't transactional, and 4 points if there's no scan history or audit trail. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code handles exceptions appropriately (file not found, corrupted Excel files, invalid QR codes, database connection issues). Check for input validation, security measures against injection attacks, and graceful degradation during failures. Code with strong robustness should provide meaningful error messages and recovery mechanisms, giving 10 points. If robustness is average, give 5 points, and if exceptions aren't handled properly, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the inventory management experience (e.g., 1. Real-time equipment status visualization 2. Automated maintenance scheduling based on usage patterns 3. Mobile responsive design for field operations). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Duplicate code for similar functions (e.g., multiple Excel parsing implementations) 2. Function modules unrelated to inventory management (e.g., built-in email client) 3. Excessive features that negatively impact performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (separation of concerns between UI, business logic, and data access layers), appropriate design patterns, unit test coverage, and documentation quality. Deduct 3 points if global state pollution is found, 3 points if the code duplication rate exceeds 20%, and 4 points if documentation is inadequate or missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the UI follows professional design principles: 1) Clean and consistent layout with proper alignment 2) Appropriate color scheme that enhances readability 3) Clear visual hierarchy emphasizing important elements. Deduct 3 points for cluttered interfaces, 3 points for poor contrast affecting readability, and 4 points for inconsistent styling across screens. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the user workflow intuitive and efficient?",
      "description": "Assess whether the application provides an intuitive workflow for inventory management tasks: 1) Logical task progression with minimal clicks 2) Clear feedback for user actions within 100ms 3) Efficient batch operations for common tasks. Deduct 3 points for each workflow requiring excessive steps, 3 points for missing visual feedback on operations, and 4 points if common inventory tasks require complex navigation. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "medium"
}
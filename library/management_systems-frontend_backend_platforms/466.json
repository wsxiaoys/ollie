{
  "index": 466,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration. ======== ROLE ========\nYou are an experienced code expert. You are given a software development requirement description, and you need to generate project code according to this requirement. Strictly follow the rules to help users generate complete project code with simple and easy-to-understand comments, without outputting anything else.\n\n======== OUTPUT RULES ========\n1. You will always generate complete, runnable project code. Please ensure that the project is fully executable\n2. Ensure that all code files you output are complete, do not omit any code\n3. Carefully review and check all code before the final output, evaluating its executability. If the code cannot be executed or contains errors, it needs to be regenerated\n4. If the requirements involve external API access or the need to use user data (images, videos, audio, etc.), please provide simulated data\n\n======== PROJECT REQUIREMENTS ========\nImplement a murder mystery game material management system that supports uploading character scripts and clue card images and associating them with plot nodes. Provide clue distribution control functions (unlocked according to game progress), including player-side APP data synchronization interface (displaying obtained clues).",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core data model structure for the mystery game management system properly implemented?",
      "description": "Evaluate whether the data model includes essential entities: Game/Case, Characters, Plot Nodes, Clues, and their relationships. The model should support hierarchical relationships between these entities. Score 0 if core entities are missing, 5 if basic relationships exist but lack necessary fields, and 10 if the model is comprehensive with proper normalization and indexing for efficient queries.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the character script management functionality complete?",
      "description": "Check if the system allows uploading, editing, versioning, and associating character scripts to specific plot nodes. The implementation should include script formatting, character-specific views, and timeline organization. Deduct 3 points if versioning is missing, 4 points if there's no ability to associate scripts with plot points, and 3 points if formatting options are limited. Full score requires conflict resolution for collaborative editing.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the clue card image management system properly implemented?",
      "description": "Assess whether the system handles image uploads with proper validation (file types, size limits), provides image manipulation features (cropping, resizing), includes metadata management, and allows tagging/categorization of clues. Deduct 3 points for missing image validation, 3 points for lack of preview functionality, and 4 points if there's no option to associate images with specific plot points or characters.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the plot node progression system and clue distribution logic implemented?",
      "description": "Evaluate the implementation of conditional unlocking of clues based on game progress. The system should include a rule engine for triggering clue availability, dependencies between clues, and time-based or action-based unlock mechanisms. Deduct 5 points if conditions can't be customized, 3 points if there's no visual timeline/flowchart representation, and 2 points if testing/simulation tools for progression are missing.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid uploads, concurrent edits, network interruption, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-assisted mystery plot generation 2. Real-time collaborative game master tools 3. Voice narration for clues 4. Augmented reality clue visualization). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple image upload systems coexisting) 2. Function modules unrelated to mystery game management (e.g., a built-in social network) 3. Fancy effects that affect performance (e.g., unnecessary animations in admin panels). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data model/controller/view layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the player-side APP data synchronization interface well-implemented?",
      "description": "Judge whether the synchronization mechanism meets requirements: 1) REST/GraphQL API for clue retrieval with proper authentication 2) Real-time updates via WebSockets/polling with ≤ 2s delay 3) Offline mode with local storage and conflict resolution when reconnecting. Deduct 4 points if authentication is weak or missing, 3 points if synchronization is only one-way, and 3 points if there's no offline capability. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
{
  "index": 1557,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration purposes. Create a cloud hospital system design with functionality, and generate the related code using HTML, CSS, and JavaScript.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core hospital management system functionality implemented?",
      "description": "Review whether the code accurately implements essential hospital system features such as patient registration, appointment scheduling, doctor availability, medical records management, and billing. Score 0 if core functionality is missing, 5 if only basic features are implemented, and 10 if a comprehensive system with role-based access control (patient, doctor, admin) is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the cloud-based architecture properly designed?",
      "description": "Evaluate whether the implementation includes proper cloud design patterns such as data synchronization, offline functionality, real-time updates, and secure data storage. Check for REST API integration points or mock services for backend communication. Deduct 5 points if there's no clear separation between frontend and backend concerns, and 3 points if data persistence strategy is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the patient-doctor interaction workflow fully implemented?",
      "description": "Assess whether the system properly handles the complete patient journey from registration to consultation to follow-up. Check for implementation of appointment scheduling, virtual consultation interfaces, prescription management, and medical history access. Deduct 5 points for missing key workflow elements, 3 points for illogical user flows. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the healthcare data visualization and reporting implemented?",
      "description": "Review if the system includes visualizations for medical data (charts for patient vitals, health trends), administrative dashboards, and reporting capabilities. Score 0 if visualization is missing, 5 if basic charts are present, and 10 if comprehensive, interactive dashboards with filtering and export functionality are implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (invalid form submissions, network errors, authentication failures, etc.) and provide friendly error messages or recovery mechanisms. Code with strong robustness should be able to effectively handle edge cases and prevent data corruption, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered symptom checker 2. Real-time translation for international patients 3. Integrated telehealth video system 4. Smart health reminders). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple user registration flows) 2. Function modules unrelated to healthcare (e.g., a built-in game for waiting room) 3. Fancy effects that affect performance (e.g., unnecessary animations on critical healthcare information). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (separation of concerns between patient, doctor, and admin modules), code organization, reusable components, and proper event handling. Deduct 5 points if global state management is chaotic or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if form validation and security practices are poor. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional healthcare design standards?",
      "description": "Evaluate whether the design follows healthcare UI/UX principles: 1) Accessible color scheme with sufficient contrast ratios 2) Clean, organized layout with clear information hierarchy 3) Properly sized typography for medical information (body font size ≥ 14px, critical information ≥ 16px). Deduct 3 points for cluttered interfaces, 5 points for poor information prioritization, and 5 points for accessibility issues. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and appropriate for a healthcare context?",
      "description": "Judge whether the interactions consider healthcare user needs: 1) Critical alerts with appropriate urgency 2) Simple navigation for elderly or impaired users 3) Clear confirmation for important actions like appointment booking or medication requests. Deduct 5 points for confusing navigation, 3 points for distracting animations during critical tasks, and 5 points for requiring excessive clicks for common healthcare tasks. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "medium"
}
{
  "index": 1329,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be careful to ensure that the code you generate is executable and can be demonstrated. Create a WeChat Mini Program that functions as a library management system.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core library management functionality fully implemented?",
      "description": "Review whether the code implements essential library functions including book cataloging, user management, borrowing/returning processes, and search functionality. Score 0 if core functionality is missing, 5 if only basic operations are implemented, and 10 if the system includes advanced features like reservation, fine calculation, and due date notifications.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the Mini Program architecture properly structured for WeChat environment?",
      "description": "Check whether the code follows WeChat Mini Program architecture conventions with appropriate page structure (WXML, WXSS, JS, JSON files), correct App and Page lifecycle management, and proper use of WeChat APIs. Deduct 5 points if the project structure doesn't follow WeChat standards, 3 points if lifecycle events are improperly handled. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the data persistence and synchronization mechanism properly implemented?",
      "description": "Evaluate whether the code utilizes appropriate storage methods (cloud database, local storage, caching) for different data requirements. Verify if data synchronization between local and cloud is correctly implemented with conflict resolution strategies. Deduct 5 points if offline capability is missing, 3 points if data validation is inadequate. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the WeChat user authentication and authorization properly integrated?",
      "description": "Assess implementation of WeChat login, OpenID usage, and proper permission handling for user information access. Check if the application handles different user roles (admin, librarian, regular user) correctly. Deduct 5 points for insecure authentication, 3 points for missing role-based access control. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network interruption, invalid input, missing book information, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Book recommendation based on borrowing history 2. Barcode/QR code scanning for quick checkout 3. Social sharing of reading lists). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple user profile systems coexisting) 2. Function modules unrelated to library management (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/service/UI layers), component reusability, and code maintainability. Deduct 5 points if global state is poorly managed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if naming conventions are inconsistent or unclear. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows WeChat design language and principles: 1) Consistent with WeChat UI components and style 2) Proper layout spacing and information hierarchy 3) Professional typography with appropriate font sizes. Deduct 3 points for inconsistent UI elements, 5 points for cluttered information layout, and 5 points for poor readability. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to WeChat Mini Program standards and user expectations: 1) Responsive touch feedback 2) Smooth page transitions and loading states 3) Clear visual indicators for system status. Deduct 5 points for laggy interactions, 3 points for missing loading indicators during data fetching, and 5 points for confusing navigation patterns. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "medium"
}
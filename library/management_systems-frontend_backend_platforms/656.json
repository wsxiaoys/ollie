{
  "index": 656,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration whenever possible. \n\n======== Role ========\nYou are an experienced code expert. You're given a software development requirement description and asked to generate project code based on these requirements. Strictly follow the rules to help users generate complete project code with simple, easy-to-understand comments, and don't output anything else.\n\n======== Output Rules ========\n1. Always generate complete, runnable project code, ensuring the project is fully executable\n2. Ensure all code files you output are complete, don't omit any code\n3. Carefully review and check all code before final output, evaluating its executability. If the code cannot be executed or contains errors, regenerate it\n4. If the requirements involve external API access or need to use user data (images, videos, audio, etc.), please provide mock data\n\n======== Project Requirements Description ========\nPlease write a meeting room reservation system. Users can select meeting rooms, dates, and time slots through the front-end interface. If a meeting room has already been reserved, the system needs to update status in real-time and remind users to select another time. Administrators can view all reservation records through the back-end interface and modify or cancel reservations.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the meeting room reservation interface fully implemented?",
      "description": "Review whether the code accurately implements the room selection, date picker, and time slot selection components through HTML/CSS/JavaScript. Check if it includes visual indicators for available vs. reserved slots, interactive selection functionality, and form validation for booking details. Score 0 if the core reservation UI is not implemented, 5 if only basic selection is available, and 10 if complete with validation and user feedback.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the real-time status update mechanism implemented?",
      "description": "Evaluate whether the system includes real-time updates when meeting rooms become reserved by other users, either through WebSockets, polling, or other event-driven mechanisms. Check if the UI immediately reflects changes and provides clear notifications to users when their selected slot becomes unavailable. Deduct 5 points if updates require page refresh, 3 points if notifications are unclear. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the administrator backend interface complete?",
      "description": "Check if the admin interface includes comprehensive views for all reservations with filtering/sorting capabilities, and provides functionality to modify or cancel any reservation. Evaluate whether it includes user management, reporting features, and audit logs. Deduct 5 points if modification functionality is missing, 3 points if filtering/sorting is limited, and 5 points if the interface lacks responsive design. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the data persistence and state management well-designed?",
      "description": "Assess whether the system implements proper data storage for reservations, with appropriate database schema design (or equivalent state management). Check if reservation conflicts are correctly prevented through locking mechanisms or transaction handling. Deduct 5 points if race conditions are possible, 3 points if data validation is incomplete, and 3 points if the system lacks proper error handling for database operations. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as concurrent bookings, network interruption, invalid date/time selections, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Calendar heat map showing busy periods 2. Room layout visualization with equipment details 3. Integration with calendar apps for automatic reminders). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple date picker implementations) 2. Function modules unrelated to room reservation (e.g., built-in chat system) 3. Fancy effects that affect performance (e.g., unnecessary animations on every page load). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating reservation logic/view/data layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast calendar or room switching, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
{
  "index": 822,
  "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration. Design a website structure with a login page, an approval page, a data entry page, and a query page.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the login page implementation complete and secure?",
      "description": "Check whether the login page implements proper authentication mechanisms, including input validation, secure password handling (hashing), CSRF protection, and proper error messages. Score 0 if basic authentication is missing, 5 if it has basic validation but lacks security features, and 10 if it includes all security best practices including rate limiting and proper session management.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the approval page workflow properly implemented?",
      "description": "Evaluate whether the approval page includes user role verification, approval hierarchy, status tracking, and notification systems. The code should handle different approval states (pending, approved, rejected) and maintain an audit trail. Score 0 if the approval logic is missing, 5 if basic approval functionality exists but lacks comprehensive workflow, and 10 if it includes complete workflow with notifications and history tracking.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the data entry page functional and user-friendly?",
      "description": "Assess the data entry page for proper form validation (client and server-side), data sanitization, field constraints, and user feedback. The implementation should include handling for different input types and proper error messages. Deduct 5 points if client-side validation is missing, 3 points if there's no feedback on submission, and 2 points if complex inputs (like dates, numbers) aren't properly handled.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the query page search functionality comprehensive?",
      "description": "Check if the query page implements efficient search algorithms, pagination, sorting capabilities, filters, and exports results in useful formats. Evaluate the search response time and result display. Score 0 if basic search is missing, 5 if it has basic search without advanced features, and 10 if it includes comprehensive search with optimization for large datasets and multiple export options.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, server errors, network interruptions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dark mode toggle 2. Dashboard with usage analytics 3. Progressive Web App capabilities 4. Accessibility features). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple validation systems coexisting) 2. Function modules unrelated to the core website requirements 3. Fancy effects that affect performance (e.g., excessive animations or large media files). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI components, services/API calls, and state management), code reusability, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated or lacks proper configuration. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Consistent design language across all pages. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance 4) Consistent navigation patterns across pages. Deduct 5 points for each operation without feedback, 3 points for visual after-images during page transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
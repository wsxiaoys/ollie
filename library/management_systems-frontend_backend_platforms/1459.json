{
  "index": 1459,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to generate executable code for demonstration when possible. Create an intelligent turtle tank management system.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the turtle tank monitoring system fully implemented?",
      "description": "Review whether the code accurately implements essential monitoring functionalities such as water temperature, pH level, clarity sensors, and automatic alerts. Score 0 if the core monitoring logic is not implemented, 5 if only basic parameter tracking is included, and 10 if comprehensive monitoring with threshold-based alerts is fully implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the automated feeding system properly designed?",
      "description": "Check whether the code includes a scheduling mechanism for feeding, portion control, and feeding history logs. Verify if there's a manual override option and emergency protocols if the feeding system malfunctions. Deduct 3 points if scheduling is inflexible, 3 points if portion control isn't implemented, and 4 points if there's no failure handling mechanism. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the water quality maintenance system implemented?",
      "description": "Evaluate whether the system includes water filtration control, water change scheduling, and water quality trend analysis. Check if there are automatic responses to water quality degradation and predictive maintenance alerts. Deduct 5 points if automatic responses are missing and 5 points if trend analysis isn't implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the turtle health monitoring and tracking system designed?",
      "description": "Assess whether the code includes functionalities for tracking individual turtle data (weight, size, activity levels, feeding patterns), health anomaly detection, and growth visualization tools. Deduct 3 points if individual tracking is absent, 4 points if health anomaly detection isn't implemented, and 3 points if there's no historical data visualization. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as sensor failures, power outages, connectivity issues, or hardware malfunctions) and provide failsafe mechanisms or recovery procedures. Code with strong robustness should gracefully handle edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-based turtle behavior analysis 2. Augmented reality view of the tank ecosystem 3. Voice-controlled system commands). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple notification systems that serve the same purpose) 2. Function modules unrelated to turtle care (e.g., a built-in game) 3. Resource-intensive features that affect system performance (e.g., unnecessary high-definition video processing). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (separating sensor/control/UI layers), test coverage for critical functions (especially safety-related ones), and deployment configuration. Deduct 5 points if global state pollution is found or proper design patterns are not used; deduct 5 points if error handling is inconsistent or inadequate; deduct 5 points if there's no configuration for different deployment environments. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the dashboard design follows modern design principles: 1) Harmonious color matching that prioritizes data readability 2) Proper layout with critical information prominently displayed 3) Consistent iconography and information hierarchy. Deduct 3 points for cluttered displays, 5 points for poor color choices that reduce readability, and 5 points for confusing navigation between system functions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the system interactions meet usability standards: 1) Real-time data updates without UI freezing 2) Clear visual feedback for user actions 3) Intuitive control flows for routine tasks. Deduct 5 points for laggy or freezing interfaces, 3 points for confusing action confirmations, and 5 points for requiring excessive clicks for common tasks. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "hard"
}
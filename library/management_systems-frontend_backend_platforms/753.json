{
  "index": 753,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Write a program similar to Yinmeng self-service printing.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core printing system functionality implemented?",
      "description": "Evaluate whether the code implements the essential features of a self-service printing system, including file upload/selection, printer selection, print configuration (copies, color/B&W, page range, etc.), and print job submission. Award 10 points for complete implementation with all core features, 5 points if basic printing is possible but missing key configurations, and 0 points if the printing workflow is incomplete or non-functional.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the file management and preview system properly implemented?",
      "description": "Check if the code includes file upload capabilities supporting multiple formats (PDF, DOC, images), secure file storage, and proper preview functionality (document thumbnails or rendering). Verify if the preview accurately represents how the document will print. Deduct 3 points if multiple file formats aren't supported, 4 points for missing preview functionality, and 5 points if file management is insecure. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is a payment/balance system implemented?",
      "description": "Assess whether the system includes a complete user balance/payment workflow with price calculation based on parameters (page count, color vs. B&W), payment options, and proper receipt generation. Check if the system includes proper transaction logs and balance management. Award 10 points for a complete system with all features, 5 points if basic payment exists but lacks some elements, and 0 points if payment functionality is absent.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a comprehensive user account and authentication system?",
      "description": "Verify if the code implements user registration, login, session management, account dashboard (printing history, saved documents, etc.), and proper security measures (password hashing, input validation). Award 10 points for a complete system with secure practices, 5 points if basic authentication exists with security gaps, and 0 points if authentication is missing or fundamentally flawed.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (invalid file formats, payment failures, network interruptions, printer errors) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. OCR for text extraction and editing 2. Document AI for automatic formatting improvement 3. Smart queue management with estimated wait times). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file upload methods with overlapping functionality) 2. Function modules unrelated to printing (e.g., a built-in game while waiting) 3. Fancy effects that affect performance (e.g., unnecessary animations during critical operations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating business logic/UI/data layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-Frontend/Backend Platforms",
  "difficulty": "medium"
}
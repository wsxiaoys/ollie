{
  "index": 748,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable when presented. Help me write a text-based game about cultivating immortality and pill refining that can be used directly in WeChat Developer Tools without any errors.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core cultivation system properly implemented?",
      "description": "Review whether the code accurately implements the cultivation levels, skill progression, and attribute system. Check if there are clear advancement mechanisms with distinct stages (e.g., Qi Condensation, Foundation Establishment, Core Formation). Score 0 if cultivation mechanics are absent, 5 if basic levels exist but lack depth, and 10 if there's a comprehensive system with meaningful progression choices.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the pill refining gameplay loop complete?",
      "description": "Evaluate the implementation of the pill refining system, including ingredient collection, recipe discovery, refining process, and success/failure mechanics. Check for variables that affect outcomes (ingredient quality, player skill, equipment). Deduct 5 points if the refining process is overly simplistic, 3 points if ingredient variety is limited. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game state management properly implemented?",
      "description": "Check whether the code includes proper game state persistence using WeChat storage APIs (wx.setStorage/wx.getStorage). Verify save/load functionality works correctly and handles different game states appropriately. Deduct 5 points if state is lost between sessions, 3 points if critical game elements aren't preserved. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the WeChat Mini Program integration complete?",
      "description": "Assess whether the code properly integrates with the WeChat Developer Tools environment, using appropriate WeChat APIs and following Mini Program best practices. Check for proper page structure, lifecycle hooks implementation, and adherence to WeChat's restrictions. Deduct 5 points for improper API usage, 5 points for incompatible code patterns. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, unexpected user actions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic events based on real-world time 2. Random encounters with other cultivators 3. Special secret techniques discovery system). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple inventory systems coexisting) 2. Function modules unrelated to cultivation/refining (e.g., a built-in calculator) 3. Features that affect performance unnecessarily (e.g., excessive animations in a text-based game). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/data layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear structure for game components. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface text meet professional design standards?",
      "description": "Evaluate whether the text presentation follows good design principles: 1) Consistent terminology for cultivation terms 2) Proper text spacing and formatting 3) Clear distinction between different information types (status, actions, narrative). Deduct 3 points for inconsistent terminology, 5 points for cluttered text presentation, and 5 points for confusing navigation instructions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the game interaction intuitive and responsive?",
      "description": "Judge whether the game controls and feedback conform to user expectations: 1) Clear command options 2) Immediate feedback after actions 3) Intuitive navigation between game sections. Deduct 5 points for confusing controls, 3 points for delayed feedback, and 5 points for hidden or difficult-to-access core functions. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "easy"
}
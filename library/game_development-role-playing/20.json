{
  "index": 20,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration.\nPlease use HTML and JavaScript to implement a Magic Academy game where players need to learn magical skills and pass exams. Hint: Design magic courses and an examination system.\nInclude comments in your code so other developers can understand your implementation process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Magic Academy core learning system fully implemented?",
      "description": "Review whether the code accurately implements a learning progression system through HTML/JavaScript, with clearly defined magical skills, learning paths, and skill acquisition mechanics. Score 0 if the core learning mechanics are not implemented, 5 if only basic skill acquisition exists, and 10 if there's a comprehensive magical skill tree with prerequisites and advancement logic.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the examination system properly implemented?",
      "description": "Evaluate whether the examination system includes different question types (multiple-choice, spell casting simulations, practical challenges), difficulty progression, and scoring mechanisms. The system should provide meaningful feedback on exam performance and track student progress. Deduct 5 points if exams are too simplistic, 3 points if feedback is limited to pass/fail without details. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the magical courses and curriculum well-designed?",
      "description": "Check if the game includes diverse magical disciplines (e.g., potions, spells, magical creatures), each with unique learning materials, interactive exercises, and thematic consistency. Each course should have clear objectives and learning outcomes. Deduct 3 points for each missing major discipline, and 5 points if courses lack progressive difficulty. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a player progression and achievement system?",
      "description": "Assess whether the code implements character development features including experience points, level progression, skill mastery tracking, and achievements/badges. The system should show meaningful growth as players advance through the academy. Deduct 5 points if progression is linear without choices, and 3 points if achievements are too simplistic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid spell inputs, exam submission errors, interrupted learning sessions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive spell casting with mouse gestures 2. Dynamic potion brewing simulations 3. Magical dueling with other students). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple separate spell casting systems) 2. Function modules unrelated to a magic academy (e.g., a complex inventory system with no educational purpose) 3. Fancy effects that affect performance (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game mechanics/UI/data management), code documentation completeness, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if comprehensive comments are missing as requested. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows magical academy aesthetics with modern design principles: 1) Thematic color palette suitable for a magical setting 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Fantasy-appropriate typography (readable but thematic). Deduct 3 points for each cluttered UI section, 5 points for inconsistent visual themes, and 5 points for poor readability of critical information. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the magical interaction intuitive and engaging?",
      "description": "Judge whether the magical interactions are intuitive and satisfying: 1) Clear visual feedback for spell casting â‰¤ 100ms 2) Satisfying animations for successful magical effects 3) Progressive difficulty in magical interactions. Deduct 5 points for each magical action without clear feedback, 3 points for confusing interaction patterns, and 5 points if key magical functions are difficult to discover. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Role-Playing",
  "difficulty": "hard"
}
{
  "index": 1482,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. I'd like to create a text-based cultivation/immortality-seeking game. Please provide me with a framework and code for this.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core cultivation/immortality progression system implemented?",
      "description": "Review whether the code implements a comprehensive cultivation system with different realms/stages (e.g., Qi Condensation, Foundation Establishment, Core Formation), cultivation resources, breakthrough mechanics, and bottlenecks. Score 0 if no progression system exists, 5 if only basic leveling is implemented, and 10 if the system includes varied cultivation techniques, resources management, and meaningful progression paths.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are character attributes and stats system properly designed?",
      "description": "Check whether the character system includes both standard attributes (strength, intelligence, etc.) and cultivation-specific attributes (spiritual energy, comprehension, etc.). Evaluate if the stats affect gameplay meaningfully through formulas and checks. Deduct 3 points if attributes don't affect gameplay mechanics, 3 points if there's no clear growth curve, and 5 points if the system lacks cultivation-specific attributes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is a robust text-based adventure/interaction system implemented?",
      "description": "Assess if the code provides a text-based interface with clear navigation options, descriptive text output, and proper command parsing. Check for narrative text quality (descriptions of cultivation experiences, locations, NPCs). Score 0 if there's no interface, 5 if basic command input exists but lacks depth, and 10 if there's a rich interface with state tracking and dynamic text generation.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the game include world-building and environment elements?",
      "description": "Evaluate the implementation of locations, sects/factions, special training areas, treasure hunting, and other world elements typical in cultivation novels. Check if different locations affect cultivation rates or provide unique events. Deduct 5 points if the world is static with no exploration options, and 3 points if areas don't affect gameplay mechanics. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, unexpected gameplay sequences, edge case character states) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic events based on character choices 2. Procedurally generated cultivation insights/epiphanies 3. Relationship systems with NPCs/sects). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to calculate the same stat) 2. Function modules unrelated to cultivation themes (e.g., modern-day elements that break immersion) 3. Overly complex systems that don't add to gameplay depth. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/UI/data models), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between game mechanics and presentation layer. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Is the text interface design clear and immersive?",
      "description": "Evaluate whether the text display follows good principles: 1) Consistent formatting for different types of information 2) Clear distinction between narrative text, status information, and player options 3) Appropriate use of spacing and organization for readability. Deduct 3 points for confusing information layout, 5 points for inconsistent terminology that breaks immersion, and 5 points for text that's difficult to parse or follow. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the game state management and save system well-implemented?",
      "description": "Judge whether the game properly handles state management, including: 1) Saving and loading game progress 2) Tracking player history and achievements 3) Persistent world changes based on player actions. Deduct 5 points for lack of save functionality, 3 points for incomplete state tracking that causes inconsistencies, and 5 points for not persisting important player choices. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Role-Playing",
  "difficulty": "easy"
}
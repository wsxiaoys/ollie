{
  "index": 220,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for display. Create a family generational game with a fictional background that is comfortable and peaceful. Avoid fantasy, blood, horror, poisoning, birthmarks, metaphors, revenge, previous dynasties, urgent choices, and focus more on character development. I am the young lady of the family, with a mother and a random number of siblings. The game includes ancient professions like officials, scholars, warriors, doctors, merchants, farmers, etc., and differentiates between nobility and commoners. The game mainly focuses on marriage and family drama. The relationship development should progress naturally with reasonable scenarios and dialogues that match character personalities. In intimate scenes, use more casual and open language, and use parentheses to show physical actions or thoughts to create embarrassing, strong emotional experiences with colorful details of emotional reactions. No poison plots, scheming, or active seduction. I just want to have a romantic relationship with some spice.\n\nReply settings: Update the time and character information in the main interface for each round. Wrap all information in pseudo code blocks. Use asterisks for prompts, quotation marks for dialogues, and add emoji expressions. Use tree diagrams to show character relationship networks. The code blocks should fit mobile display dimensions. Reply \"next month\" to advance to the next month, or \"restart\" to regenerate character information.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core family simulation system implemented comprehensively?",
      "description": "Review whether the code accurately implements a family generational simulator with proper character creation, attribute systems, and relationship tracking. Check for implementation of noble/commoner distinction, ancient profession system, and family hierarchy dynamics within the specified comfortable setting.Score 0 if core simulation is missing, 5 if basic family structure exists but lacks depth, 10 if the system fully models complex family relationships with appropriate attribute tracking and status changes based on interactions.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the character development and relationship progression logic properly implemented?",
      "description": "Evaluate whether the code includes mechanisms for natural relationship development with context-appropriate dialogues and personality-driven interactions. Check if the system avoids prohibited themes (fantasy, horror, revenge plots) while still creating engaging relationship mechanics.Deduct 5 points if relationship progression is purely random without personality considerations. Deduct 3 points if dialogues don't reflect character personalities. The full score is 10 points for a robust character development system that progresses naturally with meaningful choice consequences.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the game mechanics for time progression and event generation implemented?",
      "description": "Check whether the code implements a functional month-by-month progression system with appropriate events, character aging, relationship changes, and new scenario generation. Verify that the \"next month\" command properly advances game state and updates all relevant variables.Award 0 points if time progression is missing, 5 points if basic monthly updates occur but lack event variety or consequence, and 10 points for a comprehensive system with appropriate life events, seasonal changes, and character development milestones.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the user interface implementation complete with all required display elements?",
      "description": "Verify that the code properly implements all specified UI elements: code blocks for information, proper use of asterisks for prompts, quotation marks for dialogues, emojis for expressions, and relationship tree diagrams. Check if the display is optimized for mobile dimensions as requested.Deduct 2 points for each missing UI element (time/character updates, code blocks, asterisks for prompts, quotation marks for dialogues, emojis, relationship trees). Award 10 points only if all elements are properly implemented and responsive to game state changes.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid commands, unexpected input, state inconsistencies) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle edge cases.Give 10 points for comprehensive error handling and state validation, 5 points for average robustness with some edge case handling, and 0 points if no exceptions are handled.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Procedurally generated character backstories 2. Dynamic personality evolution based on life events 3. Seasonal festivals or special events 4. Family heirlooms or traditions that develop over time).Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple character generation systems) 2. Function modules unrelated to family simulation (e.g., unrelated mini-games) 3. Fancy effects that affect performance (e.g., excessive animations or graphics).Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/state management layers), code organization, and maintainability. Check for proper encapsulation of game mechanics and state management.Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between UI and game logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing for relationship trees and character information 3) Professional text formatting with consistent use of prompts, dialogue markers, and emojis.Deduct 3 points for each cluttered visual element, 5 points for inconsistent text formatting, and 5 points for poorly organized relationship trees. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the command processing and game state updates are responsive and intuitive: 1) Command feedback delay is minimal 2) State transitions are clear with appropriate feedback 3) Character and relationship updates are visually obvious after changes.Deduct 5 points for each operation without feedback, 3 points for confusing state transitions, and 5 points for difficulty in tracking relationship or character changes. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Role-Playing",
  "difficulty": "easy"
}
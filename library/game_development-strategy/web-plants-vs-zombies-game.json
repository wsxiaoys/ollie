{
  "index": 348,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Be sure to provide executable code for demonstration whenever possible. Help me write a web-based version of Plants vs. Zombies.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core plant and zombie interaction system fully implemented?",
      "description": "Review whether the code accurately implements the plant placement grid system, zombie movement paths, collision detection, and damage calculations. Check if plant types have different attack patterns (single, area, slow-down effects) and if zombies have varied movement speeds and health points. Score 0 if the core interaction is missing, 5 if only basic attacks exist, and 10 if varied plant/zombie types with unique behaviors are implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the resource management and progression system functional?",
      "description": "Evaluate the implementation of sun collection mechanics, plant cooldown timers, and wave progression logic. Check if the sun economy is balanced (sun generation rate vs plant costs) and if the wave system increases in difficulty over time. Deduct 5 points if sun collection doesn't work properly, 3 points if cooldown timers are inconsistent, and 3 points if zombie waves don't escalate properly. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the game mechanics and rules properly implemented?",
      "description": "Check whether the code implements the essential PvZ mechanics: lawn mowers as last defense, day/night cycle (if included), plant selection screen before levels, and win/lose conditions. Verify that zombies entering the house trigger a game over and that clearing all waves leads to victory. Deduct 3 points for each missing core mechanic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there proper animation and visual feedback implementation?",
      "description": "Assess whether plants have planting animations, attack animations, and damage states. Check if zombies have walking animations, eating animations, and death animations. Verify visual feedback for sun collection, plant selection, and game state changes. Deduct 3 points if static images are used without animation, 5 points for missing critical feedback (like zombie approach or plant damage). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid clicking, invalid plant placement attempts, browser resizing, or game pausing) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. New unique plant/zombie types not in the original game 2. Weather effects that impact gameplay 3. Customizable gardens or layouts). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple collision detection systems) 2. Function modules unrelated to PvZ gameplay (e.g., an irrelevant minigame) 3. Fancy effects that affect performance (e.g., excessive particle systems that cause lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game entities, rendering, and game logic), usage of design patterns appropriate for game development (like Observer for events or Factory for creating plants/zombies), and code reusability. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no proper asset preloading mechanism. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design is faithful to the PvZ aesthetic while following modern web design principles: 1) Consistent art style between UI elements and game assets 2) Proper layout and scaling for different screen sizes 3) Clear visual hierarchies for game information (sun count, wave progress). Deduct 3 points for inconsistent art styles, 5 points for unresponsive designs that break on different screens, and 5 points for cluttered or confusing UI. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game performs well and has responsive controls: 1) Plant placement should respond within 100ms of clicking 2) Game maintains consistent framerate (min 30fps) even with many entities 3) Audio feedback is synchronized with visual events. Deduct 5 points for noticeable input lag, 5 points for framerate drops during normal gameplay, and 3 points for missing or misaligned audio-visual feedback. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "hard"
}
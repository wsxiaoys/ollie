{
  "index": 70,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Try to ensure the generated code is executable for demonstration.\n\nPlease use HTML and JavaScript to implement a virtual currency game.\n\n**Task**: Design a virtual currency system where players can earn virtual currency through in-game activities and use it to purchase items and equipment.\n\n**Hint**: Set up functions for earning and spending virtual currency, and provide various options for items and equipment.\n\nPlease include comments in your code to help other developers understand your implementation process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core virtual currency earning and spending system fully implemented?",
      "description": "Review whether the code accurately implements mechanisms for players to earn virtual currency (e.g., completing tasks, winning games, daily rewards) and spend it (purchasing items/equipment). Check if the currency balance updates correctly and transactions are properly validated. Score 0 if the core currency system is missing, 5 if only basic earning OR spending is implemented, and 10 if both earning AND spending mechanisms are complete with proper validation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the item/equipment inventory system properly implemented?",
      "description": "Evaluate whether the code includes a complete inventory system that tracks purchased items, displays owned items, and implements item effects or stats. Check if items have proper attributes (e.g., price, type, effects) and if the inventory persists across sessions (using localStorage or similar). Deduct 5 points if items lack attributes beyond name/price, and 3 points if there's no persistence mechanism. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are various in-game activities for earning currency implemented?",
      "description": "Check for the presence of multiple meaningful activities to earn currency (e.g., games, tasks, quests, timed rewards). Each activity should have a unique implementation with appropriate rewards based on difficulty/time. Give 10 points for 3+ well-implemented activities, 5 points for 1-2 basic activities, and 0 points if earning mechanics are trivial (e.g., just clicking a button).",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a complete game economy balance design?",
      "description": "Evaluate whether the virtual economy is properly balanced—income rates vs. item prices should create meaningful progression. Check for currencies sink mechanisms to prevent inflation, progression scaling, and whether there are premium/rare items that take significant time to acquire. Deduct 3 points if the economy allows instant acquisition of all items, 5 points if there's no long-term progression design, and 3 points if currency generation has no limits. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as negative currency values, purchasing items without sufficient funds, invalid inputs) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Currency exchange rates between different types of currencies 2. Special time-limited offers or discounts 3. Achievements system tied to purchases). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple methods to update currency) 2. Function modules unrelated to the virtual currency game (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations that slow down transactions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating currency logic/item management/UI layers), code organization, and quality of comments as requested in the task. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if comments are missing or unhelpful. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Visual feedback when earning/spending currency 2) Transition animations when purchasing items 3) Clear visual focus on important elements like balance and available items. Deduct 5 points for each operation without feedback, 3 points for jarring transitions when updating currency values, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "easy"
}
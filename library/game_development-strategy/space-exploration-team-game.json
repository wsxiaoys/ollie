{
  "index": 79,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure the generated code is executable for demonstration purposes.\nPlease implement a Space Exploration Team game using HTML and JavaScript where players need to manage the team's resources and missions.\nSuggestion: Implement resource management and mission assignment systems.\nInclude comments in your code to help other developers understand your implementation process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the resource management system fully implemented?",
      "description": "Review whether the code implements a comprehensive resource management system (oxygen, fuel, food, materials, etc.) with proper balance mechanics. Check for resource generation, consumption, and storage limits. Score 0 if no resource system exists, 5 if only basic resources without dynamics are implemented, and 10 if resources have interdependencies and strategic management options.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the mission assignment system properly designed?",
      "description": "Evaluate the mission system's complexity and engagement. Check for different mission types, varying difficulties, resource requirements, success/failure conditions, and rewards. Deduct 5 points if missions lack variety, 3 points if there's no risk-reward balance, and 5 points if crew assignment mechanics are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game progression system implemented?",
      "description": "Check whether the game includes a meaningful progression system with technology research, base/ship upgrades, crew skill development, or story advancement. Deduct 5 points if progression is linear without player choices, 3 points if there's no long-term goal, and 5 points if progression milestones lack meaningful rewards. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the crew management system detailed and functional?",
      "description": "Assess the depth of the crew management system including recruitment, skill specialization, fatigue/morale mechanics, and assignment logic. Look for crew member individuality and specialization. Score 0 if crew management is absent, 5 if it's basic with minimal differentiation, and 10 if crew members have distinct skills, personalities, and development paths.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as resource depletion, all crew members unavailable, mission failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Random space events affecting gameplay 2. Diplomatic relations with alien civilizations 3. Dynamic universe with changing conditions). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple resource tracking systems coexisting) 2. Function modules unrelated to space exploration (e.g., a built-in music player) 3. Fancy effects that affect performance (e.g., excessive particle animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/data models), code comments as required by the task, and maintainable architecture. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if code comments are insufficient or misleading. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Space-themed color palette that's consistent and thematic 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual indicators for resource changes and mission status. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast updates, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "medium"
}
{
  "index": 1552,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Write a Monopoly game that can be run on a web browser.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Monopoly game board fully implemented?",
      "description": "Review whether the code accurately implements the Monopoly board layout with all 40 standard spaces (properties, utilities, railroads, chance/community chest, Go, Jail, etc.) through HTML/CSS/JavaScript. Check if property information (prices, rent structures, color groups) is correctly defined. Score 0 if the board is incomplete, 5 if basic layout exists but lacks details, 10 if the full Monopoly board with accurate property details is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the core Monopoly game mechanics implemented?",
      "description": "Evaluate if the code includes essential game mechanics: dice rolling, player movement, property purchasing, rent collection, passing GO ($200), Chance/Community Chest cards, Jail mechanics, house/hotel building, and mortgaging properties. Deduct 2 points for each missing core mechanic. The full implementation should include proper turn management and transaction handling between players.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is player interaction and game flow properly managed?",
      "description": "Check if the game flow follows Monopoly rules with clear turn progression: roll dice, move, land on space, take appropriate action, and end turn. Evaluate if the UI provides proper controls for each action (buy property, build houses, mortgage, trade, etc.). Deduct 3 points if turn sequence is incorrect, 3 points if core actions aren't available at appropriate times, and 4 points if important decision points lack user feedback.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is multi-player functionality implemented?",
      "description": "Assess whether the game supports 2-8 players as per standard Monopoly rules, with appropriate player setup, turn management, and transaction handling between players. Check if the game tracks player statistics (cash, properties owned, position) correctly. Score 0 if only single-player exists, 5 if basic multiplayer exists but with flaws, 10 if full multiplayer with proper turn handling and player interactions is implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle edge cases like bankruptcy procedures, property auctions when players decline to buy, trading with negative cash balance, and unusual dice roll combinations. Code with strong robustness should validate all user inputs, prevent illegal moves, and maintain game state consistency. Give 10 points if these edge cases are handled properly, 5 points if partially handled, and 0 points if major game-breaking issues exist.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Game history/statistics visualization 2. Custom house rules options 3. Animated dice and player tokens 4. AI opponents with different strategies 5. Save/load functionality). Add 2 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to handle the same game event) 2. Function modules unrelated to Monopoly (e.g., unrelated mini-games) 3. Fancy effects that affect performance (e.g., excessive animations that slow gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/state management), code organization, and maintainability. Deduct 3 points if global state is poorly managed; deduct 3 points if code lacks comments or documentation; deduct 4 points if there's significant code duplication or spaghetti code. The full score is 10 points for clean, maintainable code with good separation of concerns.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the design follows Monopoly's traditional aesthetic while maintaining usability: 1) Appropriate color scheme matching traditional Monopoly colors 2) Clear property ownership indicators 3) Readable game information displays (cash, properties, current player). Deduct 3 points for cluttered UI, 3 points for poor readability of critical information, 4 points for confusing layout that impedes gameplay. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game provides appropriate feedback for all actions: 1) Visual feedback for dice rolls and movements 2) Clear indicators for property purchases and rent payments 3) Smooth transitions between player turns. Deduct 3 points for delayed feedback on actions, 3 points for unclear turn transitions, 4 points if critical game events occur without appropriate visual/audio cues. The full score is 10 points for a game that maintains player awareness through appropriate feedback.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "hard"
}
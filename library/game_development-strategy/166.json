{
  "index": 166,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Try to ensure the code you generate is executable for demonstration.\n\nPlease use HTML and JavaScript to implement a zombie survival game where players need to survive zombie attacks while searching for resources.\nHint: Implement enemy AI behavior and resource management mechanisms.\n\nPlease include comments in your code so other developers can understand your implementation process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core zombie survival game mechanics fully implemented?",
      "description": "Check if the code implements the essential gameplay mechanics: player movement controls, zombie AI with pathfinding, collision detection, and combat system. Score 0 if core mechanics are missing, 5 if basic movement and combat are implemented but lack depth, and 10 if all mechanics are fully functional with smooth integration.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "How sophisticated is the enemy zombie AI behavior?",
      "description": "Evaluate the zombie AI implementation - does it include pathfinding algorithms (A*, Dijkstra's), different zombie types with varied behaviors, adaptive difficulty scaling, and sensory systems (sight, hearing)? Deduct 3 points if zombies move randomly without pathfinding, 3 points if there's no variety in zombie types, and 2 points if zombies don't react to environmental stimuli (sound, light).",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the resource management system comprehensive?",
      "description": "Assess if the game has a robust resource system including inventory management, item collection, resource scarcity mechanics, and crafting/combining items. Check if resources affect gameplay (health, stamina, ammunition). Deduct 4 points if there's no inventory system, 3 points if resources don't meaningfully impact survival, and 3 points if resource distribution lacks balance.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the game include progression and survival mechanics?",
      "description": "Check for survival mechanics like health/stamina management, day/night cycles, hunger/thirst systems, and progression elements (skills, upgrades, safe zones). Score 0 if no survival mechanics exist, 5 if basic health system is implemented but lacks depth, and 10 if comprehensive survival systems create meaningful gameplay decisions.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code handles common abnormal situations (out-of-bounds movements, resource overflow/underflow, collision edge cases, etc.) and provides appropriate error handling. Code with strong robustness should effectively handle these edge cases, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic weather affecting gameplay 2. Procedurally generated maps 3. Advanced gore/dismemberment system 4. Unique zombie mutation mechanics). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple healing systems coexisting) 2. Function modules unrelated to zombie survival (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/input layers), code organization, comments quality, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if comments are missing or unhelpful for understanding the implementation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern game UI principles: 1) Harmonious color palette fitting the zombie theme 2) Clear HUD elements showing critical survival information 3) Proper feedback for damage, resource collection, and enemy presence. Deduct 3 points for cluttered UI elements, 5 points for poor visual hierarchy that obscures important information, and 5 points for inconsistent visual language. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game's responsiveness and feedback conform to player expectations: 1) Input response time â‰¤ 100ms 2) Clear visual/audio feedback for hits, damage, and resource collection 3) Appropriate difficulty curve and tutorial elements. Deduct 5 points for each action without feedback, 3 points for jerky animations or inconsistent frame rates, and 5 points for unintuitive controls or confusing game states. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "medium"
}
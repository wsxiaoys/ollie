{
  "index": 1616,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Use HTML, JS, and CSS to create a game of \"Fight the Landlord\" (Chinese poker).",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core card game logic fully implemented?",
      "description": "Review whether the code accurately implements the 'Fight the Landlord' game rules, including card values/suits representation, deck initialization, card distribution logic, player turn management, valid play checking (singles, pairs, triples, straights, etc.), and win condition detection. Score 0 if the core game mechanics are missing, 5 if basic card playing is implemented but with rule inaccuracies, and 10 if all official rules are correctly implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the player role system (Landlord vs Farmers) properly implemented?",
      "description": "Evaluate whether the code correctly handles the bidding phase for determining the landlord, allocates the extra cards to the landlord, implements the proper scoring system (with different points for landlord and farmers), and manages the alliance mechanics between farmers. Deduct 3 points if the bidding process is incomplete, 5 points if the landlord bonus cards aren't handled correctly, and 3 points if scoring doesn't account for bombs and rocket multipliers. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game interface and card representation visually effective?",
      "description": "Check whether cards are clearly represented with proper suits and values, whether the player hands are organized and easily readable, and if the played cards are distinctly displayed. Assess if player roles (landlord/farmer) are visually indicated. Deduct 3 points for unclear card representation, 3 points for disorganized hand display, and 4 points if game status information is not prominently visible. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are the AI opponents implemented with reasonable playing strategies?",
      "description": "Evaluate whether AI players demonstrate intelligent card play decisions, including hand optimization, tactical plays against the landlord/farmers, and strategic responses to previous plays. Review if AI difficulty levels are implemented or if the AI can adapt to various game situations. Score 0 for random play AI, 5 for basic strategic play, and 10 for comprehensive opponent AI with advanced tactics and situational awareness.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid card selections, interruptions, game state inconsistencies, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Hand strength calculator 2. Game replay functionality 3. Card animation effects 4. Historical statistics tracking 5. Custom rule variations). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple card validation logics coexisting) 2. Function modules unrelated to the card game (e.g., unrelated mini-games) 3. Fancy effects that affect performance (e.g., excessive animations that hinder gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), code organization, naming conventions, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear structure separating UI from game logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Appropriate card table theme and styling. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic card layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Card selection/play feedback delay ≤ 100ms 2) Card dealing/moving animations controlled between 300-500ms 3) Clear visual indication of whose turn it is and valid card combinations. Deduct 5 points for each operation without feedback, 3 points for laggy card animations, and 5 points if it's unclear which card combinations are playable. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "hard"
}
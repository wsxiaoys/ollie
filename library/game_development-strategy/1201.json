{
  "index": 1201,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to make the generated code executable for demonstration. Write me a mobile game code for Gomoku (Five in a Row), a single-player version with 10 levels. Each win earns one champion medal. Winning 2 consecutive games earns 2 champion medals, winning 3 consecutive games earns 3 champion medals, and so on. The wins must be consecutive - losing a game or drawing in between breaks the streak and resets the count.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Gomoku core game logic fully implemented?",
      "description": "Review whether the code accurately implements the 15×15 board, correctly handles stone placement, and properly identifies winning conditions (5 stones in a row horizontally, vertically, or diagonally). Score 0 if the core logic is missing, 5 if basic win detection is implemented but has edge cases, and 10 if the implementation is complete and bug-free.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all 10 difficulty levels properly implemented and distinct?",
      "description": "Evaluate whether the AI opponents across 10 levels show meaningful progression in difficulty. Check if higher levels employ more sophisticated strategies (such as threat detection, forced moves recognition, opening strategies). Deduct 2 points for each level that is indistinguishable from adjacent levels. Full score requires visible differences in AI behavior between levels shown in screenshots.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the consecutive win medal system correctly implemented?",
      "description": "Test whether the medal reward system accurately tracks consecutive wins (1 medal for first win, 2 for second consecutive win, etc.), and properly resets the counter upon loss or draw. Score 0 if not implemented, 5 if the system works but has edge cases (e.g., incorrect counting after app restart), and 10 if fully functional with persistent storage.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a single-player progression system with proper game state management?",
      "description": "Check if the code includes player progression tracking, statistics (wins/losses/draws), level unlocking mechanism, and proper game state management (new game, pause, resume, forfeit). Score 0 if missing, 5 if basic implementation, and 10 if the system includes animations and visual feedback when unlocking new levels.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code handles edge cases (invalid moves, race conditions during animations, rapid input) and provides friendly error messages or recovery mechanisms. Code should prevent illegal moves and handle potential state inconsistencies. Give 10 points for comprehensive error handling, 5 points for basic validation, 0 points if critical errors can crash the game.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Replay system with move annotations 2. Customizable board themes 3. Interactive tutorials for strategies). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple board rendering methods) 2. Function modules unrelated to Gomoku (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/AI/medal system), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments for complex algorithms. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional mobile game design standards?",
      "description": "Evaluate whether the UI follows mobile game design principles: 1) Finger-friendly touch targets (minimum 44×44 pixels) 2) Clear visual hierarchy with appropriate contrast 3) Consistent design language across screens. Deduct 3 points for each hard-to-tap element, 5 points for cluttered layouts, and 5 points for inconsistent visual styles between screens. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive?",
      "description": "Judge whether the game interactions feel native and responsive: 1) Move feedback delay ≤ 100ms 2) Stone placement animations between 200-300ms 3) Clear visual and audio feedback for important events (wins, medals earned). Deduct 5 points for laggy animations, 3 points for missing visual feedback on stone placement, and 5 points for unresponsive UI during AI's turn. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "medium"
}
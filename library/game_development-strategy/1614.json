{
  "index": 1614,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Write a Tank Battle game using JavaScript language.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the tank battle core game mechanics fully implemented?",
      "description": "Review whether the code accurately implements tank movement (8-directional or smooth rotation), shooting mechanics with projectile physics, collision detection between tanks/bullets/obstacles, and health/damage system. Score 0 if basic tank control is missing, 5 if only movement or shooting works independently, and 10 if all combat mechanics including hit detection, damage calculation, and game over conditions are fully functional.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the game map and obstacle system properly designed?",
      "description": "Check whether the battlefield includes destructible/indestructible obstacles, boundary collision detection, and strategic map layout. Evaluate if the map generation supports multiple levels or random generation. Deduct 5 points if tanks can pass through walls, 3 points if bullet-obstacle collision is inaccurate, and 5 points if the map lacks strategic depth. The full score requires proper tile-based collision system and varied terrain.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game loop and state management architecture sound?",
      "description": "Evaluate whether the game uses proper requestAnimationFrame for smooth rendering, implements clear separation between game logic and rendering, and maintains consistent frame rate (ideally 60fps). Check for proper game state management (menu, playing, paused, game over). Deduct 5 points if frame rate drops below 30fps, 3 points if game states are not properly managed, and 5 points if update/render cycles are mixed together.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are multiplayer or AI opponents effectively implemented?",
      "description": "Check whether the game includes AI tank behavior with pathfinding, target acquisition, and tactical decision-making, or implements local multiplayer with separate controls. AI should demonstrate strategic behavior beyond random movement. Deduct 5 points if AI lacks collision avoidance, 3 points if AI behavior is too predictable, and 5 points if multiplayer controls conflict. Full score requires sophisticated AI or smooth multiplayer experience.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid key presses, boundary conditions, simultaneous collisions, browser compatibility issues) and provide graceful error handling. Code with strong robustness should prevent crashes, handle edge cases, and maintain game stability. Give 10 points if fully robust, 5 points if average robustness with minor issues, and 0 points if no exception handling exists.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes engaging features that enhance gameplay experience (e.g., 1. Power-ups and special weapons 2. Particle effects for explosions 3. Mini-map or radar system 4. Sound effects and background music 5. Score/leaderboard system). Add 2 points for each well-implemented innovative feature (maximum 10 points). Features must be functional, not just cosmetic.",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple collision detection methods coexisting) 2. Function modules unrelated to tank battle (e.g., built-in calculator) 3. Performance-heavy effects that cause lag (e.g., excessive particle systems). Deduct 3 points for each redundancy found, and directly deduct 10 points if core gameplay is interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game entities, physics, rendering, and input handling), code organization with proper class structure, and maintainable code practices. Deduct 5 points if global variables are overused or no design patterns are applied; deduct 5 points if code duplication rate exceeds 30%; deduct 3 points if functions are too long (>50 lines) or poorly named. The full score requires clean, well-structured, and maintainable code.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the game graphics follow good visual design: 1) Consistent art style and color palette (no more than 4 primary colors) 2) Clear visual hierarchy and readable UI elements 3) Appropriate sprite/asset quality and scaling 4) Professional-looking HUD with health bars, score display. Deduct 3 points for each poorly designed visual element, 5 points for jarring color combinations, and 5 points for unclear game state indicators. Screenshots should demonstrate polished visual presentation.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game controls and animations provide excellent user experience: 1) Tank movement response time â‰¤ 50ms 2) Smooth rotation and movement animations 3) Satisfying explosion and hit effects 4) Clear audio-visual feedback for all actions. Deduct 5 points for each unresponsive control, 3 points for jerky animations or missing feedback, and 5 points for confusing visual cues. The full score requires fluid, responsive, and satisfying game feel.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "medium"
}
{
  "index": 1554,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and expert responses. Make sure the generated code is executable whenever possible. Help me create a Dou Dizhu (Fighting the Landlord) card game using HTML, with all code saved in a single HTML file.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core Dou Dizhu game logic fully implemented?",
      "description": "Review whether the code accurately implements the card distribution system, the landlord bidding process, and all valid card combination rules (singles, pairs, three-of-a-kind, straights, etc.). Score 0 if the core game logic is missing, 5 if only basic card play is implemented without complete rule validation, and 10 if all official Dou Dizhu rules are fully implemented with proper validation of moves.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the card dealing and turn-based gameplay well implemented?",
      "description": "Evaluate whether the code includes proper card shuffling algorithm (Fisher-Yates or equivalent), correct 17-17-17 card distribution with 3 landlord cards, and proper turn-based gameplay that follows clockwise rotation. Check if pass/play mechanics work correctly. Deduct 3 points if card dealing is not random, 3 points if turn rotation is flawed, and 4 points if the landlord bidding process is missing or incorrect. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are all card combinations and game rules properly implemented?",
      "description": "Check if the code implements all valid card combinations (singles, pairs, three-of-a-kind with/without attachments, straights, bomb, rocket) and their relative strengths. Verify that the system correctly prevents invalid plays and enforces the 'must beat previous play' rule. Deduct 2 points for each missing combination type, 3 points if strength comparison is flawed, and 5 points if play validation is inconsistent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the winning condition and score calculation properly implemented?",
      "description": "Assess whether the game correctly identifies the winner when a player uses all their cards, calculates the base points and multipliers (rockets, bombs, spring, etc.), and handles game-ending scenarios. Check for proper display of results and option to start a new game. Deduct 3 points if winner detection is flawed, 4 points if score calculation is incomplete, and 3 points if the game restart mechanism is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle edge cases (e.g., improper card selections, out-of-turn plays, UI edge cases) and provides friendly error messages. Check for input validation, state management during transitions, and prevention of race conditions. Deduct 2 points for each unhandled edge case, 3 points for missing error handling, and 5 points if the game can easily break. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Card suggestion helper 2. Game history tracking 3. Animation effects for special card combinations 4. Sound effects for card plays). Add 2.5 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple card validation methods that could be combined) 2. Function modules unrelated to Dou Dizhu (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive animations that slow down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review the code structure (separating game logic/UI/event handling), variable naming conventions, and overall organization. Check if the single HTML file is well-structured with clear separation of HTML, CSS, and JavaScript. Deduct 3 points for global variable abuse, 3 points for poor function organization, 2 points for inconsistent naming conventions, and 2 points for excessive code duplication. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the card game interface meet professional design standards?",
      "description": "Evaluate whether the card design and layout follows good principles: 1) Clear card representation with easy-to-recognize suits and values 2) Proper hand display with overlapping cards at appropriate spacing 3) Distinct visual cues for active player, landlord, and played cards. Deduct 3 points for unclear card visualization, 3 points for cluttered layout, 2 points for poor color choices, and 2 points for insufficient player status indicators. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the game interaction smooth and intuitive?",
      "description": "Judge whether the interaction design is player-friendly: 1) Card selection with clear visual feedback 2) Obvious buttons for actions (play, pass, etc.) 3) Clear indications of valid/invalid card combinations. Deduct 3 points for confusing card selection mechanics, 3 points for unclear turn indicators, 2 points for slow response time, and 2 points if common actions require excessive clicks. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "hard"
}
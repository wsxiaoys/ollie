{
  "index": 1756,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Please write a Spider Solitaire game using JavaScript.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Spider Solitaire game core mechanics fully implemented?",
      "description": "Review whether the code accurately implements the complete Spider Solitaire game mechanics including deck creation, card dealing, move validation, sequence building, and completion detection. Score 0 if the core mechanics are missing, 5 if only basic card movement is implemented, and 10 if all standard Spider Solitaire rules (including different difficulty levels with 1-4 suits) are fully included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the card manipulation and movement system properly implemented?",
      "description": "Check if the code implements proper card dragging, dropping, flipping, and stacking according to Spider Solitaire rules. Verify that cards can only be moved according to valid sequences (descending order), and that completed sequences (K through A of the same suit) are automatically removed. Deduct 5 points if validation rules are incorrect, 3 points if sequence completion detection is faulty. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the game include all essential Spider Solitaire features?",
      "description": "Evaluate whether the implementation includes dealing additional cards when needed, undo/redo functionality, scoring system, game timer, and different difficulty options (1, 2, or 4 suits). Deduct 3 points if dealing additional cards is not implemented, 2 points for missing undo/redo, 2 points for no scoring system, and 3 points for missing difficulty options. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game state management properly implemented?",
      "description": "Check whether the code includes proper game state management, including initialization, save/load functionality, win/lose detection, and game statistics tracking. Deduct 5 points if game state persistence is not implemented, and 3 points if win condition detection is incorrect. Give 10 points if fully implemented with proper state transitions.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid moves, rapid clicking, browser refreshes, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Automatic move suggestions 2. Game statistics and achievements 3. Custom card themes/designs). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple card movement handlers) 2. Function modules unrelated to Spider Solitaire (e.g., unrelated mini-games) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view layers), code organization, naming conventions, and documentation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the card design and layout follow traditional card game aesthetics: 1) Clear card visuals with proper suit and rank indicators 2) Proper spacing between tableau columns 3) Professional font system for game UI elements. Deduct 3 points for each hard-to-distinguish card element, 5 points for poor contrast between cards and background, and 5 points for chaotic tableau layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the card movement animations and interactions conform to user expectations: 1) Card drag-and-drop feels natural with <100ms response time 2) Card flip animations complete within 300ms 3) Clear visual feedback for valid and invalid moves. Deduct 5 points for each interaction without feedback, 3 points for jerky card movements, and 5 points for confusing or misleading visual cues. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "hard"
}
{
  "index": 762,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for display purposes. Help me write code for a single-player Plants vs. Zombies game with unlimited sunshine.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Plants vs. Zombies game core mechanics fully implemented?",
      "description": "Review whether the code successfully implements the fundamental PvZ gameplay, including planting mechanics, zombie movement patterns, collision detection, and plant-zombie interaction. Score 0 if the core mechanics are missing, 5 if only basic functionality exists, and 10 if all standard PvZ mechanics (including shooting, sun collection, and different zombie types) are properly implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the unlimited sunshine feature correctly implemented?",
      "description": "Check if the code properly implements unlimited sunshine as specified. This requires maintaining a high or constantly replenishing sun count, bypassing normal sun collection mechanics without breaking game balance. Deduct 5 points if sun still needs collection, 3 points if there are arbitrary sun limits, and 2 points if the implementation conflicts with other game systems. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are various plant types and zombies with different behaviors implemented?",
      "description": "Evaluate whether the code includes at least 5 different plant types (e.g., Peashooter, Sunflower, Wall-nut, Cherry Bomb, Snow Pea) and 3 zombie types with distinct behaviors and attributes. Deduct 2 points for each missing plant type below 5 and 3 points for each missing zombie type. Give 10 points if the implementation includes proper class inheritance and behavior differentiation.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the level progression system with increasing difficulty implemented?",
      "description": "Assess whether the game includes a proper level system with progressive difficulty (increasing zombie spawn rates, introducing new zombie types, etc.). Check if wave management logic exists and whether the game properly handles level completion conditions. Deduct 5 points if there's no level progression, 3 points if difficulty scaling is absent, and 2 points if win/lose conditions are not properly implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common edge cases (such as rapid clicking, overlapping plants, boundary zombies, browser resizing, etc.) and provide appropriate error handling or recovery mechanisms. Code with strong robustness should effectively manage these scenarios, giving 10 points. If the robustness is average, give 5 points, and if no edge cases are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Special power-ups not in original game 2. Weather effects affecting gameplay 3. Unique zombie or plant abilities). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar game mechanics (e.g., multiple plant selection systems) 2. Function modules unrelated to PvZ gameplay (e.g., unnecessary mini-games) 3. Heavy visual effects that affect performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (separating game logic from rendering, proper class structure for plants/zombies), code reuse, and performance optimization. Deduct 5 points if global state is overused; deduct 5 points if code duplication rate is high (over 30%); deduct 5 points if animation frame management is inefficient. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the visual design matches the PvZ aesthetic while following good design principles: 1) Consistent art style for plants and zombies 2) Clear lawn grid system with proper spacing 3) Readable UI elements with sufficient contrast. Deduct 3 points for inconsistent visual styles, 5 points for unclear playfield boundaries, and 5 points for poor information hierarchy (e.g., hard to read sun count). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game interactions feel responsive and intuitive: 1) Plant placement feedback â‰¤ 100ms 2) Smooth zombie walking animations 3) Clear visual feedback for attacks and damage. Deduct 5 points for laggy animations, 3 points for unresponsive plant selection/placement, and 5 points for unclear visual feedback when plants attack or zombies take damage. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "hard"
}
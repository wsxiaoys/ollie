{
  "index": 947,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable and can be demonstrated. Can you write me a complete code for a \"Fight the Landlord\" card game?",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core card game logic fully implemented?",
      "description": "Evaluate whether the code accurately implements the 'Fight the Landlord' rules, including card ranking, combinations (single, pair, trio, straight, etc.), bidding for landlord, and scoring. Score 0 if core game mechanics are missing, 5 if basic rules are implemented but with errors, and 10 if all rules are correctly implemented with proper validation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the card dealing and playing mechanism properly implemented?",
      "description": "Check if the code includes proper card shuffling algorithms (e.g., Fisher-Yates), fair dealing of cards (17 cards each with 3 landlord cards), and correct handling of turn-based play. Deduct 3 points if the shuffling algorithm has bias, 3 points if card dealing doesn't follow game rules, and 4 points if turn management is incorrect. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the card combination validation and comparison logic correct?",
      "description": "Verify that the code can correctly identify all card combinations (singles, pairs, trios, straight, bomb, etc.) and compare their strengths according to game rules. Score 0 if the logic is fundamentally flawed, 5 if basic combinations work but special cases fail, and 10 if all combinations and their comparisons are handled correctly including edge cases.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the game state management and win condition detection implemented?",
      "description": "Examine whether the code properly manages game states (waiting, bidding, playing, game over), detects win conditions (player runs out of cards), and calculates scores correctly. Deduct 3 points for incomplete state transitions, 4 points for incorrect win detection, and 3 points for scoring calculation errors. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid card selections, out-of-turn plays, unexpected disconnections, etc.) and provide friendly error prompts. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI opponents with different difficulty levels 2. Game replay functionality 3. Visual card animations when playing combinations). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple card validation methods) 2. Function modules unrelated to the card game (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive animations that slow down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), code organization, and naming conventions. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear organization of code components. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the card game UI follows modern design principles: 1) Clear card visualization with appropriate sizes and spacing 2) Intuitive player areas and game information display 3) Professional color scheme and typography. Deduct 3 points for cluttered card layouts, 5 points for unclear turn indicators or player status, and 5 points for poor readability of card values. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game interactions feel natural and responsive: 1) Cards respond immediately to selection 2) Smooth animations for dealing and playing cards 3) Clear visual and audio feedback for important game events. Deduct 5 points for laggy card selection, 3 points for jarring or missing animations during key moments, and 5 points for confusing feedback when invalid moves are attempted. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Strategy",
  "difficulty": "hard"
}
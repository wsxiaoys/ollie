{
  "index": 397,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure the code you generate is executable and can be demonstrated. Write a frontend program that simulates the Earth-Moon orbital relationship.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Earth-Moon orbital simulation mathematically accurate?",
      "description": "Evaluate whether the orbital mechanics are scientifically accurate. Check if the code implements Kepler's laws correctly with the Moon's elliptical orbit around Earth, proper orbital period ratio (approximately 27.3 days), and accurate relative sizes (Moon diameter ≈ 27% of Earth's). Score 0 if physics is completely wrong, 5 if basic circular orbit is implemented, and 10 if the simulation includes proper elliptical orbit with correct eccentricity (0.0549) and orbital inclination (5.145°).",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the visualization accurately represent celestial bodies and their properties?",
      "description": "Check if Earth and Moon are rendered with proper textures/colors, correct proportional sizes (Earth:Moon = 3.7:1), and appropriate lighting effects (including shadows and phases of the Moon). Verify that Earth's axial tilt (23.5°) is correctly represented if seasons are simulated. Deduct 3 points if textures are missing, 3 points if relative sizes are incorrect, and 4 points if lighting/shadow effects are absent or unrealistic.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the simulation interactive with user controls?",
      "description": "Assess whether the program includes controls for users to manipulate the simulation (e.g., speed controls, zoom functionality, viewing angle changes, time progression control). Check for the ability to pause/resume the simulation and reset to initial conditions. Score 10 points if the simulation offers comprehensive controls with smooth transitions, 5 points if only basic controls are implemented, and 0 if no interactivity is provided.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are additional educational elements incorporated into the simulation?",
      "description": "Evaluate if the simulation includes informative elements such as distance measurements, orbital statistics, time indicators, or educational tooltips about Earth-Moon dynamics. Check if there's a legend or information panel explaining the simulation elements. Award full 10 points if comprehensive educational features are implemented, 5 points if basic information is displayed, and 0 if no educational elements are present.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as window resizing, browser compatibility issues, performance degradation on lower-end devices) and provide fallback mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Realistic starfield background 2. Visualization of gravitational fields 3. Animation of tidal effects 4. Ability to view from different perspectives). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple animation loops) 2. Function modules unrelated to the orbital simulation (e.g., unnecessary UI elements) 3. Fancy effects that affect performance (e.g., excessive particle systems). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating physics calculations/rendering/UI layers), code organization, and use of appropriate design patterns. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the rendering logic and physics calculations are tightly coupled. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Clean visual representation of space environment 2) Proper layout of UI controls with intuitive placement 3) Consistent color scheme appropriate for space visualization. Deduct 3 points for cluttered UI elements, 5 points for poor contrast making celestial bodies hard to distinguish, and 5 points for chaotic control panel layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the animation performance smooth and optimized?",
      "description": "Judge whether the animation runs at consistent frame rates (ideally 60fps) without stuttering: 1) Check if requestAnimationFrame is used instead of setInterval 2) Verify efficient rendering techniques (canvas/WebGL instead of DOM manipulation for animation) 3) Assess if performance optimizations are implemented for complex calculations. Deduct 5 points for noticeable frame drops, 5 points for inefficient rendering approach, and 3 points for lack of performance considerations for mobile devices. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Physics Simulation",
  "difficulty": "hard"
}
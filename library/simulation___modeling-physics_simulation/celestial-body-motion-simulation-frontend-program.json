{
  "index": 437,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration. Write a frontend program that simulates celestial body motion.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the celestial body physics simulation accurately implemented?",
      "description": "Review whether the code correctly implements fundamental physics laws including gravitational force calculations (F = G*m1*m2/r²), orbital mechanics, and velocity/acceleration updates using proper numerical integration methods (Euler, Verlet, or Runge-Kutta). Score 0 if basic physics is missing, 5 if only simple circular orbits are implemented, and 10 if realistic elliptical orbits with proper gravitational interactions between multiple bodies are included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the real-time rendering and animation system properly constructed?",
      "description": "Check whether the animation loop uses requestAnimationFrame for smooth 60fps rendering, includes proper time-step management for consistent simulation speed, and implements efficient canvas/WebGL rendering with object pooling. Deduct 5 points if frame rate drops below 30fps with multiple celestial bodies, and 3 points if animation stutters during rapid zooming or panning. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are interactive controls and camera system fully developed?",
      "description": "Evaluate whether the program includes intuitive camera controls (pan, zoom, rotate), interactive celestial body manipulation (drag to adjust position/velocity), and simulation speed controls (pause/play/fast-forward). Check for smooth camera transitions and proper coordinate system transformations. Deduct 5 points if controls are unresponsive or jerky, and 3 points if zoom limits cause rendering issues. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is comprehensive simulation configuration and preset scenarios implemented?",
      "description": "Check whether the code includes multiple preset scenarios (solar system, binary stars, asteroid field), customizable celestial body properties (mass, radius, initial velocity), and simulation parameter controls (gravitational constant, time scale). Deduct 5 points if only single scenario is available, and 3 points if celestial body properties cannot be modified dynamically. Give 10 points if multiple realistic astronomical scenarios are provided.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as division by zero in gravitational calculations, numerical instability, extreme zoom levels, invalid user inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Orbital trajectory prediction and visualization 2. Real-time gravitational field visualization 3. Celestial body collision detection and effects 4. Export simulation as video/GIF 5. Educational information panels). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple rendering loops coexisting) 2. Function modules unrelated to celestial simulation (e.g., built-in games or social features) 3. Fancy effects that affect performance (e.g., excessive particle systems or complex shaders). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core simulation functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating physics engine/renderer/UI components), performance optimization techniques, and maintainable code structure. Deduct 5 points if global state pollution is found or physics calculations are mixed with rendering code; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no performance monitoring or optimization is implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching suitable for space theme (no more than 3 primary colors) 2) Proper layout spacing for control panels (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Appropriate celestial body visual scaling and contrast. Deduct 3 points for each crowded visual element, 5 points for glaring color combinations that hurt visibility, and 5 points for chaotic UI layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Control response delay ≤ 100ms for camera and simulation controls 2) Smooth transition animations for zoom/pan operations (300-500ms duration) 3) Clear visual feedback for interactive elements 4) Intuitive celestial body selection and manipulation. Deduct 5 points for each unresponsive control operation, 3 points for visual lag during real-time simulation, and 5 points for unintuitive or hard-to-discover interaction methods. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Physics Simulation",
  "difficulty": "medium"
}
{
  "index": 244,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for display purposes. Write a frontend program that simulates the operation of a space elevator (solar elevator).",
  "checklist": [
    {
      "id": 0,
      "title": "Is the space elevator physics simulation accurate?",
      "description": "Evaluate whether the code simulates real physics principles correctly: 1) Counterweight mechanics and balance, 2) Variable gravitational effects based on altitude, 3) Tension calculations in the tether cable. Score 0 if no physics simulation exists, 5 if basic motion is simulated without accurate physics, and 10 for comprehensive physics with proper equations and constants.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the visual representation of the space elevator implemented completely?",
      "description": "Check if the visualization includes all key components: Earth representation, tether cable with proper scaling, climber/elevator car, counterweight, and geostationary orbit position. Deduct 3 points if Earth's curvature is inaccurate, 2 points if the tether lacks visual tension indicators, and 3 points if the climber mechanics aren't visually clear. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the elevator movement and control system interactive?",
      "description": "Review whether users can control the elevator's speed, direction, or stopping positions. Check if the interface includes altitude indicators, speed controls, and emergency protocols. Deduct 5 points if there are no interactive controls, 3 points if controls exist but lack feedback mechanisms, and 2 points if altitude changes aren't properly visualized. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the simulation include solar power mechanics?",
      "description": "Evaluate whether the code implements solar energy collection mechanics, energy consumption models based on elevator load and speed, and energy efficiency visualization. Score 0 if solar aspects are completely missing, 5 if basic solar elements exist without proper energy calculations, and 10 for a comprehensive solar power system with variable efficiency based on position relative to Earth and Sun.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid user inputs, extreme speed settings, resource limitations, browser compatibility issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Day/night cycle affecting solar efficiency 2. Space debris avoidance mini-game 3. Realistic atmospheric visual effects at different altitudes). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to control speed) 2. Function modules unrelated to space elevators (e.g., unrelated space exploration features) 3. Fancy effects that affect performance (e.g., excessive particle systems that slow rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating physics simulation/rendering/user interface layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast movements, and 5 points for hard-to-find key function controls. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Physics Simulation",
  "difficulty": "medium"
}
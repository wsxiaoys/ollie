{
  "index": 347,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure to ensure the generated code is executable for demonstration purposes. Write a front-end code that simulates the operation of the solar system.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the astronomical model accurate?",
      "description": "Review whether the code accurately implements the positions, sizes, and orbital parameters of celestial bodies in our solar system. Check if the relative distances and sizes are proportionally correct (can use scale factors), and if orbital mechanics follow Kepler's laws. Score 0 if the model is completely inaccurate, 5 if basic circular orbits are implemented, and 10 if elliptical orbits with proper inclinations are included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are planetary movements properly implemented?",
      "description": "Evaluate whether the simulation accurately represents the orbital periods and rotational speeds of planets. All planets should move at different speeds according to their distance from the sun (Mercury fastest, Neptune slowest). Score 0 if planets don't move, 5 if they move but at incorrect speeds, and 10 if orbital periods maintain proper proportions relative to Earth (e.g., Mars approximately 1.88 Earth years).",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the rendering system optimized for performance?",
      "description": "Assess whether the code uses efficient rendering techniques like WebGL/Canvas for smooth animation or proper DOM management if using HTML elements. Check for frame rate optimization techniques like request animation frame, object pooling, or level of detail adjustments. Deduct 5 points if the simulation lags with all planets visible, and 3 points if there's no consideration for mobile performance. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the simulation include interactive camera controls?",
      "description": "Check whether users can navigate the solar system through zooming, panning, or rotating perspectives. Score 0 if there are no controls, 5 if basic controls exist but are clunky, and 10 if the camera movement is smooth with proper constraints and a reset function. Extra points for multiple camera modes (e.g., following specific planets).",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser resizing, performance throttling on different devices, unexpected user interactions) and provide graceful degradation. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Realistic lighting and shadow effects 2. Visualization of gravitational fields 3. Comet or asteroid simulation 4. Time controls to speed up/slow down simulation). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant calculations not needed for solar system simulation 2. Function modules unrelated to astronomy (e.g., unrelated UI elements) 3. Fancy effects that severely affect performance without adding educational value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core simulation is interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating physics engine/rendering/UI layers), clean organization of celestial body data, and reusable components. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation between simulation logic and presentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet astronomical visualization standards?",
      "description": "Evaluate whether the visual representation follows scientific visualization principles: 1) Proper contrast between celestial bodies and space background 2) Visual distinction between different types of objects (planets vs moons vs asteroids) 3) Informative labels or tooltips that don't clutter the view. Deduct 3 points for each unrealistic texture, 5 points for improper lighting that makes objects unrecognizable, and 5 points for cluttered visuals that obscure the simulation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and educational?",
      "description": "Judge whether the simulation provides educational value alongside aesthetic appeal: 1) Smooth framerate during orbital movement 2) Clear indication when selecting or focusing on specific celestial bodies 3) Informative data displayed when interacting with objects. Deduct 5 points for jittery animations, 3 points for delayed response to user input, and 5 points for lack of educational information about the solar system. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Physics Simulation",
  "difficulty": "medium"
}
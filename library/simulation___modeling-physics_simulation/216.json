{
  "index": 216,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Be sure to provide executable code for demonstration. Write an HTML frontend program that simulates the movement of celestial bodies within the solar system.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the solar system model accurately implemented?",
      "description": "Check whether the code correctly simulates the orbital mechanics of planets around the sun, with appropriate scale ratios, orbital eccentricity, and relative positions. Score 0 if planets are randomly positioned, 5 if basic circular orbits are implemented, and 10 if elliptical orbits with proper Keplerian mechanics are included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all major celestial bodies of the solar system represented?",
      "description": "Evaluate if the code includes the sun, eight planets (Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune), and optionally other significant bodies (Moon, asteroid belt, dwarf planets). Deduct 1 point for each missing major planet, and give full points if all eight planets plus at least one additional celestial feature are included.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the simulation interactive and controllable?",
      "description": "Assess whether users can interact with the simulation (e.g., pause/play, speed control, zoom in/out, rotate view, follow specific planets). Give 3 points for basic playback controls, 3 points for camera manipulation, and 4 points for advanced features like focusing on specific bodies or adjusting simulation parameters.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the visualization utilize appropriate rendering techniques?",
      "description": "Check if the code uses suitable web technologies (Canvas, WebGL, SVG, or Three.js) for efficient celestial body rendering. Review whether textures, lighting, and shadows enhance visual fidelity. Score 0 for basic shapes without textures, 5 for textured planets without lighting, 10 for photorealistic rendering with appropriate technology choice.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser resizing, varying performance capabilities, different screen sizes) and provide friendly error handling or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Realistic planetary texture mapping 2. Visible orbital paths 3. Information panels for celestial bodies 4. Day/night cycles or shadow casting). Add 2.5 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple animation loops) 2. Function modules unrelated to the solar system simulation 3. Fancy effects that affect performance (e.g., excessive particle effects that cause lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating physics engine/rendering/UI controls), code organization, and performance optimization techniques. Deduct 5 points if global variables are overused; deduct 5 points if the code lacks comments or documentation; deduct 5 points if the simulation performance degrades significantly over time. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Appropriate color scheme for space visualization (dark background, contrasting celestial bodies) 2) Clean UI controls that don't obstruct the simulation 3) Professional labeling and information display. Deduct 3 points for visually distracting elements, 5 points for poor contrast making planets hard to distinguish, and 5 points for cluttered control panels. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive?",
      "description": "Judge whether the animation maintains a consistent frame rate (ideally 60fps), responds quickly to user input, and provides smooth transitions when changing views or simulation parameters. Deduct 5 points if the frame rate drops below 30fps on standard hardware, 3 points for jerky transitions between views, and 5 points for input lag exceeding 200ms. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Physics Simulation",
  "difficulty": "medium"
}
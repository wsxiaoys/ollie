{
  "index": 285,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for display. Frontend program simulating the movement of celestial bodies in the solar system.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the solar system model physically accurate?",
      "description": "Review whether the code implements proper orbital mechanics with gravitational interactions between celestial bodies. Check if Kepler's laws are correctly implemented with proper mathematical formulas for elliptical orbits. Score 0 if planetary orbits are just simple circles, 5 if basic elliptical orbits are implemented but without accurate physical parameters, and 10 if the simulation includes realistic orbital parameters, proper scaling, and accurate relative motion.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all major celestial bodies of the solar system included?",
      "description": "Evaluate the completeness of the solar system representation. The minimum should include the Sun, eight planets, and Earth's moon with correct relative sizes and orbital characteristics. Deduct 1 point for each missing major body (up to 5 points). Deduct 3 points if dwarf planets like Pluto or major asteroid belts are missing. Give full points if the simulation includes additional elements like major moons of other planets or asteroid belts with proper representation.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the rendering engine optimized for smooth animation?",
      "description": "Check whether the animation runs at a consistent frame rate (minimum 30 FPS) without stuttering even when all planets and celestial bodies are in view. Evaluate if the code uses requestAnimationFrame or similar optimization techniques rather than simple setInterval. Deduct 5 points if the animation stutters on standard hardware, and 3 points if the code doesn't implement proper time-stepping for simulation. Give full points only if the rendering maintains smooth performance with proper animation loops and timing controls.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the visualization provide interactive features?",
      "description": "Assess whether the solar system can be manipulated by users through features such as zoom in/out, rotation of the viewing angle, focus tracking on specific planets, or time acceleration controls. Score 3 points for basic camera controls, 3 points for time control (speeding up/slowing down/pausing the simulation), and 4 points for object selection and information display. Deduct all points if no interactivity is implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser resizing, device orientation changes, or unexpected user interactions) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Realistic lighting effects and shadows 2. Spacecraft or satellite trajectories 3. Historical celestial events simulation). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar rendering functions (e.g., multiple orbit calculation methods coexisting) 2. Function modules unrelated to the solar system simulation (e.g., a built-in unrelated game) 3. Fancy effects that affect performance (e.g., excessive particle effects that slow down the simulation). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating physics engine/rendering/user interface layers), code structure, and performance optimization techniques. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there is no separation between computation and rendering logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the visualization follows modern design principles: 1) Appropriate color scheme for space visualization (dark background with contrasting celestial bodies) 2) Proper scaling and proportional representation (or clear indication that scaling is artistic) 3) Professional labeling system for celestial bodies. Deduct 3 points for each visual inaccuracy in planetary representation, 5 points for poor color choices that make objects hard to distinguish, and 5 points for confusing or missing labels. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Response to user input within 100ms 2) Smooth transitions when changing views or focus 3) Clear visual feedback for user actions. Deduct 5 points for each interaction without visual feedback, 3 points for jerky transitions between views, and 5 points for confusing navigation controls. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Physics Simulation",
  "difficulty": "hard"
}
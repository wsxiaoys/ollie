{
  "index": 307,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable when possible. Write a frontend system that simulates the orbital movement of celestial bodies in the solar system.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the solar system model scientifically accurate?",
      "description": "Evaluate whether the celestial body models (Sun, planets, major moons) are proportionally sized and correctly positioned. Check if orbital parameters (semi-major axis, eccentricity, inclination) match astronomical data. Score 0 if planets are randomly placed, 5 if basic circular orbits are implemented, and 10 if Keplerian elliptical orbits with proper eccentricity are accurately modeled.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the orbital movement physics correctly implemented?",
      "description": "Review the implementation of gravitational physics. Verify if Newton's laws of motion and universal gravitation are properly applied with F=G(m₁m₂/r²). Check for time-scaling controls to observe both fast and slow movements. Deduct 5 points if gravitational interactions between planets are missing, and 3 points if orbital velocity calculations are incorrect. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the visualization rendering optimized for performance?",
      "description": "Examine whether the rendering uses appropriate technology (Canvas, WebGL, SVG) based on the complexity. Check if the code implements optimization techniques such as frustum culling, level-of-detail (LOD), or request animation frame throttling. Deduct 5 points if the frame rate drops below 30 FPS with all planets visible, and 3 points if there's no performance optimization for mobile devices. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the system provide interactive camera controls and viewpoints?",
      "description": "Assess the implementation of camera controls (pan, zoom, rotate) and predefined viewpoints (top-down, ecliptic plane, planet-centric). Check if the perspective change is smooth with proper easing functions. Deduct 5 points if camera controls are limited to 2D only, and 3 points if there are no preset viewpoints. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser resize, WebGL context loss, memory constraints, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Realistic lighting and shadow effects 2. Comet or asteroid visualization with proper trajectories 3. Time control to view historical/future planetary alignments). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant calculations for static orbital parameters 2. Excessive detail in models that impacts performance (e.g., high-poly models for distant objects) 3. Unnecessary visual effects that don't contribute to astronomical understanding. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating physics engine/rendering/UI layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching with appropriate astronomical visual cues 2) Proper layout spacing for controls and information panels 3) Professional font system for astronomical data display (readable against space background). Deduct 3 points for each crowded visual element, 5 points for inaccurate color representation of celestial bodies, and 5 points for chaotic information architecture. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Response time ≤ 100ms for interactive controls 2) Smooth transitions when changing between celestial bodies 3) Clear visual indicators for selected objects and available interactions. Deduct 5 points for each operation without feedback, 3 points for stuttering animations during planet transitions, and 5 points for confusing navigation between planetary views. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Physics Simulation",
  "difficulty": "hard"
}
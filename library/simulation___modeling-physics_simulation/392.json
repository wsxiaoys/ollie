{
  "index": 392,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to make the generated code executable for display. Write a frontend program that simulates the motion of planets in the solar system.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the solar system model accurately implemented?",
      "description": "Evaluate whether the code correctly implements the astronomical model with accurate relative sizes, distances, and orbital paths of planets. Check if planetary orbits follow Kepler's laws with proper elliptical paths and orbital periods. Score 0 if planets are randomly placed, 5 if basic circular orbits are implemented, and 10 if accurate elliptical orbits with correct astronomical proportions are used.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are planetary movement physics properly simulated?",
      "description": "Check whether the simulation implements proper physics (gravitational forces between bodies, orbital velocity variations at different points in orbit). Assess if planets move faster when closer to the Sun (perihelion) and slower when farther (aphelion). Deduct 5 points if planets move at constant speeds in perfect circles, and 3 points if axial tilts are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the visualization complete with all solar system components?",
      "description": "Evaluate the completeness of the visualization: all 8 planets, the Sun, potentially moons, asteroid belts, and dwarf planets. Check for accurate textures/colors for celestial bodies and proper lighting/shadow effects. Deduct 2 points for each missing major planet, 3 points for unrealistic textures, and 5 points if the Sun doesn't serve as a light source. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are the interactive features and controls well-implemented?",
      "description": "Assess the implementation of user controls such as zoom in/out, rotation, time acceleration/deceleration, and planet information display. Check for smooth camera transitions and the ability to focus on specific planets. Deduct 3 points if zoom functionality is missing, 3 points if time controls are absent, and 4 points if there's no way to view individual planets. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser resizing, performance throttling on different devices, WebGL context loss, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Realistic star background with actual constellations 2. Day/night cycle visualization on planets 3. Educational overlays with astronomical facts). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar rendering functions 2. Function modules unrelated to the solar system simulation 3. Fancy effects that affect performance without adding educational value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core simulation is interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating physics simulation/rendering/user interaction layers), performance optimization techniques, and resource management. Deduct 5 points if global state pollution is found; deduct 5 points if the rendering loop is inefficient; deduct 5 points if texture/model resources are not properly managed. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Balanced visual layout with the Sun and planets 2) Proper scale representation or clear indicators for actual distances 3) Clean, unobtrusive UI controls that don't distract from the simulation. Deduct 3 points for cluttered UI elements, 5 points for unrealistic or garish planet textures, and 5 points for poor contrast between UI and simulation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Consistent frame rate (minimum 30fps) 2) Smooth camera transitions when focusing on different planets 3) Proper animation timing for orbital movements. Deduct 5 points for jerky animations, 3 points for delayed response to user input, and 5 points for abrupt camera movements. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Physics Simulation",
  "difficulty": "hard"
}
{
  "index": 451,
  "question": "You are a code expert. Please utilize your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes. Write a front-end program that simulates the celestial body movements in the solar system.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the celestial body movement simulation physically accurate?",
      "description": "Evaluate whether the code implements gravitational physics correctly with Newton's law of universal gravitation or Kepler's laws. Check if orbital mechanics are simulated with proper eccentricity and inclination. Score 0 if planets move in unrealistic paths, 5 if basic circular orbits are implemented, and 10 if elliptical orbits with accurate orbital periods based on astronomical data are fully implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all major solar system bodies represented?",
      "description": "Verify the inclusion of the Sun, 8 planets (Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune), and optionally dwarf planets, moons, and asteroid belts. Each body should have relatively accurate size proportions, distinctive visual characteristics, and proper orbital positions. Deduct 2 points for each missing major planet, and 1 point for significant inaccuracies in relative size or appearance. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the simulation interactive with user controls?",
      "description": "Check for camera controls (zoom, pan, rotate), simulation speed adjustment, ability to focus on specific planets, and toggling of information displays. Award 2 points for each well-implemented control mechanism. Deduct 3 points if controls are unintuitive or laggy, and 5 points if basic navigation is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the visualization employ appropriate rendering techniques?",
      "description": "Evaluate the rendering approach - whether using Canvas 2D, WebGL/Three.js, or SVG appropriately for the scale of simulation. Check for proper lighting effects, textures for planets, shadows, and atmosphere effects where applicable. Award full 10 points for advanced 3D rendering with optimizations, 5 points for basic 3D or well-implemented 2D, and deduct 5 points if the chosen technology limits the visual quality significantly.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser compatibility issues, window resize events, memory management for long-running simulations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Realistic celestial events like eclipses or conjunctions 2. Historical mission paths or satellite tracking 3. Time-based phenomena like day/night cycles or seasons). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant calculation paths for orbital mechanics 2. Excessive detail irrelevant to the solar system demonstration (e.g., unrelated star systems) 3. Fancy effects that degrade performance (e.g., unnecessary particle systems). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating physics engine/rendering/UI controls), code reusability for celestial objects, and performance optimizations. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if performance considerations for animations are ignored. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color scheme appropriate for space visualization (dark background with contrasting elements) 2) Proper layout spacing for controls and information panels 3) Professional typography for labels and educational content. Deduct 3 points for cluttered UI elements, 5 points for poor contrast making planets hard to distinguish, and 5 points for illegible or overwhelming information displays. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the animation maintains a consistent frame rate (ideally 60fps), transitions between views are fluid, and the simulation responds promptly to user input. Deduct 5 points if the animation stutters frequently, 3 points if zoom/rotation controls feel disconnected from user actions, and 5 points if the simulation becomes unresponsive with multiple planets visible. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Physics Simulation",
  "difficulty": "easy"
}
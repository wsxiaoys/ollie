{
  "index": 338,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Write a frontend program simulating the solar system.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the solar system model astronomically accurate?",
      "description": "Evaluate whether the code implements accurate celestial mechanics, including: 1) Correct relative sizes of planets (Earth:Jupiter ratio approximately 1:11) 2) Realistic orbital paths (elliptical not circular) 3) Proper orbital periods (Earth:Mars around 1:1.88) 4) Axial tilts for seasons. Score 0 if planets are randomly positioned, 5 if basic orbits exist but proportions are inaccurate, and 10 if astronomical accuracy is maintained.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are 3D visualization techniques properly implemented?",
      "description": "Check whether the implementation uses appropriate 3D rendering technology (WebGL, Three.js, or Canvas with 3D math). Assess implementation of perspective projection, lighting models (diffuse/specular), and texture mapping for planet surfaces. Deduct 5 points if only 2D circles are used without 3D representation, 3 points if camera perspective is fixed/limited, and 2 points if textures are missing or low quality. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the simulation include interactive navigation controls?",
      "description": "Evaluate the quality of user interaction with the solar system: 1) Camera controls allowing zoom, pan, and rotation 2) Time controls for speeding up/slowing down simulation 3) Selection mechanism for focusing on specific planets with information display. Deduct 5 points if navigation controls are missing, 3 points if time control isn't implemented, and 3 points if planet selection/information viewing isn't available. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the celestial rendering visually compelling?",
      "description": "Assess the visual quality of celestial bodies: 1) High-resolution textures for planets 2) Special effects like atmosphere glow, rings for Saturn, cloud movements 3) Realistic star field background. Deduct 3 points for missing textures, 3 points for absence of special effects like Saturn's rings, and 4 points if lighting and shadows aren't realistic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser compatibility issues, window resizing, varying device performance, etc.) and provide fallback mechanisms. Code with strong robustness should maintain consistent framerate across devices and degrade gracefully on lower-end hardware, giving 10 points. If the robustness is average, give 5 points, and if no performance or compatibility considerations are implemented, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Moon systems for gas giants 2. Realistic comet or asteroid animations 3. Space mission visualization like satellite trajectories). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant rendering paths or duplicate animation loops 2. Function modules unrelated to solar system simulation (e.g., unnecessary UI elements) 3. Fancy effects that affect performance without adding educational value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core simulation is interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating physics engine/rendering/UI layers), variable naming consistency, and optimization techniques. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code lacks comments or documentation; deduct 5 points if render optimization techniques (like object pooling or frustum culling) are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for UI controls against the dark space background 2) Proper layout spacing for information panels 3) Professional typography for labels and information displays. Deduct 3 points for each cluttered UI element, 5 points for poor contrast making text unreadable, and 5 points for floating elements that obstruct the view of the simulation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Consistent framerate above 30fps 2) Smooth transitions when changing view targets 3) Responsive controls without input lag. Deduct 5 points for stuttering animations, 3 points for jerky camera movements during transitions, and 5 points for delayed response to user input. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Simulation & Modeling-Physics Simulation",
  "difficulty": "hard"
}
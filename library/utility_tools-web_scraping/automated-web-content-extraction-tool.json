{
  "index": 571,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. Develop an automated web content extraction tool where users input a webpage URL, and the tool parses the webpage and extracts content from specified elements (such as titles, paragraphs, images), with support for exporting to text or JSON format.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the URL input and webpage fetching mechanism implemented correctly?",
      "description": "Review whether the code properly handles URL validation, HTTP/HTTPS requests, and response handling. Check for proper error handling for invalid URLs, connection timeouts, and server errors. Score 0 if URL fetching is not implemented, 5 if basic implementation exists but lacks error handling, and 10 if a robust solution with comprehensive error handling is provided.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the HTML parsing and DOM traversal functionality complete?",
      "description": "Evaluate the HTML parsing logic that transforms raw HTML into a traversable structure. Check if the parser can handle malformed HTML, different encodings, and special characters. Verify if common parsing libraries (like Cheerio, JSDOM, or Beautiful Soup) are utilized effectively. Deduct 5 points if the parser fails on complex pages, 3 points if it doesn't handle different encodings, and 5 points if it crashes on malformed HTML. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the content extraction selectors comprehensive and customizable?",
      "description": "Check if the tool supports various selector methods (CSS selectors, XPath, regex patterns) for targeting specific elements. Verify if users can define custom extraction rules. Score 0 if selectors are hardcoded, 5 if basic CSS selectors are supported, and 10 if multiple selector types with customization options are available with pattern validation and examples.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the export functionality properly implemented with multiple format options?",
      "description": "Assess whether the code can export extracted content to different formats (plaintext, JSON, CSV) with proper structure preservation. Check if the export handles nested data structures, special characters, and large datasets efficiently. Deduct 5 points if only one format is supported, 3 points if the exported data lacks proper formatting/structure, and 5 points if the export function doesn't handle large datasets gracefully. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as script-heavy pages, CAPTCHAs, rate limiting, redirect chains, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Automatic content categorization 2. Readability scoring algorithm 3. Extraction templates for common websites 4. Preview mode with highlighted elements). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple HTML parsing methods used simultaneously) 2. Function modules unrelated to content extraction (e.g., built-in image editor) 3. Excessive processing that impacts performance (e.g., unnecessary DOM traversals). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating URL fetching/parsing/extraction/export logic), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Extraction process provides visual feedback during operation 2) Loading states and progress indicators for long-running tasks 3) Clear visual guidance for the extraction workflow. Deduct 5 points for each operation without feedback, 3 points for jarring transitions between states, and 5 points if key functions are hard to discover. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Web Scraping",
  "difficulty": "easy"
}
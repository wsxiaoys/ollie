{
  "index": 1716,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that the code you generate is executable when possible. Help me create a webpage code that can automatically scrape the latest 50 draws of the Super Lotto lottery numbers, and based on these 50 draws, generate 10 sets of the most probable numbers for the next drawing.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the web scraping functionality properly implemented?",
      "description": "Evaluate whether the code correctly fetches the latest 50 draws of the Super Lotto lottery numbers from an authoritative source. Check if the scraping uses proper error handling, respects robots.txt, includes request headers to avoid being blocked, and implements rate limiting. Full implementation with fallback mechanisms scores 10, basic working implementation scores 5, non-functional or missing implementation scores 0.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the data parsing and extraction logic robust?",
      "description": "Review how the HTML/JSON data is parsed to extract lottery numbers. Check for error handling when dealing with unexpected HTML structures, content changes, or data inconsistencies. Look for validation of extracted data format (confirming the correct number of main and bonus numbers). Award 10 points for comprehensive parsing with multiple fallback strategies, 5 points for basic working parsing, 0 points if parsing functionality is inadequate or missing.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the probability analysis algorithm implemented correctly?",
      "description": "Examine the statistical approach used to analyze the 50 draws and predict likely numbers. Check if the code implements frequency analysis, gap analysis, or other statistical methods. Verify that the algorithm accounts for both main numbers and bonus/powerball numbers separately. Award 10 points for sophisticated analysis with multiple statistical approaches, 5 points for basic frequency analysis, 0 points for random number generation without analysis.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the code generate 10 sets of statistically probable numbers?",
      "description": "Verify that the code generates exactly 10 sets of lottery numbers based on the analysis. Check if the output respects the Super Lotto format (correct quantity of main and bonus numbers) and avoids duplicate numbers within each set. Award 10 points if the code generates properly formatted sets with clear statistical justification, 5 points if it generates valid sets but with questionable statistical basis, 0 points if generation is missing or produces invalid sets.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, API changes, missing data entries, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visualization of frequency patterns 2. Historical trend graphs 3. Option to filter by hot/cold numbers 4. Comparison with actual winning numbers after next draw). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scraping methods for the same data) 2. Function modules unrelated to lottery prediction (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data fetching/analysis/display layers), code reusability, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments explaining the statistical methods used. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional data visualization (clear labels, appropriate chart types for frequency data). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for confusing presentation of numbers. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive?",
      "description": "Judge whether the interface updates efficiently: 1) Loading indicators during data scraping 2) Smooth transitions when generating new number sets 3) Responsive design that works on both desktop and mobile. Deduct 5 points if scraping operations block the UI thread, 3 points for lack of visual feedback during calculations, and 5 points for non-responsive layouts. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Web Scraping",
  "difficulty": "hard"
}
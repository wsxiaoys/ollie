{
  "index": 1111,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Try to ensure the generated code is executable for demonstration. I want to develop a Chrome extension plugin. It needs to get specific information from a specific iframe, organize this information into a table for copying or uploading to a database. The iframe has a class attribute: class=\"virtual-miniapp-page-container\". The specific information I want to obtain includes table header fields contained in elements with class=\"p-mux-tr index-table-pc-dist-ui-mux-yxfe-npm-schedulemanager-mux-tr\". The table body information is contained in elements that have \"index-table-pc-dist-ui-mux-yxfe-npm-schedulemanager-mux-td\" in their class attribute. Please provide the complete code structure and code. I'm a programming beginner and want to directly copy this into VSCode.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Chrome extension structure correctly implemented?",
      "description": "Check if the code includes all required extension files (manifest.json, background.js, content.js, popup.html/js) with proper configurations. The manifest.json should specify appropriate permissions for accessing iframes and DOM manipulation. Deduct 5 points if any critical file is missing, 3 points if permissions are insufficient, and 2 points if the manifest version is outdated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the iframe selection and content extraction logic robust?",
      "description": "Evaluate how the code identifies and accesses the specific iframe with class=\"virtual-miniapp-page-container\". Check if it handles cross-origin iframe access limitations, uses proper DOM traversal methods, and implements waiting/retry mechanisms for dynamically loaded content. Score 0 if iframe content cannot be accessed, 5 if basic iframe selection works but lacks error handling, and 10 if the implementation is complete with fallback strategies and secure content access.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the table header extraction logic correctly implemented?",
      "description": "Review how the code extracts table headers from elements with class=\"p-mux-tr index-table-pc-dist-ui-mux-yxfe-npm-schedulemanager-mux-tr\". Check if it handles variations in DOM structure, empty headers, and irregular formatting. Deduct 3 points if it fails on dynamic content, 2 points if it doesn't sanitize header text, and 5 points if the extraction logic is brittle (e.g., relies on fixed indices). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the table body extraction logic properly implemented?",
      "description": "Assess how the code extracts table data from elements containing \"index-table-pc-dist-ui-mux-yxfe-npm-schedulemanager-mux-td\" in their class. Check if it correctly maps cells to their respective headers, handles multi-row data, and preserves data relationships. Deduct 5 points if row/column alignment is incorrect, 3 points if special characters cause issues, and 2 points if empty cells are mishandled. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as iframe not found, content structure changes, network issues, content loading delays, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Auto-refresh for dynamic content 2. Data visualization options 3. Export to multiple formats like CSV, JSON, Excel 4. Custom filtering/sorting of extracted data). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple data extraction methods doing the same thing) 2. Function modules unrelated to data extraction (e.g., unnecessary analytics) 3. Performance-heavy operations that could be optimized (e.g., excessive DOM queries). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data extraction/processing/presentation layers), error handling coverage, and code maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no documentation or comments for beginners. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the popup UI follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the extension's operation conforms to user expectations: 1) Data extraction feedback delay ≤ 500ms 2) Clear loading states during processing 3) Intuitive controls for copying/exporting data. Deduct 5 points for operations without feedback, 3 points for flickering UI during data loading, and 5 points if the copy/export functions are difficult to locate. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Web Scraping",
  "difficulty": "easy"
}
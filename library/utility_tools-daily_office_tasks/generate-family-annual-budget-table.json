{
  "index": 707,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Please generate a family annual budget table.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the family budget table structure complete?",
      "description": "Check if the code implements all necessary components of a family budget table: income section, expense categories (fixed/variable), savings allocation, and balance calculation. Score 0 if only basic structure exists, 5 if most components are included but lack detail, and 10 if comprehensive with monthly and annual breakdowns.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the data input and modification functionality implemented?",
      "description": "Evaluate whether users can add, edit, and delete budget entries easily. Check for form validation (preventing negative values, incorrect date formats), input masks for currency, and proper error handling. Deduct 5 points if modification features are missing, 3 points if validation is incomplete. Full score requires responsive input handling.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are budget calculations and analysis features implemented?",
      "description": "Review whether the code performs accurate calculations for totals, percentages, and variances between planned vs. actual spending. Check for monthly/yearly aggregations, category-based analysis, and trend visualization. Deduct 5 points if calculations contain errors, 3 points if analysis features are basic. Full implementation should include forecasting capabilities.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the budget table include data persistence features?",
      "description": "Assess whether the code implements data saving functionality (localStorage, file export/import, or server-side storage). Check if the implementation includes backup options and data recovery. Deduct 5 points if data is lost on page refresh, 3 points if export options are limited. Full score requires seamless data persistence across sessions.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, browser compatibility issues, incomplete data entries) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visual spending patterns with charts 2. Budget health indicators/warnings 3. Financial goal tracking widgets). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple calculation methods for the same metric) 2. Function modules unrelated to family budgeting (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations on every cell update). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/view/calculation logic), code reusability, and maintainability. Deduct 5 points if global variable pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no commenting or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (appropriate use of colors for positive/negative values, categories) 2) Proper layout spacing (clear row/column structure, consistent padding) 3) Professional font system (legible numbers, appropriate emphasis on totals and headings). Deduct 3 points for cluttered tables, 5 points for poor color choices that hinder readability, and 5 points for inconsistent alignment of numerical values. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Immediate feedback when entering budget figures 2) Smooth transitions when toggling between views (monthly/yearly) 3) Intuitive navigation between budget sections. Deduct 5 points for each operation without feedback, 3 points for lagging calculations with large datasets, and 5 points for unintuitive interaction patterns. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "hard"
}
{
  "index": 904,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration purposes. Starting from March 1st, taking 4 days off followed by 2 days of work, and continuing this pattern going forward, write HTML code to generate a calendar.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the calendar core functionality properly implemented?",
      "description": "Evaluate if the HTML code correctly generates a calendar that marks days with the 4-days-off followed by 2-days-work pattern starting from March 1st. Check if the calendar properly distinguishes between 'off' and 'work' days using visual indicators. Score 0 if the pattern implementation is incorrect, 5 if basic pattern is implemented but with minor issues, and 10 if perfectly implemented with clear visual distinction between work and off days.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the calendar handle date calculations correctly?",
      "description": "Review the accuracy of date calculations, including correct handling of different month lengths (28/29/30/31 days), proper weekday assignments, and seamless transition between months. The pattern must continue correctly across month boundaries. Deduct 3 points for each calculation error found. Check if leap years are handled properly when applicable. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there proper month navigation functionality?",
      "description": "Assess whether the calendar allows users to navigate between months while maintaining the work/off pattern continuity. Check for previous/next month controls and proper state maintenance. Score 0 if navigation is absent, 5 if basic navigation exists but doesn't maintain pattern continuity, and 10 if navigation works flawlessly with pattern consistency across months.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the calendar's date range handling flexible?",
      "description": "Evaluate if the calendar allows custom start dates other than March 1st and maintains the correct pattern from any given start date. Check if the code can dynamically adjust the pattern based on user-defined parameters. Score 0 if only hardcoded for March 1st, 5 if partially flexible, and 10 if fully customizable with proper pattern maintenance.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid dates, user input errors, etc.) and provide friendly error handling or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive tooltips showing work/off status 2. Pattern statistics showing monthly work/off distribution 3. Customizable pattern settings). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant date calculation logic 2. Function modules unrelated to the calendar task 3. Fancy effects that affect performance unnecessarily. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating calendar generation logic from display elements), code reusability, and maintainability. Deduct 5 points if global state pollution is found or proper functions are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or is difficult to maintain. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the calendar design follows modern design principles: 1) Harmonious color matching for work/off days (no more than 3 primary colors) 2) Proper layout spacing (grid cells properly sized and aligned) 3) Professional font system (date numbers clearly readable, headers properly emphasized). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic calendar layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay â‰¤ 100ms when navigating months 2) Smooth transitions between calendar views 3) Clear visual indication of the current date and pattern status. Deduct 5 points for each operation without feedback, 3 points for jarring transitions, and 5 points for confusing status indicators. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "hard"
}
{
  "index": 1190,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you provide is executable and presentable. Please help me create a classroom student selector program as a HTML webpage with an attractive interface.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core student selection functionality fully implemented?",
      "description": "Review whether the code implements a complete student selection system that can randomly or systematically choose students from a class roster. Check for features like random selection, exclusion of previously selected students, and ability to mark student participation. Score 0 if selection functionality is missing, 5 if basic random selection exists, and 10 if advanced selection logic with history tracking is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the program support student data management?",
      "description": "Evaluate whether the code allows adding, editing, and removing students from the roster. Check if it supports importing/exporting student data (CSV/JSON) and persists data using localStorage or other methods. Deduct 5 points if there's no data persistence, 3 points if student information editing is limited. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a complete classroom interaction system?",
      "description": "Check whether the program includes features that enhance classroom participation like tracking student performance, recording selection history, and providing statistics on student participation. Deduct 5 points if there's no participation tracking, 3 points if historical data isn't displayed visually. Give 10 points if a comprehensive interaction system is implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the program have classroom-specific features?",
      "description": "Assess whether the code includes classroom-relevant features such as timers for student responses, grouping functionality, seating chart integration, or other teacher assistance tools. Deduct 3 points for each missing key classroom feature. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty student lists, duplicate names, invalid inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Animation when selecting students 2. Sound effects for selection 3. Customizable themes for different classroom environments). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to select students) 2. Function modules unrelated to classroom selection (e.g., a built-in game unrelated to selection) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/logic/data management), code organization, and maintainability. Deduct 5 points if global variables are excessively used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation of concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching suitable for classroom environment (no distracting colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Student selection animations are clear and informative 3) Responsive design works across device sizes. Deduct 5 points for each operation without feedback, 3 points for laggy animations during selection, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "easy"
}
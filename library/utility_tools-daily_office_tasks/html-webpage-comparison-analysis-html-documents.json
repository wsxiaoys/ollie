{
  "index": 1367,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable. Could you help me write an HTML webpage that integrates comparison and analysis functions for HTML format documents?",
  "checklist": [
    {
      "id": 0,
      "title": "Is the HTML document comparison functionality fully implemented?",
      "description": "Review whether the code accurately implements side-by-side or inline comparison of HTML documents, with clear visual differentiation between added, removed, and modified content. Score 0 if no comparison functionality exists, 5 if basic text comparison is implemented without HTML structure awareness, and 10 if the comparison handles both text content and HTML structure differences with proper visualization.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the analysis function provide comprehensive HTML document metrics?",
      "description": "Evaluate whether the analysis includes key HTML metrics such as document structure analysis, tag usage statistics, accessibility compliance checking, and semantic markup evaluation. Deduct 3 points if only basic statistics (like element counts) are provided, 5 points if structural analysis is missing, and 7 points if the analysis lacks actionable insights. Full score requires both quantitative metrics and qualitative assessment capabilities.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the document parsing and processing mechanism robust?",
      "description": "Check whether the code properly handles various HTML document inputs, including malformed HTML, different DOCTYPE declarations, and various encodings. The parser should normalize documents before comparison and handle edge cases like comments, CDATA sections, and script tags appropriately. Deduct 5 points if the parser breaks on malformed HTML, and 3 points if it doesn't properly normalize whitespace or handle special elements.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the interface provide intuitive visualization of comparison results?",
      "description": "Assess whether the visualization clearly highlights differences using color coding, navigation controls for jumping between differences, and options for different view modes (e.g., side-by-side, unified view). The visualization should be comprehensible at a glance. Deduct 5 points if navigation between differences is absent, 3 points if the visual differentiation is unclear, and 2 points if there's only one view mode available.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as extremely large documents, network interruption during file upload, corrupt HTML files, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Export comparison results in different formats 2. Integration with version control systems 3. Visual DOM tree comparison 4. Automated suggestion for HTML improvements). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple parsing engines) 2. Function modules unrelated to HTML comparison and analysis (e.g., a built-in image editor) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating parsing/comparison/visualization logic), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast scrolling or comparison transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "easy"
}
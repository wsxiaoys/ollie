{
  "index": 750,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Take care to ensure that the code you generate is executable and demonstrable. As a programmer, design a weather forecast software.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the weather data retrieval and processing system correctly implemented?",
      "description": "Evaluate whether the code includes API integration with a weather service provider (like OpenWeatherMap, WeatherAPI, etc.), proper error handling for API calls, data parsing, and caching mechanisms. Score 0 if there's no data retrieval implementation, 5 if basic API calls are made without proper error handling or caching, and 10 if complete with error handling, rate limiting protection, and efficient caching strategy for offline access.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the forecast visualization component properly implemented?",
      "description": "Check if the code implements appropriate visualization for weather conditions (temperature graphs, precipitation charts, wind direction indicators, etc.). Assess whether the visualizations are responsive and interactive. Score 0 if visualizations are missing, 5 if basic static visualizations exist, and 10 if interactive, responsive visualizations with appropriate transitions and animations are implemented.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are location services and geolocation features properly implemented?",
      "description": "Examine whether the application allows users to search for locations, automatically detect their current location, and save favorite locations. Check for proper geocoding/reverse geocoding implementation. Deduct 3 points if location search is missing, 3 points if current location detection is not implemented, and 4 points if there's no location management functionality. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the weather alert/notification system implemented?",
      "description": "Verify if the application can send users notifications about severe weather conditions, weather changes, or daily forecasts. Check for implementation of customizable alert thresholds and notification preferences. Score 0 if notification features are absent, 5 if basic notifications exist without customization options, and 10 if a complete system with customizable alerts and multiple delivery channels is implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, API errors, invalid user inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Weather impact on daily activities recommendations 2. Historical weather data comparison 3. Weather-based outfit suggestions 4. Integration with smart home systems). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple location detection methods without integration) 2. Function modules unrelated to weather forecasting (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data services/UI components/state management), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (weather-appropriate color schemes) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Clear information hierarchy for weather data. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance for changing weather conditions. Deduct 5 points for each operation without feedback, 3 points for visual after-images during forecast timeline navigation, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "medium"
}
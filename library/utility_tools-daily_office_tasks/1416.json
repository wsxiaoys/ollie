{
  "index": 1416,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Is there a simple method to create a vision test program that randomly displays the letter E facing different directions?",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core vision test functionality correctly implemented?",
      "description": "Evaluate whether the code accurately implements a vision test with the letter E displayed in random orientations (up, down, left, right). Check if the orientation is truly randomized and whether the display timing is appropriate for testing purposes. Score 0 if the core functionality is missing, 5 if basic implementation is present but has flaws, and 10 if fully implemented with proper randomization.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the user interaction mechanism properly designed?",
      "description": "Review how users indicate their perception of the E's orientation (keyboard input, button clicks, touch gestures, etc.). Check for input validation, clear instructions, and appropriate feedback after each response. Deduct 5 points if the interaction is confusing, 3 points if feedback is missing, and 2 points if instructions are unclear. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the vision test properly parameterized for clinical application?",
      "description": "Examine whether the code includes configurable parameters essential for vision testing, such as letter size (for acuity testing), contrast levels, display time, and viewing distance calculation. Deduct 3 points for each missing key parameter, and 5 points if the test doesn't follow any established vision testing protocol. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a scoring/results system to track testing performance?",
      "description": "Verify if the program includes a mechanism to track correct/incorrect responses, calculate success rates, and present meaningful results to determine vision quality. Check for proper data collection, analysis logic, and result presentation. Deduct 5 points if there's no scoring system, 3 points if results aren't properly analyzed, and 2 points if the results presentation is inadequate. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid user inputs, screen size changes, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Multiple optotype options beyond the letter E 2. Progressive difficulty adjustment based on performance 3. Color vision testing component). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to enter the same response) 2. Function modules unrelated to vision testing (e.g., unnecessary animations or effects) 3. Fancy effects that affect performance or distract from the test. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating test logic/view/data collection layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows medical testing interface standards: 1) Clean background with appropriate contrast 2) Proper layout with clear focal point 3) Professional typography with adequate size for instructions. Deduct 3 points for each distracting visual element, 5 points for poor contrast that would affect test validity, and 5 points for confusing layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the testing flow is appropriate for clinical use: 1) Appropriate timing between stimuli presentations 2) Smooth transition between test items 3) Clear visual focus during test execution. Deduct 5 points for jarring transitions that could affect test results, 3 points for inconsistent timing between stimuli, and 5 points for interaction issues that would invalidate test results. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "hard"
}
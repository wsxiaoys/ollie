{
  "index": 249,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable. Implement the following requirements in HTML for VSCode:\n\n1. Add a button (called \"Select File\") to choose different wav files, with wav files as input\n2. Process data (of type two-dimensional array, where each data point has time, frequency, and intensity indicators) generated by backend code (no need to generate this code) and visualize it\n3. Plot with time on the x-axis, frequency on the y-axis, and represent intensity with color (deeper color for higher intensity)\n4. Implement zooming capability for the x-axis (time axis) with a range from 1s to 20s, and add a slider to set the specific display range\n5. Add a button and an input field to label the selected time segment (pressing the button will mark this time segment with the string from the input field)\n6. Add a button (called \"Reset\") to restore the webpage to its initial state\n7. After marking is complete, output a .py file with the following standard Python two-dimensional array format for easy reading:\nres_lis = [\n[start_point, end_point, label],\n[start_point, end_point, label],\n...\n[start_point, end_point, label]\n]\nwhere start_point and end_point are times in milliseconds, and label is a string\n8. Provide two code files: one for input functions and one for calculating intensity\n9. When no file is input, the page should display a Cartesian coordinate system\n\nCreate a web frontend implementation for these requirements.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the file selection function properly implemented?",
      "description": "Check whether the code implements a functional 'Select File' button that allows users to choose wav files. The button should trigger a file input dialog, restrict file types to .wav format, and handle file selection events. The selected file name should be displayed to the user. Score 0 if missing, 5 if basic implementation exists but lacks validation, 10 if fully implemented with proper error handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the data visualization capability complete?",
      "description": "Evaluate whether the code can properly process and visualize the two-dimensional array data (time, frequency, intensity). Check if the visualization correctly maps time to x-axis, frequency to y-axis, and intensity to color. The color mapping should use an appropriate gradient scale. Deduct 5 points if axes are incorrectly labeled, 3 points if the color scale is not intuitive, and 5 points if the visualization does not handle varying data ranges. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the time axis zoom functionality implemented?",
      "description": "Verify if the code implements the zooming capability for the x-axis (time) with a range from 1s to 20s. The slider should adjust the visible time range dynamically, and the visualization should update accordingly without losing data integrity. Check if the slider has appropriate step sizes and if the zoom transitions are smooth. Score 0 if missing, 5 if basic implementation exists but is glitchy, and 10 if fully implemented with smooth transitions.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the time segment labeling system functional?",
      "description": "Assess if the code implements a system to label selected time segments with user input. This should include: (1) A way to select a time segment (2) An input field for the label text (3) A button to confirm the labeling. Check whether the labeled segments are visually indicated on the visualization. Deduct 3 points if segment selection is unclear, 3 points if labels don't persist visually, and 5 points if multiple selections cause conflicts. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid file formats, empty labels, overlapping time selections, etc.) and provide friendly error prompts. The code should prevent system crashes when users input unexpected values or perform operations in an unexpected order. Score 10 if robust error handling is implemented throughout, 5 if basic error handling exists but some edge cases are unaddressed, and 0 if no error handling is present.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time frequency analysis visualization 2. Multiple visualization modes 3. Label categorization with color coding 4. Keyboard shortcuts for common operations). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to reset the application) 2. Function modules unrelated to audio visualization (e.g., unnecessary animations) 3. Fancy effects that affect performance (e.g., excessive DOM manipulations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/visualization/UI interaction layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching in the visualization and UI elements 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the Python array output functionality properly implemented?",
      "description": "Judge whether the code correctly implements the functionality to output labeled time segments in the required Python array format. The output should be downloadable as a .py file, properly formatted as specified, with accurate millisecond timestamps and preserved labels. Deduct 5 points if the format is incorrect, 3 points if the time unit conversion is inaccurate, and 5 points if the download functionality fails. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "easy"
}
{
  "index": 1677,
  "question": "You are a coding expert, please utilize your professional knowledge to generate accurate, professional responses. Make sure the code you generate is executable when possible. Write a countdown mini program that outputs using HTML.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core countdown functionality properly implemented?",
      "description": "Check whether the code accurately implements a countdown timer using JavaScript with proper time calculations and interval handling. Verify if the timer decreases at the correct rate (1 second intervals) and handles time properly. Score 0 if countdown functionality is missing, 5 if basic implementation with flaws, and 10 if it includes precise time tracking with proper interval management.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the countdown have proper start, pause, and reset controls?",
      "description": "Evaluate if the code includes user controls to start, pause, and reset the countdown. Check if these controls work properly without glitches (e.g., rapid clicking causing timer anomalies). Score 0 if controls are missing, 5 if only partial controls are implemented, and 10 if all controls work flawlessly with proper event handling.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the countdown customizable by the user?",
      "description": "Assess whether users can input or select their desired countdown duration. Check for input validation to prevent invalid time values (negative numbers, non-numeric inputs). Score 0 if customization is not possible, 5 if basic input exists but lacks validation, and 10 if there's comprehensive input handling with validation and user-friendly selection methods.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the countdown provide appropriate notifications when finished?",
      "description": "Verify if the program provides clear visual and/or audible feedback when the countdown reaches zero. Check if the notification is noticeable but not intrusive. Score 0 if no completion notification exists, 5 if there's only basic text indication, and 10 if there are polished notifications (visual effects, sounds, or both) with an option to dismiss or acknowledge.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid control clicking, browser tab switching, device sleep/wake cycles, etc.) and provide graceful degradation. Code with strong robustness should maintain accurate timing and state across these scenarios, giving 10 points. If the robustness is average, give 5 points, and if no error handling exists, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visual progress indicators like circular progress bars 2. Themes or appearance customization 3. Saved presets for common countdown durations). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar timing functions 2. Function modules unrelated to countdown functionality 3. Fancy effects that affect performance or distract from core functionality. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review code organization (separation of concerns between HTML, CSS, and JavaScript), variable naming conventions, and implementation efficiency. Deduct 5 points if global namespace pollution is found; deduct 5 points if there's significant code duplication; deduct 5 points if the code uses inefficient approaches (like excessive DOM manipulation in timing loops). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the design follows modern design principles: 1) Clean and consistent color scheme 2) Proper layout with adequate spacing between elements 3) Typography that's easy to read with appropriate sizing hierarchy. Deduct 3 points for each poorly positioned element, 5 points for clashing colors or poor contrast, and 5 points for difficult-to-read text. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive?",
      "description": "Judge whether the interface responds smoothly to user interactions: 1) Button clicks register immediately 2) Timer updates smoothly without visual jitter 3) Transitions between states (running, paused, reset) are clear and intuitive. Deduct 5 points if interactions have noticeable lag, 3 points for jerky animations or updates, and 5 points if the current timer state is not clearly indicated. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "easy"
}
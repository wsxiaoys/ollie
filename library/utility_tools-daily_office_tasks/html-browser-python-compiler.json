{
  "index": 1572,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that any code you generate is executable and demonstrable. Could you write HTML code for a Python programming compiler that can run in a browser? Understand? It should allow Python code input to be executed directly.",
  "checklist": [
    {
      "id": 0,
      "title": "Is a complete web-based Python compiler UI implemented?",
      "description": "Evaluate whether the HTML code creates a proper editor interface with input area for Python code, execution button, and output display area. Check for syntax highlighting, line numbers, and proper spacing. Score 0 if the basic UI elements are missing, 5 if only basic elements are present without enhancements, and 10 if the interface is comprehensive with proper layout and editor features.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the Python code execution functionality properly implemented?",
      "description": "Check whether the solution uses appropriate methods for browser-based Python execution (e.g., Pyodide, Skulpt, Brython, or appropriate backend integration). Verify that the execution mechanism handles standard input/output properly and can run Python code as expected. Deduct 5 points if execution is limited to basic statements, and 8 points if execution relies on unsecured eval() methods. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the implementation handle Python errors and exceptions appropriately?",
      "description": "Assess whether Python runtime errors and syntax errors are properly caught, formatted, and displayed to users. The error reporting should include line numbers, error types, and descriptive messages. Deduct 5 points if errors crash the compiler instead of being gracefully handled, and 3 points if error messages are technical and not user-friendly. Full score of 10 points requires comprehensive error handling with clear user feedback.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there support for standard Python libraries and imports?",
      "description": "Evaluate whether the implementation supports importing standard Python libraries or provides workarounds. Check if common modules like math, random, datetime, etc. are available. Score 0 if no library support exists, 5 points if only basic/limited library support is provided, and 10 points if comprehensive library support is implemented with clear documentation about available modules.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as very large code inputs, infinite loops, memory-intensive operations, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Code autocompletion 2. Theme switching 3. Code sharing capability 4. Code examples/templates 5. Visualization of Python execution). Add 2 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple execution methods) 2. Function modules unrelated to Python compilation (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating editor/execution/display components), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation of concerns between UI and execution logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (editor font is monospace, size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Execution feedback delay ≤ 100ms 2) Loading indicators for long-running code 3) Clear visual focus guidance during code editing and execution. Deduct 5 points for each operation without feedback, 3 points for lack of proper loading states during execution, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "easy"
}
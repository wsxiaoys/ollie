{
  "index": 241,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Design a GUI framework that allows me to switch between functions, either through a dropdown menu or by displaying the functions directly in the menu bar, where clicking on a function switches to a different interface.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the GUI framework's core structure properly implemented?",
      "description": "Evaluate whether the code implements a proper component-based architecture with clear separation between UI elements, event handling, and state management. Check if the framework includes proper component lifecycle management (creation, mounting, updating, destruction). Score 0 if there's no clear structure, 5 if basic structure exists but lacks cohesion, and 10 if the architecture follows best practices with proper encapsulation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the navigation/routing system functional and comprehensive?",
      "description": "Review the implementation of the menu system (dropdown or menu bar) and page switching mechanism. Check if the code properly handles state preservation between page switches, supports nested routes if applicable, and provides visual feedback during navigation. Deduct 5 points if state is lost during navigation, 3 points if there's no transition feedback, and 5 points if routes cannot be bookmarked or deep-linked. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the framework extensible and configurable?",
      "description": "Assess whether the framework allows easy addition of new functions/pages without modifying core code. Check if the menu system is data-driven rather than hardcoded. Verify that styling, layout, and behaviors can be configured. Score 0 if adding new functions requires modifying core code, 5 if basic extensibility exists but with limitations, and 10 if the framework supports plugin architecture or well-defined extension points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there proper event handling and state management?",
      "description": "Evaluate the event system for handling user interactions and the state management approach. Check if the code implements proper event delegation, avoids memory leaks, and efficiently updates only changed parts of the UI. Deduct 3 points if event listeners aren't properly managed, 4 points if global state is overused or poorly organized, and 3 points if the UI doesn't reflect state changes reactively. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, missing configurations, asynchronous operation failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Animated transitions between views 2. Keyboard shortcut navigation 3. Theme switching capability 4. Responsive design adaptation). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple navigation systems coexisting) 2. Function modules unrelated to the GUI framework (e.g., unnecessary third-party integrations) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating model/view/controller components), code organization, naming conventions, and documentation quality. Deduct 5 points if global namespace pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if documentation or comments are insufficient. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast menu switching, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "easy"
}
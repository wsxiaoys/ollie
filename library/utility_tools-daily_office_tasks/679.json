{
  "index": 679,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable when possible. Implement a simple mind map tool that supports creating nodes, connecting nodes, dragging to adjust node positions, editing node content, and folding/expanding child nodes. Users should be able to change node colors, add icons, and export the mind map as PNG images. The mind map data should be able to be saved and restored.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the node creation and connection system fully implemented?",
      "description": "Review whether the code implements a complete node system including creation, connection, and hierarchy management. Node objects should have clear parent-child relationships and support tree traversal. Check if nodes can be properly positioned in a hierarchical structure, and if connections between parent-child nodes automatically update when nodes are moved. Score 0 if nodes cannot be created, 5 if basic node creation exists but connections are static, and 10 if the system fully supports dynamic node relationships with visual connections that update automatically.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the drag-and-drop functionality for node positioning implemented correctly?",
      "description": "Evaluate the drag-and-drop implementation for smoothness and accuracy. The code should handle mousedown/touchstart, mousemove/touchmove, and mouseup/touchend events properly, include collision prevention between nodes, and maintain parent-child relationships during movement. Score should account for: position calculations that handle offsets correctly (3 points), smooth rendering during drag operations (3 points), and proper event cleanup to prevent memory leaks (4 points). Deduct 5 points if dragging a parent node doesn't also move its children appropriately.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is node content editing and styling functionality complete?",
      "description": "Check whether users can edit node text content in-place (not just through a separate dialog), change text formatting (at minimum: bold, italic, or font size), and modify node colors. The implementation should handle focus management properly when editing. Score 0 if editing is not supported, 5 if only basic text editing is available, and 10 if the implementation includes text formatting options, color customization with a proper color picker, and maintains editing state properly across user interactions.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are node folding/expanding and icon addition features implemented?",
      "description": "Evaluate the implementation of node folding/expanding functionality and icon addition. The code should visually indicate which nodes can be collapsed, animate the collapse/expand transition, and maintain the mind map's overall layout after these operations. For icons, review whether users can select from multiple icon options, position icons within nodes, and whether the implementation handles the display of both text and icons elegantly. Deduct 5 points if folding animation is jarring or if the layout breaks after folding/expanding operations.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid user inputs, unexpected JSON data structures when loading saved mind maps, browser resize events affecting layout, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Automatic layout algorithms for node positioning 2. Keyboard shortcuts for common operations 3. Mind map templates or themes). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to perform the same node operations) 2. Function modules unrelated to mind mapping (e.g., an unnecessary settings panel with non-mind map related options) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data model/view/controller layers), event handling patterns, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between mind map logic and rendering. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is export functionality and data persistence implemented correctly?",
      "description": "Judge whether the mind map can be properly exported as a PNG image and if the mind map data can be saved and restored. The PNG export should capture the entire mind map with proper resolution, while the save/restore functionality should persist all node properties, positions, connections, and styling. Deduct 5 points if the PNG export crops the mind map incorrectly or has poor resolution, 5 points if the save/restore functionality doesn't maintain all node properties, and 5 points if there's no error handling for failed export or save operations. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "medium"
}
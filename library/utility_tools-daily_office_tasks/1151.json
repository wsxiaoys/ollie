{
  "index": 1151,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be careful to ensure that the code you generate is executable for demonstration. Provide complete code for implementing a virtual list in WeChat Mini Program with miniprogram-recycle-view for a long list.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core virtual list functionality correctly implemented?",
      "description": "Review whether the code correctly implements the miniprogram-recycle-view component for virtual list rendering. Check for proper initialization, configuration of recycling mechanisms, and item estimation calculations. Score 0 if the virtual list is not implemented at all, 5 if basic implementation exists but has flaws, and 10 if the implementation properly handles both fixed-height and variable-height items with efficient rendering.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the implementation handle data loading and rendering efficiently?",
      "description": "Evaluate how the code manages data loading, particularly with large datasets. Check for pagination or incremental loading implementation, proper data binding between the component and data source, and whether it avoids loading the entire dataset at once. Deduct 5 points if all data is loaded at once causing performance issues, 3 points if pagination exists but doesn't handle edge cases. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is scroll position preservation and restoration handled properly?",
      "description": "Check whether the implementation preserves and restores scroll position after page switching or during tab navigation. Verify that the code includes mechanisms for recording scroll position and implements proper scroll restoration. Deduct 5 points if scroll position is lost during tab switching, and 3 points if position restoration has noticeable jumps. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation handle WeChat Mini Program lifecycle events correctly?",
      "description": "Evaluate whether the code properly manages component lifecycle events (onLoad, onShow, onHide, onUnload) in relation to the virtual list. Check for memory leak prevention, proper initialization and destruction of the recycle-view component. Deduct 5 points for memory leaks, 3 points for missing lifecycle handlers that could cause rendering issues. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty data, network failures during data loading, unexpected data structures, etc.) and provide friendly error prompts or fallback mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Pull-to-refresh with custom animations 2. Skeleton screen during loading 3. Swipe actions for list items 4. Smart preloading based on scroll velocity). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scroll position management methods) 2. Function modules unrelated to the virtual list (e.g., excessive UI decorations) 3. Fancy effects that affect performance (e.g., complex animations on each list item). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating list component/data fetching/UI rendering), proper component abstraction, and code reusability. Deduct 5 points if global state pollution is found or if the component isn't properly encapsulated; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if configuration options are hard-coded. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the list UI follows WeChat Mini Program design guidelines: 1) Consistent with WeChat's visual language (proper use of spacing and borders) 2) Proper list item layout (content hierarchy, reasonable padding) 3) Professional text handling (appropriate font sizes, proper truncation). Deduct 3 points for each inconsistent visual element, 5 points for poor content hierarchy, and 5 points for improper text handling. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the scrolling and interaction conform to user expectations: 1) Smooth scrolling without jank at 60fps 2) Proper loading indicators during data fetching 3) No visible rendering gaps or flickering during scrolling. Deduct 5 points for noticeable frame drops during scrolling, 3 points for missing loading states, and 5 points for visible item recycling (height jumps or content flashing). The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "medium"
}
{
  "index": 671,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration. Implement a PDF text extraction tool that allows users to upload PDF files, extract text content, perform simple editing on the content, and save it in new file formats (txt, docx, etc.).",
  "checklist": [
    {
      "id": 0,
      "title": "Is the PDF upload and parsing functionality correctly implemented?",
      "description": "• Check if the code properly handles PDF file uploads with validation for file types and size limits. Verify if a reliable PDF parsing library (like pdf.js, pdfminer, PyPDF2, etc.) is correctly implemented and properly handles both text-based and scanned PDFs (with OCR if applicable). Deduct 5 points if only basic PDF handling is implemented without error handling, 3 points if no validation exists. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the text extraction feature complete and accurate?",
      "description": "• Evaluate the accuracy and completeness of text extraction, including proper handling of formatting, special characters, multi-column layouts, and embedded fonts. Check if the extraction preserves paragraph structure, headings, and lists. Score 0 if extraction fails on common PDFs, 5 if basic extraction works but loses formatting, and 10 if extraction is comprehensive and preserves document structure.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the text editing functionality properly implemented?",
      "description": "• Assess whether the code includes a complete set of text editing features (search/replace, formatting options, paragraph management, etc.) with proper text selection and cursor positioning. Check if changes are tracked properly and can be undone/redone. Deduct 3 points if basic formatting is missing, 5 points if undo/redo is not implemented, and give 10 points for comprehensive editing capabilities.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the export to multiple file formats correctly implemented?",
      "description": "• Verify if the code supports exporting to various formats (txt, docx, rtf, html, etc.) with appropriate libraries and maintains formatting during conversion. Check if metadata and document properties are preserved where applicable. Deduct 3 points for each missing major format, 5 points if formatting is lost during export. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "• Evaluate whether the code can handle common abnormal situations (such as corrupted PDFs, memory-intensive large files, network interruption during upload/download, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "• Check whether the code includes surprise features that enhance the experience (e.g., 1. Batch processing of multiple PDFs 2. Advanced text analysis like keyword extraction 3. PDF annotation preservation 4. Table detection and conversion to spreadsheet formats). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "• Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple text processing engines) 2. Function modules unrelated to PDF handling or text editing (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., unnecessary animations during processing). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "• Review modular design (such as separating upload/parsing/editing/export components), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "• Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "• Judge whether the dynamic effects conform to human perception characteristics: 1) Progress indicators for long-running PDF operations 2) Transition animation duration controlled between 300-500ms 3) Clear visual feedback for text selection and editing actions. Deduct 5 points for operations without loading indicators during processing, 3 points for laggy text editing experience, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "medium"
}
{
  "index": 1107,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code whenever possible. Write me a small shopping price comparison program.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core price comparison functionality implemented?",
      "description": "Check if the code implements the ability to compare prices of products across different sources/stores. It should include data structures to store product information (name, price, source) and algorithms to sort/filter by price. Score 0 if comparison logic is missing, 5 if basic comparison exists but lacks comprehensive filtering, and 10 if advanced sorting, filtering, and product matching functionality is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the program handle multiple data sources?",
      "description": "Evaluate whether the program can retrieve product information from multiple sources (e.g., web scraping, APIs, local database, manual input). Deduct 5 points if only a single data source is supported, 3 points if multiple sources but no error handling for failed sources. The full score is 10 points if it handles multiple sources with proper fallback mechanisms.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the data collection/retrieval process well-designed?",
      "description": "Review how product data is collected and stored. Check for web scraping capability, API integration, or user input mechanisms. Deduct 5 points if the data collection is hardcoded with no extensibility, and 3 points if there's no validation for collected data. Award 10 points for a comprehensive system with configurable data providers and proper caching.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the user interface intuitive and functional?",
      "description": "Assess whether the program provides a clear interface (CLI, GUI, web) for users to search products, view comparisons, and sort results. Deduct 5 points for a difficult-to-navigate interface, 3 points if search/filter functionality is limited. Award 10 points for an intuitive interface with clear product displays, sorting options, and filter capabilities.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network errors, malformed input data, unavailable sources, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Price history tracking and alerts 2. AI-powered deal recommendations 3. Coupon integration 4. Browser extension for real-time comparisons). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple filtering mechanisms that do the same thing) 2. Function modules unrelated to price comparison (e.g., a built-in calculator when simple math would suffice) 3. Fancy effects that affect performance (e.g., excessive animations in a utility app). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data collection/processing/display layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Daily Office Tasks",
  "difficulty": "easy"
}
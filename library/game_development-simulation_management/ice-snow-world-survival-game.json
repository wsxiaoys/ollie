{
  "index": 32,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code when possible.\n\nPlease use HTML and JavaScript to implement an \"Ice and Snow World\" game.\n\nTask: Design an ice and snow world game where players need to survive in an extremely cold environment and complete missions.\n\nSuggestion: Implement ice and snow environment and survival mechanisms.\n\nPlease add comments in your code so other developers can understand your implementation process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the ice and snow environment fully implemented?",
      "description": "Review whether the code creates an immersive ice and snow environment through visual elements (snow textures, ice formations, cold-themed color palette) and environmental effects (falling snow, wind effects, fog). Score 0 if the environment is not distinguishable as an ice/snow setting, 5 if basic snow graphics are implemented, and 10 if the environment includes dynamic weather effects and interactive snow physics.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the survival mechanism properly implemented?",
      "description": "Check whether the code implements core survival mechanics including temperature/cold resistance system, hunger/thirst indicators, energy management, and health tracking. Deduct 3 points if any core survival metric is missing, 5 points if there's no visual feedback on survival status, and 7 points if the survival mechanics don't meaningfully impact gameplay. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the mission mechanics and progression system implemented?",
      "description": "Evaluate whether the code includes a structured mission system with clear objectives, progress tracking, and rewards. Check for mission variety (gathering resources, building shelter, reaching locations) and difficulty progression. Deduct 5 points for lack of mission variety, 3 points for missing progress indicators, and 5 points if missions don't connect to a larger progression system. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the player movement and interaction with the environment implemented?",
      "description": "Assess whether player movement feels responsive in the snow environment (including reduced speed in deep snow, slipping on ice) and if environment interaction is meaningful (gathering resources, building shelter, melting ice/snow). Score 0 if movement mechanics are generic with no snow-specific physics, 5 if basic snow movement is implemented, and 10 if the environment interaction is comprehensive and feels realistic.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as out-of-bounds input, network interruption, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic temperature system affected by time of day and shelter 2. Realistic snow deformation and footprints 3. Interactive crafting system for survival tools). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple movement control systems) 2. Function modules unrelated to ice/snow survival (e.g., tropical mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects that lag gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/environment physics layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Cold-themed color palette appropriate for an ice world (blues, whites, with limited warm accents for UI elements) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for inappropriate color combinations that break immersion, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Snow/ice movement animations feel natural and physics-based 3) Clear visual feedback for environmental dangers like hypothermia or frostbite. Deduct 5 points for each operation without feedback, 3 points for unnatural snow movement or accumulation, and 5 points for missing vital survival information indicators. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Simulation/Management",
  "difficulty": "hard"
}
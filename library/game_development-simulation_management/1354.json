{
  "index": 1354,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable when possible. Help me create a web-based single-player cooking game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the cooking game mechanics fully implemented?",
      "description": "Review whether the code accurately implements core cooking mechanics through HTML/JavaScript, including ingredient preparation, cooking processes (chopping, frying, boiling, etc.), timing systems, and recipe completion validation. Score 0 if core cooking interactions are not implemented, 5 if only basic ingredient handling is present, and 10 if comprehensive cooking mechanics with multiple recipes and cooking methods are fully included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the game progression and level system implemented?",
      "description": "Check whether the game includes a structured progression system with multiple levels, difficulty scaling, recipe unlocking mechanisms, and player skill advancement. Evaluate if scoring/rating systems are present for completed dishes. Deduct 5 points if no progression tracking exists, and 3 points if level transitions are abrupt without proper difficulty curves. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the real-time cooking simulation and timing system designed properly?",
      "description": "Evaluate whether the cooking simulation includes realistic timing mechanisms for different cooking processes, ingredient state changes (raw to cooked), temperature management, and multi-tasking capabilities. Check if players can manage multiple cooking processes simultaneously. Deduct 5 points if timing is unrealistic or inconsistent, and 3 points if no visual feedback is provided for cooking states. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is complete game state management and save functionality constructed?",
      "description": "Check whether the code includes comprehensive game state management, including progress saving, recipe collection tracking, high score persistence, and game pause/resume functionality. Deduct 5 points if local storage is not implemented for game progress, and 3 points if the game cannot properly resume after interruption. Give 10 points if fully implemented with robust state persistence.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid user inputs, timer conflicts, resource loading failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the cooking game experience (e.g., 1. Recipe suggestion system based on available ingredients 2. Cooking tutorial with interactive guidance 3. Customizable kitchen layouts 4. Sound effects that match cooking actions). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple timer systems coexisting) 2. Function modules unrelated to cooking games (e.g., built-in social media features) 3. Overly complex animations that affect gameplay performance (e.g., excessive particle effects during cooking). Deduct 3 points for each redundancy found, and directly deduct 10 points if core cooking functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/rendering/input handling), code organization, and maintainability. Deduct 5 points if global state pollution is found or proper architecture patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 3 points if functions are not properly documented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional game design standards?",
      "description": "Evaluate whether the visual design follows modern game UI principles: 1) Cohesive color scheme that fits cooking theme (warm, appetizing colors) 2) Proper visual hierarchy with clear ingredient/tool identification 3) Consistent iconography and typography (readable fonts ≥ 14px). Deduct 3 points for each cluttered interface element, 5 points for poor color choices that hinder gameplay, and 5 points for confusing visual layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the interactive gameplay smooth and engaging?",
      "description": "Judge whether the game interactions provide satisfying feedback: 1) Immediate response to player actions (≤ 100ms) 2) Smooth drag-and-drop for ingredients with proper visual feedback 3) Clear audio-visual cues for cooking progress and completion 4) Intuitive controls that don't require extensive learning. Deduct 5 points for each unresponsive interaction, 3 points for confusing control schemes, and 5 points for lack of satisfying feedback mechanisms. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Simulation/Management",
  "difficulty": "hard"
}
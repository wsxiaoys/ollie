{
  "index": 136,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes.\n\nPlease use HTML and JavaScript to implement a Space Colony game, where players need to establish colonies in space.\nHint: Implement space environment and resource management.\nInclude comments in the code so that other developers can understand your implementation process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the space environment visualization properly implemented?",
      "description": "Review whether the code creates a visually appealing space environment with appropriate celestial bodies, stars, or other space elements using HTML5 Canvas/SVG/WebGL. Check if the environment has depth perception and proper scaling. Score 0 if there's no visual environment, 5 if it's basic/static, and 10 if it has dynamic elements with proper physics representation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the colony building system fully functional?",
      "description": "Evaluate whether players can place, upgrade, and manage different types of colony structures. Check if there are different building categories (like habitats, resource extractors, energy generators) with unique functions. Deduct 5 points if buildings lack visual differentiation, 3 points if upgrade paths aren't implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the resource management system comprehensive?",
      "description": "Check whether the game implements a complete resource economy (oxygen, water, minerals, energy, food) with meaningful collection, storage, consumption, and conversion mechanics. Verify if resource constraints create meaningful gameplay decisions. Deduct 3 points if resource visualization is missing, 5 points if the resource system lacks balance or complexity. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the gameplay loop well-designed with clear progression?",
      "description": "Assess whether the code implements a satisfying gameplay loop with short-term goals and long-term colony development. Check if there are research systems, milestones or achievements to guide player progression. Deduct 5 points if there's no clear goal structure, 3 points if progression feels linear or lacks meaningful choices. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, runtime errors, edge cases in game mechanics) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic disasters like meteor showers or solar flares 2. Colonist needs and happiness systems 3. Procedural generation of space environments). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple resource tracking systems) 2. Function modules unrelated to space colonization (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game mechanics/view/data management layers), code organization, and maintainability. Evaluate quality of comments as specified in the requirements. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if comments are missing or unhelpful. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (space-appropriate palette with clear contrast) 2) Proper layout spacing (UI elements organized in logical groups with proper hierarchy) 3) Professional font system (readable fonts with good contrast against space backgrounds). Deduct 3 points for each crowded visual element, 5 points for poor color choices that harm readability, and 5 points for chaotic UI organization. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the game interactions feel responsive and intuitive: 1) Building placement and selection feels precise 2) Resource management interfaces update smoothly 3) Clear visual feedback for all player actions. Deduct 5 points for laggy animations, 3 points for confusing interaction models, and 5 points for missing feedback on important game events. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Simulation/Management",
  "difficulty": "easy"
}
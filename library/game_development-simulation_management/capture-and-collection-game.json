{
  "index": 7,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable and can be demonstrated.\n\nPlease use HTML and JavaScript to implement a Capture and Collection game.\n\n**Task**: Implement a capturing system where players can capture certain objects or creatures in the game through specific operations, and collect them.\n\n**Hint**: You can capture objects by throwing nets or using specific items, and add them to the player's collection.\n\nPlease include comments in your code so other developers can understand your implementation process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the capture mechanism fully implemented?",
      "description": "Review whether the code accurately implements capture operations through HTML/JavaScript, including throwing mechanics (trajectory calculation, collision detection), capture success/failure logic, and different capture tools (nets, traps, etc.). Score 0 if core capture interaction is not implemented, 5 if only basic click-to-capture is implemented, and 10 if physics-based throwing with realistic trajectories and multiple capture methods are fully included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the collection system comprehensively designed?",
      "description": "Check whether the collection system includes inventory management, item categorization, rarity systems, and collection progress tracking. Evaluate if captured objects have different attributes (size, rarity, behavior patterns). Deduct 5 points if no inventory UI is provided, 3 points if objects lack unique properties, and 2 points if collection statistics are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the game objects and creatures intelligently designed?",
      "description": "Evaluate whether capturable objects/creatures have realistic movement patterns, AI behaviors (fleeing, hiding, different speeds), and spawn mechanics. Objects should have varied difficulty levels and unique characteristics. Deduct 5 points if objects are static or move in simple patterns, 3 points if no difficulty progression exists, and 2 points if spawn timing is not balanced. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the complete game progression system constructed?",
      "description": "Check whether the code includes complete progression mechanics such as player levels, unlockable capture tools, achievement systems, and collection milestones. Evaluate if there are rewards for completing collections and progression feedback. Deduct 5 points if no progression tracking is implemented, 3 points if achievements are missing, and 2 points if unlock mechanisms are absent. Give 10 points if fully implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as out-of-bounds input, rapid clicking, collision edge cases, inventory overflow, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Photo mode for captured creatures 2. Breeding/evolution system 3. Trading mechanism 4. Environmental interaction affecting capture rates 5. Mini-games for difficult captures). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple capture validation logics coexisting) 2. Function modules unrelated to capture/collection gameplay (e.g., built-in calculator) 3. Fancy effects that affect performance (e.g., excessive particle systems on every capture). Deduct 3 points for each redundancy found, and directly deduct 10 points if core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating capture logic/collection management/rendering layers), code documentation quality, and maintainable structure. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if comments are insufficient or unclear. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Clear inventory and collection UI organization. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Capture action feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance for capturable objects 4) Smooth inventory opening/closing animations. Deduct 5 points for each operation without feedback, 3 points for visual after-images during object movement, and 5 points for hard-to-identify interactive elements. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Simulation/Management",
  "difficulty": "medium"
}
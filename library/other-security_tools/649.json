{
  "index": 649,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable whenever possible. Build a network security scanner that can detect common website security vulnerabilities such as XSS, CSRF, SQL injection, and other risks. Scanning results should be displayed by severity level (high, medium, low risk) and provide detailed vulnerability descriptions and remediation suggestions. The scanner should support scan history records and scheduled automatic scanning functionality.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core vulnerability detection engine fully implemented?",
      "description": "Review whether the code accurately implements detection algorithms for XSS, CSRF, SQL injection, and other common vulnerabilities. Check if the scanner includes proper payload injection, response analysis, and pattern matching mechanisms. Score 0 if core detection logic is missing, 5 if only basic vulnerability checks are implemented, and 10 if comprehensive detection covers all major OWASP Top 10 vulnerabilities with accurate identification.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the network scanning and crawling mechanism properly designed?",
      "description": "Evaluate whether the implementation includes efficient web crawling with proper HTTP request handling, cookie management, and session tracking. Check for rate limiting, concurrent request management, and robots.txt compliance. Deduct 5 points if no rate limiting is implemented, and 3 points if the scanner doesn't handle JavaScript-rendered content. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the severity classification and risk assessment system accurate?",
      "description": "Check whether the code implements a comprehensive risk scoring algorithm that properly categorizes vulnerabilities into high, medium, and low severity levels based on CVSS standards or similar frameworks. Evaluate if the assessment considers exploitability, impact, and environmental factors. Deduct 5 points if severity levels are arbitrarily assigned without proper scoring methodology. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are scan history and scheduled scanning features fully functional?",
      "description": "Verify whether the system includes persistent storage for scan results, historical data comparison, and trend analysis. Check if scheduled scanning supports cron-like configurations, proper job queuing, and failure recovery mechanisms. Deduct 5 points if data persistence is not implemented, and 3 points if the scheduling system lacks error handling. Give 10 points if fully implemented with comprehensive reporting capabilities.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network timeouts, malformed responses, target server errors, rate limiting, etc.) and provide appropriate error handling and recovery mechanisms. Code with strong robustness should effectively handle edge cases including DNS resolution failures, SSL certificate issues, and unexpected server responses, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes advanced features that enhance security scanning capabilities (e.g., 1. Machine learning-based anomaly detection 2. Interactive vulnerability exploitation proof-of-concept 3. Integration with threat intelligence feeds 4. Automated penetration testing workflows). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar scanning functions (e.g., multiple XSS detection engines coexisting) 2. Function modules unrelated to security scanning (e.g., built-in web server for non-scanning purposes) 3. Resource-intensive features that slow down scanning (e.g., unnecessary GUI animations during scanning). Deduct 3 points for each redundancy found, and directly deduct 10 points if core scanning functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating scanning engine/reporting/scheduling components), security considerations in code design, and proper configuration management. Deduct 5 points if sensitive data is hardcoded or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no input validation or output sanitization is implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional security tool design standards?",
      "description": "Evaluate whether the dashboard design follows security industry standards: 1) Clear severity color coding (red for high, yellow for medium, green for low risk) 2) Proper data visualization with charts and graphs 3) Professional layout with adequate whitespace and readable typography (body font ≥ 14px, line height ≥ 1.5). Deduct 3 points for each confusing visual element, 5 points for poor color contrast affecting readability, and 5 points for cluttered information presentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the scanning workflow and user interaction smooth and intuitive?",
      "description": "Judge whether the scanning process provides clear user feedback: 1) Real-time scanning progress indicators 2) Responsive controls with feedback delay ≤ 100ms 3) Clear navigation between scan results and detailed vulnerability information 4) Intuitive export and reporting functions. Deduct 5 points for each operation without proper feedback, 3 points for confusing navigation flow, and 5 points for hard-to-access critical functions like vulnerability details or remediation guides. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Other-Security Tools",
  "difficulty": "medium"
}
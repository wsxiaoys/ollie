{
  "index": 1234,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration purposes. How can I use two JavaScript libraries, enjiuno/msg-reader and rtf-stream-parser, to convert an Outlook Item File (.msg) to HTML in a browser? This is my first question, please provide me with a complete demo code.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the MSG to HTML conversion functionality fully implemented?",
      "description": "Evaluate whether the code correctly implements the core conversion from .msg to HTML using both libraries (enjiuno/msg-reader and rtf-stream-parser). Check if the solution properly extracts email content, attachments, header information, and formats them into proper HTML. Score 0 if conversion is not implemented, 5 if basic text extraction works but formatting is lost, and 10 if the conversion preserves formatting, images, and structure.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the browser-side file handling properly implemented?",
      "description": "Check if the code implements proper browser file handling mechanisms, including file input, drag-and-drop support, MIME type validation, and efficient file reading. Verify if the solution uses FileReader API appropriately and handles different file sizes gracefully. Deduct 5 points if there's no file validation, 3 points if large files cause UI freezing without any loading indicators. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the dependencies properly integrated?",
      "description": "Assess how well the two libraries (enjiuno/msg-reader and rtf-stream-parser) are integrated. Check for proper import/require statements, version compatibility, error handling when libraries fail to load, and appropriate use of their APIs. Deduct 5 points if library integration requires server-side proxies without explanation, and 3 points if browser compatibility issues aren't addressed. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the HTML output properly sanitized and rendered?",
      "description": "Evaluate whether the generated HTML is properly sanitized to prevent XSS attacks, and if it's correctly rendered in the browser. Check if email-specific elements (like headers, signatures, quotes) are semantically structured. Deduct 5 points if no sanitization is performed, 3 points if HTML emails display broken layouts. Check if CSS is included for proper styling and consistent rendering across browsers. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid .msg files, corrupted data, memory constraints, parsing errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Preview mode for attachments 2. Contact card extraction and display 3. Email thread visualization). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple parsing methods for the same content) 2. Function modules unrelated to MSG-to-HTML conversion (e.g., a built-in PDF viewer) 3. Fancy effects that affect performance (e.g., unnecessary animations during conversion). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating parsing logic/view/file handling layers), error handling coverage, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no performance optimizations for large files. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Progress indicator during conversion 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for operations without feedback, 3 points for jarring transitions between file selection and display, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Batch Processing",
  "difficulty": "medium"
}
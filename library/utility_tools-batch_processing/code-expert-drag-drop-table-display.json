{
  "index": 788,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional replies. Make sure the code you produce is executable and demonstrable. You can drag and drop folders or multiple files, the functionality remains unchanged, and display the results in table format.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the code properly structured for file/folder handling?",
      "description": "Evaluate whether the code implements proper detection and handling of both individual files and folder structures. Check if it recursively traverses directories when needed and correctly preserves folder hierarchies. Score 0 if basic file handling is missing, 5 if only single file handling is implemented, and 10 if complete folder structure handling with proper error cases is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is drag and drop functionality properly implemented?",
      "description": "Assess whether the code correctly implements HTML5 drag and drop API with proper event handling (dragenter, dragover, dragleave, drop). Check if it prevents default browser behaviors, provides visual feedback during drag operations, and handles multiple file selections. Deduct 5 points if drag highlighting is missing, 3 points if it doesn't handle browser compatibility issues. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is file processing and data extraction handled efficiently?",
      "description": "Review how the code extracts and processes data from various file types. Check if it uses appropriate APIs (FileReader, Blob, etc.), handles large files efficiently (e.g., streaming for large files), and properly sanitizes input data. Deduct 5 points if it lacks progress indicators for large files, 3 points if memory management for large datasets is poor. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the table display functionality properly implemented?",
      "description": "Evaluate whether the code effectively presents data in a well-structured table format with proper styling and layout. Check for sorting capabilities, pagination for large datasets, responsive design, and proper handling of various data types. Deduct 5 points if no sorting functionality, 3 points if the table is not responsive, and 5 points if complex data types aren't properly displayed. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as unsupported file types, corrupted files, very large files, browser limitations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Preview thumbnails for image files 2. Syntax highlighting for code files 3. Data visualization options for numerical data). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file parsing methods that do the same thing) 2. Function modules unrelated to file handling and table display 3. Fancy effects that affect performance (e.g., excessive animations during file loading). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating file handling/data processing/UI rendering layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Feedback when files are being processed ≤ 200ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual guidance for drop zones. Deduct 5 points for each operation without feedback, 3 points for jerky animations during table rendering, and 5 points for confusing drag and drop areas. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Batch Processing",
  "difficulty": "hard"
}
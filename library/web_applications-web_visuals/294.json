{
  "index": 294,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate can be executed and demonstrated. Vue3 cabinet topology diagram demo",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Vue3 cabinet topology diagram core rendering functionality fully implemented?",
      "description": "Review whether the code accurately implements cabinet topology visualization using Vue3 composition API, including cabinet node rendering, connection line drawing, and interactive selection mechanisms. Score 0 if basic topology structure is not displayed, 5 if only static cabinet nodes are shown, and 10 if complete interactive topology with dynamic connections and real-time updates is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the cabinet hierarchy and relationship management properly structured?",
      "description": "Check whether the implementation includes proper data modeling for cabinet relationships (parent-child, peer connections), supports multi-level topology nesting, and provides real-time topology state management. Deduct 5 points if cabinet relationship data structure is poorly designed, and 3 points if topology updates don't reflect in real-time. Full score requires complete hierarchy management with bidirectional relationship tracking.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are cabinet interaction features and operations comprehensively implemented?",
      "description": "Evaluate whether the topology supports essential cabinet operations including drag-and-drop positioning, zoom in/out functionality, cabinet detail inspection, and connection line management. Two-way data binding between cabinet properties and visual representation is required. Deduct 5 points if drag-and-drop is not smooth, and 3 points if zoom operations cause layout distortion.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the topology layout algorithm and responsive design optimized?",
      "description": "Check whether the code implements intelligent cabinet positioning algorithms (such as force-directed layout or hierarchical layout), supports automatic layout adjustment, and provides responsive design for different screen sizes. Deduct 5 points if cabinet overlapping occurs frequently, and 3 points if mobile compatibility is poor. Full score requires adaptive layout with collision avoidance.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid cabinet data, network interruption, large dataset rendering, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle edge cases including empty data states and performance degradation scenarios, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the topology experience (e.g., 1. Real-time cabinet status monitoring with color coding 2. Cabinet path finding and route highlighting 3. Interactive cabinet grouping and filtering 4. Export topology as image/PDF 5. Cabinet search and auto-navigation). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar topology functions (e.g., multiple layout algorithms running simultaneously) 2. Function modules unrelated to cabinet topology (e.g., built-in chat system) 3. Fancy effects that affect topology performance (e.g., excessive particle animations on connections). Deduct 3 points for each redundancy found, and directly deduct 10 points if core topology functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review Vue3 best practices including proper composition API usage, component modularity (topology view/data layer/interaction layer separation), TypeScript integration, and build process optimization. Deduct 5 points if reactive data management is poorly implemented or Vue3 patterns are not followed; deduct 5 points if component reusability is low (over 30% code duplication); deduct 5 points if build configuration lacks optimization. Full score requires professional Vue3 architecture.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the topology visual design meet professional standards?",
      "description": "Evaluate whether the topology design follows modern UI principles: 1) Consistent cabinet node styling with clear visual hierarchy 2) Appropriate color coding for different cabinet types/states (maximum 5 primary colors) 3) Professional typography for labels and annotations (minimum 12px font size) 4) Proper spacing and alignment following grid principles. Deduct 3 points for each visual inconsistency, 5 points for poor color contrast or accessibility issues, and 5 points for cluttered layout affecting readability.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the topology interaction smooth and seamless?",
      "description": "Judge whether the topology interactions conform to user experience standards: 1) Cabinet selection feedback delay â‰¤ 100ms 2) Smooth pan/zoom operations with proper easing (300-500ms transitions) 3) Clear visual feedback for hover states and active selections 4) Intuitive connection line rendering without performance lag. Deduct 5 points for each laggy interaction, 3 points for unclear visual states during operations, and 5 points for difficult-to-access topology controls or navigation.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Web Visuals",
  "difficulty": "hard"
}
{
  "index": 1632,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code in your demonstrations whenever possible. How do I create a .NET 6.0 website that can browse maps and set location markers using the Baidu API?",
  "checklist": [
    {
      "id": 0,
      "title": "Is the .NET 6.0 project structure properly set up?",
      "description": "Check whether the code correctly implements a .NET 6.0 web application structure with proper MVC/Razor Pages patterns, appropriate project organization, and dependency injection configuration. Score 0 if using outdated .NET Framework, 5 if using .NET Core 3.1 or .NET 5, and 10 if correctly implemented with .NET 6.0 specific features (minimal APIs or traditional controllers).",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is Baidu Maps API integration properly implemented?",
      "description": "Review if the code includes proper Baidu Maps API key configuration, correct script loading with appropriate API version, and proper JavaScript initialization. Verify error handling for API loading failures and API key validation. Deduct 5 points if API key is hardcoded in client-side code, 3 points if no error handling for map initialization failures. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the map browsing functionality complete?",
      "description": "Evaluate whether the implementation includes essential map browsing capabilities: pan, zoom controls, map type switching, and geolocation. Check if the code handles responsive design for different screen sizes. Deduct 3 points if zoom controls are missing, 5 points if geolocation functionality isn't implemented, and 2 points if map type switching is absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the marker management system fully functional?",
      "description": "Check whether the marker system includes adding, editing, removing, and persisting markers. Verify if marker data includes appropriate properties (coordinates, title, description, custom icons). Deduct 5 points if marker persistence to database is missing, 3 points if marker customization is limited, and 5 points if CRUD operations are incomplete. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as API failures, network interruptions, invalid coordinates, and concurrent marker operations) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Marker clustering for handling large datasets 2. Custom polygon/polyline drawing 3. Heatmap visualization 4. Route planning between markers). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple map initialization routines) 2. Function modules unrelated to mapping (e.g., unnecessary social media integrations) 3. Fancy effects that affect performance (e.g., excessive animations or autoplay videos). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating map services/controllers/view models), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Map interaction response delay ≤ 100ms 2) Marker animation duration controlled between 200-400ms 3) Clear visual feedback when placing markers. Deduct 5 points for each operation without feedback, 3 points for laggy map rendering during pan/zoom operations, and 5 points for confusing marker placement UI. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Web Visuals",
  "difficulty": "easy"
}
{
  "index": 278,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure that the code you generate is executable for demonstration purposes. Help me write an HTML that can render a 3D street view.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the 3D street view rendering system properly implemented?",
      "description": "Check if the code properly implements a 3D street view using appropriate technology (WebGL, Three.js, Babylon.js, etc.). Evaluate if it includes camera controls, perspective projection, and proper scene setup. Score 0 if no 3D rendering is implemented, 5 if basic scene rendering is present, and 10 if a complete street environment with proper depth and perspective is achieved.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are interactive navigation controls implemented?",
      "description": "Verify if the code includes intuitive navigation controls (pan, tilt, zoom, street movement) with keyboard/mouse/touch support. Check for smooth camera transitions between positions and proper collision detection to prevent going through buildings/objects. Deduct 5 points if navigation is limited to basic rotation only, 3 points if movement feels jerky or unnatural. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the street view include realistic environment elements?",
      "description": "Evaluate the presence and quality of urban environment elements (buildings, roads, sidewalks, street furniture, vehicles, etc.). Check if textures are properly applied and if lighting creates realistic shadows. Deduct 3 points for missing essential street elements, 5 points for unrealistic textures, and 3 points for poor lighting implementation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is performance optimization implemented for 3D rendering?",
      "description": "Assess whether the code includes optimization techniques like level-of-detail rendering, texture compression, object instancing, frustum culling, or occlusion culling. Check for frame rate stability during navigation. Deduct 5 points if frame rate drops below 30fps on standard hardware, 3 points if no asset loading strategies are implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as WebGL not supported, texture loading failures, window resizing, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic time-of-day lighting 2. Weather effects like rain or snow 3. Interactive storefronts or landmarks 4. Procedurally generated building facades). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple camera control systems) 2. Function modules unrelated to street view (e.g., a built-in mini-game) 3. Fancy effects that affect performance (e.g., excessive particle systems or post-processing effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating 3D rendering/controls/asset management layers), code organization, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if shader code is mixed with application logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the UI overlay elements follow modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Clear navigation indicators and controls. Deduct 3 points for each cluttered UI element, 5 points for poor contrast between UI and 3D scene, and 5 points for control elements that block the view. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the 3D navigation conforms to human perception characteristics: 1) Camera movement inertia feels natural 2) Transition animations between positions last 300-500ms 3) Movement speed is appropriate for exploring a street. Deduct 5 points for jerky camera movements, 3 points for disorienting rotations or transitions, and 5 points for navigation controls that are difficult to use. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Web Visuals",
  "difficulty": "easy"
}
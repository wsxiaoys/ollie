{
  "index": 992,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. You only need to create a simple web interface that can display traffic light timing, vehicle speed, and video.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the traffic light timing system fully implemented?",
      "description": "Review whether the code accurately implements traffic light state management with proper timing sequences (red/yellow/green cycles). Check if the timing display shows countdown or elapsed time, and whether the light transitions follow realistic traffic patterns. Score 0 if no timing logic is implemented, 5 if only basic color switching exists, and 10 if complete timing control with configurable intervals is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the vehicle speed monitoring functionality implemented?",
      "description": "Check whether the speed display includes real-time updates, proper unit conversion (mph/kmh), and realistic speed simulation or input mechanisms. Evaluate if speed data is presented clearly with appropriate formatting and decimal precision. Deduct 5 points if speed updates are jerky or unrealistic, and 3 points if unit display is unclear. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the video display component properly integrated?",
      "description": "Evaluate whether the video element is properly embedded with standard HTML5 video controls, appropriate sizing, and fallback mechanisms for unsupported formats. Check if video loading states are handled gracefully and if the video integrates well with other interface elements. Deduct 5 points if video fails to load or has no error handling, and 3 points if controls are poorly positioned. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the integrated traffic monitoring interface cohesive?",
      "description": "Check whether all three components (traffic light, speed display, video) work together as a unified traffic monitoring system. Evaluate if the interface provides logical grouping, consistent data refresh rates, and synchronized updates. Deduct 5 points if components appear disconnected or have conflicting update cycles, and 3 points if the overall system lacks coherent workflow. Give 10 points if fully integrated with cross-component interactions.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as video loading failures, invalid speed values, timing interruptions, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the traffic monitoring experience (e.g., 1. Speed limit violation alerts 2. Traffic flow statistics 3. Emergency mode with flashing lights 4. Historical data charts). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple timer mechanisms coexisting) 2. Function modules unrelated to traffic monitoring (e.g., a built-in music player or social features) 3. Fancy effects that affect performance (e.g., excessive particle animations on traffic lights). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating traffic light logic/speed monitoring/video handling), proper variable naming, and code organization. Deduct 5 points if global state pollution is found or no separation of concerns; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no proper event handling or DOM manipulation patterns are used. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern UI principles: 1) Harmonious color matching with appropriate traffic light colors 2) Proper layout spacing with clear visual hierarchy 3) Professional typography with readable font sizes (â‰¥14px) and appropriate contrast ratios. Deduct 3 points for each crowded visual element, 5 points for poor color contrast or confusing traffic light representation, and 5 points for chaotic layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to user expectations: 1) Traffic light transitions are smooth with appropriate timing 2) Speed updates are fluid without jarring jumps 3) Video controls respond immediately to user input 4) Overall interface updates are synchronized and performant. Deduct 5 points for each laggy interaction, 3 points for choppy animations, and 5 points for unresponsive controls. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Web Visuals",
  "difficulty": "easy"
}
{
  "index": 1483,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration. React+antd4 javascript simulating Windows desktop menu design.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Windows desktop menu structure accurately implemented?",
      "description": "Review whether the code accurately implements the hierarchical structure of a Windows desktop menu, including Start menu, right-click context menus, taskbar interactions, and system tray functionality. Score 0 if none of these elements are implemented, 5 if only basic menu structure exists, and 10 if the implementation includes cascading menus, proper grouping, and visual separators matching Windows standards.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the essential Windows menu interactions implemented?",
      "description": "Check whether all core Windows menu interactions are implemented: click and hover behaviors, keyboard navigation support (Tab, arrows, shortcuts), and proper focus management. Deduct 3 points if keyboard accessibility is missing, 3 points if hover states are incorrect, and 3 points if focus behavior doesn't match Windows patterns. Full score requires implementing Esc key to close menus and proper event bubbling prevention.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the visual styling faithful to Windows design patterns?",
      "description": "Evaluate whether the styling properly follows Windows desktop UI standards, including correct colors, borders, shadows, fonts (Segoe UI), and spacing. Look for accurate implementation of hover/focus/active states, highlighting of selected items, and proper icons. Deduct 5 points if the styling lacks key Windows visual cues, and 3 points if animations (like fade/slide effects) are missing or incorrect.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation integrate React with Ant Design effectively?",
      "description": "Assess the technical integration between React and Ant Design components. Check for proper use of Ant Design's Menu, Dropdown, and Popover components while maintaining Windows aesthetics. Review the component structure for logical hierarchy and reuse. Deduct 5 points if Ant Design components are significantly customized to mimic Windows style (contradicting library purpose), and 3 points if React hooks usage is suboptimal.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code handles edge cases such as dynamic menu content, window resizing, screen boundaries for submenus, empty menu states, and long menu item text. Code with strong robustness should prevent menu overflow outside viewport boundaries and handle high-contrast modes. Score 10 points if all edge cases are handled, 5 points if only basic error handling exists, and 0 points if no robustness considerations are present.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Live folder previews, 2. Recent files integration, 3. Custom theme support like Windows theme switching, 4. Drag and drop reordering of menu items). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple menu opening mechanisms) 2. Function modules unrelated to Windows desktop experience (e.g., unnecessary animations) 3. Complex features that affect performance (e.g., excessive DOM nesting or unnecessary re-renders). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core Windows menu experience is compromised by extraneous code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating menu components/logic/styles), proper React patterns (hooks, context API usage, memoization), and component reusability. Deduct 5 points if global state management is poor or prop drilling is excessive; deduct 3 points if component responsibilities are poorly defined; deduct 3 points if performance optimizations like React.memo or useMemo are missing where needed. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern Windows design principles: 1) Proper color palette matching Windows themes 2) Consistent padding and margins (8px grid system) 3) Appropriate font usage (Segoe UI or system-ui, proper sizing hierarchy). Deduct 3 points for each UI element that breaks Windows consistency, 5 points for significant visual discrepancies from Windows standards, and 5 points for poor information hierarchy. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the menu interactions feel native to Windows: 1) Opening/closing animations match Windows speed (200-250ms) 2) Click response feels immediate (â‰¤100ms) 3) Submenu flyouts appear with appropriate timing and direction. Deduct 5 points for janky animations, 3 points for menu flickering during interactions, and 5 points for noticeable delays in menu response. Check if hovering behavior for cascading menus follows Windows patterns with appropriate timing. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Web Visuals",
  "difficulty": "easy"
}
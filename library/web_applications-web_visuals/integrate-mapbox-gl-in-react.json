{
  "index": 1255,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes. Help me generate code for integrating MapBox-GL in React.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the MapBox-GL integration properly initialized in React?",
      "description": "Review whether the code correctly imports and initializes MapBox-GL with an API key, appropriate container configuration, and proper React lifecycle management. Check if useEffect is used correctly to handle map initialization and cleanup. Score 0 if MapBox-GL initialization is missing, 5 if basic initialization exists but with flaws, and 10 if fully implemented with proper access token management and error handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are React-specific MapBox integration practices followed?",
      "description": "Evaluate if the code follows React best practices for MapBox integration: using refs for DOM container management, handling component unmounting properly to prevent memory leaks, and efficiently managing state for map properties. Deduct 3 points if ref management is improper, 3 points if unmounting cleanup is missing, and 4 points if state management causes unnecessary re-renders. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are MapBox event handlers properly implemented?",
      "description": "Check if map events (click, hover, drag, zoom) are handled correctly using React patterns. Event handlers should be properly memoized with useCallback to prevent unnecessary re-renders, and should correctly manage event propagation. Deduct 2 points for each event type that's improperly handled and 4 points if event cleanup on unmount is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there proper handling of MapBox layers and sources?",
      "description": "Examine how the code manages MapBox layers and data sources. Proper implementation should include abstraction for layer management, conditional rendering of layers, and efficient updates without recreating the entire map. Deduct 3 points if layer management is hardcoded, 4 points if data source updates trigger full map reloads, and 3 points if there's no separation between data and presentation layers. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as MapBox loading failures, API key errors, geolocation permission denials, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Custom map controls with React components 2. Animated data visualization layers 3. Integration with other geospatial libraries like Turf.js). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant MapBox-GL wrapper libraries that add complexity without value 2. Unnecessary re-rendering of map or components 3. Over-fetching of geospatial data that could be optimized. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating map configuration/hooks/components), TypeScript typing for MapBox objects, and proper documentation. Deduct 5 points if global state pollution is found or custom hooks aren't created for reusable functionality; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the component structure doesn't follow separation of concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Proper map styling and theme consistency with the React application 2) Responsive design for different screen sizes 3) Accessibility considerations for map controls. Deduct 3 points for inconsistent styling, 5 points for non-responsive implementations, and 5 points for accessibility issues. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the map interaction smooth and performant?",
      "description": "Judge whether the map interactions are optimized: 1) Map rendering performance during pan/zoom operations 2) Efficient handling of large datasets with clustering or virtualization 3) Appropriate use of worker threads for heavy computations. Deduct 5 points for noticeable frame drops during interaction, 3 points for performance bottlenecks with large datasets, and 5 points for blocking the main thread with intensive operations. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Web Visuals",
  "difficulty": "easy"
}
{
  "index": 969,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. You're a code expert. Please use your professional knowledge to generate accurate and expert responses. Be sure the code you generate is executable for demonstration. Create a simplified webpage using Python with Semantic UI.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Python web framework properly implemented?",
      "description": "Evaluate whether the code correctly uses a Python web framework (Flask, Django, etc.) with proper routing, request handling, and serving static files. Check for middleware configuration, environment variable handling, and appropriate HTTP response codes. Score 0 if no framework is used, 5 if basic implementation is present but with flaws, 10 if properly implemented with error handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is Semantic UI correctly integrated?",
      "description": "Check if Semantic UI CSS/JS files are properly linked (either via CDN or local installation), and whether the correct version is specified. Verify that Semantic UI components are used according to documentation standards with proper class names and nesting. Deduct 5 points if linked incorrectly, 3 points if outdated version used, and 2 points if JS initialization is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the webpage have a responsive design?",
      "description": "Analyze whether the webpage uses Semantic UI's responsive grid system correctly, with proper breakpoints for different screen sizes. Check if the layout adjusts appropriately on mobile, tablet and desktop views. Deduct 5 points if no responsive grid is implemented, 3 points if elements overflow on small screens, and 2 points if mobile menu is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are Semantic UI components used effectively?",
      "description": "Evaluate the appropriate use of Semantic UI components (menus, cards, buttons, forms, etc.) according to their intended purpose. Check for proper semantic markup with correct class hierarchies. Deduct 3 points for each improperly used component, 2 points for missing interactive behaviors, and 5 points if no Semantic UI-specific components are used. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as form validation errors, missing data, server errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic theme switching 2. Custom animations with Semantic UI transitions 3. Interactive data visualizations). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant imports or libraries that aren't used 2. Over-engineered solutions for simple tasks 3. Excessive use of Semantic UI components where simpler HTML would suffice. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functionality is overcomplicated by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating routes/templates/static files), appropriate commenting, and adherence to Python best practices (PEP 8). Deduct 5 points for global variable abuse or non-idiomatic Python; deduct 5 points if the code structure is monolithic; deduct 5 points if there's no separation of concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows consistent principles) 3) Professional typography (appropriate font sizes and legibility). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay â‰¤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Web Visuals",
  "difficulty": "easy"
}
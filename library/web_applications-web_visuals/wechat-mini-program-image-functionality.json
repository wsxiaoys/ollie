{
  "index": 768,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code whenever possible. Write code for a WeChat Mini Program that implements image functionality. You can use Vant components or not.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core image functionality fully implemented?",
      "description": "Check if the code includes essential image handling functions like uploading, displaying, previewing, and possibly editing images. Score 0 if the image functionality is not implemented, 5 if only basic image display is provided, and 10 if comprehensive image handling (upload, preview, zoom, etc.) is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the WeChat Mini Program file structure correctly organized?",
      "description": "Verify that the code follows the standard WeChat Mini Program structure with proper organization of app.js, app.json, app.wxss, and page folders containing .js, .json, .wxml, and .wxss files. Deduct 5 points if crucial configuration files are missing, 3 points if the structure is disorganized. Full score requires proper component encapsulation and clear separation of concerns.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are WeChat Mini Program API permissions properly handled?",
      "description": "Evaluate whether the code correctly requests user permissions for accessing device camera/album, ensures scope.writePhotosAlbum for saving images, and handles user rejection scenarios. Deduct 5 points if permissions are hardcoded without user consent, and 3 points if rejection handling is missing. Full score requires comprehensive permission flows with clear user guidance.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the image component integration properly implemented?",
      "description": "Assess whether the code correctly implements image components (either native or Vant). Check for proper handling of image loading states, lazy loading for performance, and fallback mechanisms for failed loads. Deduct 5 points if there's no loading state management, 3 points if image caching strategies are missing. Full score requires optimized image delivery with proper error handling.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network errors during image upload/download, oversized images, unsupported formats, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Image filters/effects 2. Smart cropping/compression 3. OCR text extraction from images). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar image handling functions 2. Function modules unrelated to image processing 3. Fancy effects that affect performance (e.g., excessive animations during image transitions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/logic/network layers), component reusability, and build process optimization. Deduct 5 points if global state pollution is found or component patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no performance optimizations for image loading and processing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows WeChat Mini Program design principles: 1) Consistent with WeChat's visual language 2) Proper layout spacing (following the 8px grid system) 3) Professional typography (legible text with proper contrast for image overlays). Deduct 3 points for each inconsistent UI element, 5 points for poor image presentation layout, and 5 points for accessibility issues with image interactions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the image-related interactions meet user expectations: 1) Image loading indicators appear within 100ms 2) Smooth transitions between image states (loading/preview/full view) 3) Responsive touch gestures for image manipulation. Deduct 5 points for operations without visual feedback, 3 points for jerky animations during image transitions, and 5 points for unresponsive image interactions. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Web Visuals",
  "difficulty": "easy"
}
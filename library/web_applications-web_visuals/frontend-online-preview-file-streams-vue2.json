{
  "index": 308,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration purposes. Implement frontend online preview of file streams in Vue 2.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the file streaming preview functionality fully implemented?",
      "description": "Check whether the code correctly implements file streaming preview for common formats (PDF, images, videos, audio, text) using appropriate native or third-party viewers. Score 0 if no preview functionality is implemented, 5 if only basic formats are supported, and 10 if comprehensive format support with fallback mechanisms is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the Vue 2 implementation technically correct?",
      "description": "Evaluate whether the code follows Vue 2 best practices, including proper component structure, lifecycle hooks, and reactivity patterns. Check if it uses Vue-specific features appropriately (e.g., props, computed properties, watchers). Deduct 5 points for anti-patterns like direct DOM manipulation outside of directives, and 3 points for not using Vue's reactivity system properly. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the streaming implementation optimized?",
      "description": "Assess if the implementation uses efficient streaming techniques like chunked loading, progressive rendering, or range requests instead of loading the entire file at once. Check if it handles large files (>10MB) without memory issues. Deduct 5 points if streaming is simulated with complete downloads, and 3 points if no loading progress indicator is provided. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the preview functionality secure and robust against malicious files?",
      "description": "Verify that the code includes security measures such as content type validation, sanitization for potentially dangerous files, and proper error handling for corrupted files. Score 0 if no security measures are implemented, 5 if basic validation exists, and 10 if comprehensive protection (including sandboxing where appropriate) is included.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as unsupported file types, network interruptions, partial file loads, CORS issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Automatic format detection 2. Thumbnail generation for quick preview 3. Dark mode support for previews 4. Annotation capabilities). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple preview libraries for the same file type) 2. Function modules unrelated to file preview (e.g., built-in editing capabilities) 3. Fancy effects that affect performance (e.g., unnecessary animations during file loading). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating preview logic/UI/network layers), test coverage, and error handling. Deduct 5 points if global state pollution is found or if design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no proper error boundary implementation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the preview interface follows modern design principles: 1) Responsive layout that works across device sizes 2) Proper controls positioning and sizing (play/pause, zoom, navigation) 3) Consistent visual language with the surrounding Vue application. Deduct 3 points for each usability issue, 5 points for disproportionate control sizes, and 5 points for preview containers that don't adapt to available space. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the preview interactions conform to user expectations: 1) Loading states with progress indication 2) Smooth transitions when switching between files or preview modes 3) Intuitive controls for different file types. Deduct 5 points for each missing loading indicator, 3 points for jarring transitions between states, and 5 points for unintuitive or inconsistent control behaviors across file types. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Management Systems-File Management",
  "difficulty": "easy"
}
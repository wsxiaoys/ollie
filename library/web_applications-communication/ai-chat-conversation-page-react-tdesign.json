{
  "index": 1145,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration. Implement an AI chat conversation page with streaming loading using React combined with TDesign.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the React component structure properly organized?",
      "description": "Check if the code follows React best practices with proper component hierarchy, separation of concerns, and use of hooks. Components should be modular, reusable, and follow a clear naming convention. Deduct 5 points if components are overly complex or have mixed responsibilities; deduct 5 points if hooks usage doesn't follow React rules; deduct 5 points if prop drilling is excessive without proper state management. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the streaming chat functionality correctly implemented?",
      "description": "Evaluate if the code properly implements a streaming response mechanism that displays AI responses character by character. Check for proper handling of async operations, usage of fetch API or similar methods with ReadableStream, and correct state updates for real-time text display. Score 0 if streaming is not implemented, 5 if basic implementation exists but has flaws, and 10 if streaming works flawlessly with proper error handling and loading states.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is TDesign properly integrated and utilized?",
      "description": "Verify if TDesign components are correctly imported, configured, and used according to the official documentation. Check whether the application leverages TDesign's theming capabilities, responsive design features, and component props. Deduct 3 points if TDesign is improperly imported, 3 points if components are misused, and 4 points if the design system's full potential is not utilized. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the chat UI follow conversational interface best practices?",
      "description": "Assess whether the chat interface includes essential elements such as message bubbles with clear sender distinction, timestamp display, message status indicators (sending/sent/error), and proper scrolling behavior (auto-scroll to new messages). Deduct 2 points for each missing essential element. Check if the interface handles long messages, code blocks, and various content types appropriately. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, API errors, empty responses, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Syntax highlighting for code in responses 2. Markdown rendering capability 3. Voice input/output integration). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple state management solutions used simultaneously) 2. Function modules unrelated to chat (e.g., unnecessary user dashboards) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/logic/API layers), proper TypeScript typing (if used), and good project structure. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no error boundary implementation for React. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (consistent with TDesign theme) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Loading states for messages being sent 2) Smooth transition animations for new messages appearing 3) Clear visual indications of streaming text. Deduct 5 points for each operation without feedback, 3 points for jerky animations during streaming, and 5 points for lack of proper scrolling behavior when new content appears. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Communication",
  "difficulty": "easy"
}
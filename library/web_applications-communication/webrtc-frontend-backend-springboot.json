{
  "index": 1690,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. Help me write a simple WebRTC frontend and backend code, with the backend using Spring Boot.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the WebRTC peer connection implementation complete?",
      "description": "Review whether the code correctly implements the WebRTC peer connection flow including ICE candidate collection, SDP offer/answer exchange, and media stream handling. Check if appropriate event listeners for connection state changes are implemented. Score 0 if the core WebRTC functionality is missing, 5 if basic connection is implemented but lacks error handling, and 10 if a complete peer connection lifecycle with proper state management is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the signaling mechanism properly implemented?",
      "description": "Evaluate whether the code includes a proper signaling mechanism (WebSocket, HTTP polling, etc.) to exchange SDP offers/answers and ICE candidates between peers. Check if the signaling server in Spring Boot handles concurrent connections and maintains session states. Deduct 5 points if the signaling protocol doesn't include message types/formats, and 3 points if there's no heartbeat mechanism. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is media stream handling properly implemented?",
      "description": "Check if the code properly handles getUserMedia for camera/microphone access, includes appropriate constraints for video/audio quality, and provides UI elements to display the media streams. Verify if it handles permission denials gracefully. Deduct 5 points if there's no media stream error handling, 3 points if stream quality configuration options are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation handle NAT traversal techniques?",
      "description": "Review whether the code configures ICE servers (STUN/TURN) correctly for NAT traversal. Check if the backend provides TURN credential generation with appropriate authentication. Deduct 5 points if only STUN is used without TURN fallback, 3 points if credentials aren't time-limited, and 5 points if no NAT traversal solution is implemented at all. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common WebRTC-specific issues (browser incompatibilities, reconnection after network interruptions, graceful degradation when media devices are unplugged, etc.) and provides friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Screen sharing functionality 2. Chat alongside video 3. Bandwidth adaptation 4. Video filters/effects). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple signaling mechanisms) 2. Function modules unrelated to WebRTC communication (e.g., complex authentication system when not needed) 3. Fancy effects that affect performance (e.g., unnecessary animations that consume bandwidth). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (separate modules for signaling, peer connection management, UI components), error handling patterns, and build process configuration. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Video/audio controls appear/disappear with smooth transitions 2) Connection status indicators provide clear visual feedback 3) Call initiation/termination has intuitive UI flow. Deduct 5 points for each operation without feedback, 3 points for jarring transitions during call setup/teardown, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Communication",
  "difficulty": "hard"
}
{
  "index": 61,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable.\n\nPlease implement a real-time chat system using HTML and JavaScript.\n\n**Task**: Create a real-time chat system where players can chat and communicate with other players in the game.\n\n**Hint**: Use WebSocket or other real-time communication technologies to implement the chat functionality, and set up a chat interface with message filtering.\n\nInclude comments in your code so other developers can understand your implementation process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the real-time chat system fully implemented?",
      "description": "Review whether the code implements a complete chat system with message sending and receiving functionality. Check if the interface includes message input, display area, and send button. Score 0 if core chat functionality is missing, 5 if basic messaging works but lacks real-time updates, and 10 if messages appear instantly without page refresh.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the WebSocket or real-time communication implementation correct?",
      "description": "Verify if WebSocket or alternative real-time technologies (e.g., Socket.io, Server-Sent Events) are properly implemented. Check connection establishment, message handling, reconnection logic, and error handling. Deduct 5 points if the connection isn't maintained properly, 3 points if reconnection logic is missing, and 2 points if there's no error handling. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the message filtering functionality implemented?",
      "description": "Examine whether the code includes message filtering capabilities such as profanity filters, spam prevention, or content moderation. Check if users can filter messages by type/sender. Deduct 5 points if no filtering exists, 3 points if basic filtering lacks customization options. Give 10 points if comprehensive filtering with multiple options is implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the chat interface user-friendly and functional?",
      "description": "Evaluate if the chat interface includes essential elements like message history, timestamps, user identification, and message status indicators. Check for features like message formatting, emoji support, or file sharing. Deduct 3 points for each missing essential element, and award up to 10 points for a complete, intuitive interface.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network disconnections, message delivery failures, invalid inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Message reactions/emojis 2. Read receipts 3. Typing indicators 4. Voice/video messaging 5. Chat rooms/channels). Add 2 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple message sending logics) 2. Function modules unrelated to chat (e.g., a built-in game within the chat) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/network/message handling layers), code organization, comment quality, and variable naming. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if comments are insufficient or misleading. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Message sending feedback delay ≤ 100ms 2) New message notification animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for operations without feedback, 3 points for messages appearing without smooth transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Casual",
  "difficulty": "easy"
}
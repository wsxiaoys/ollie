{
  "index": 1497,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to make the code you generate executable for demonstration purposes. Development of a modular-designed WeChat mini program for campus lost and found.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the basic architecture of the WeChat mini program properly implemented?",
      "description": "Review whether the code accurately implements the WeChat mini program structure with appropriate app.js, app.json, and page directories. Check if the project uses the correct folder structure (pages, components, utils, etc.) and follows WeChat mini program development conventions. Score 0 if the basic structure is missing, 5 if only basic structure exists without proper organization, and 10 if the architecture follows best practices for WeChat mini programs.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the core lost and found features fully implemented?",
      "description": "Evaluate the completeness of lost and found functionalities: item posting (with images, descriptions, location tags), item searching/filtering, user notifications, and contact mechanisms. Deduct 3 points if image upload is missing, 3 points if location tagging isn't implemented, 2 points if search/filter functionality is limited, and 2 points if notification system is incomplete. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the campus-specific functionality properly designed and implemented?",
      "description": "Check if the mini program has campus-specific features like campus map integration, building/location selection, student verification system, and campus-based filtering. Deduct 3 points if campus map integration is missing, 2 points if location selection is generic rather than campus-specific, 3 points if student verification is absent, and 2 points if campus-based filtering isn't implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the modular design approach effectively applied?",
      "description": "Assess whether the code implements proper component-based architecture with reusable UI components, service layers, and state management. Check for separation of concerns between data models, business logic, and UI. Deduct 3 points if components aren't reusable, 3 points if business logic is mixed with UI code, and 4 points if there's no clear state management approach. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network errors, image loading failures, permission denials, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered image recognition for item categorization 2. Lost item location heat map visualization 3. Seamless integration with campus ID systems). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple notification systems coexisting) 2. Function modules unrelated to campus lost and found (e.g., a built-in game feature) 3. Fancy effects that affect performance (e.g., unnecessary animations on every screen). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating business logic/UI/network layers), code organization, naming conventions, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 3 points if the code duplication rate is too high (over 30%); deduct 2 points if the naming conventions are inconsistent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface design meet WeChat mini program standards?",
      "description": "Evaluate whether the overall design follows WeChat mini program design principles: 1) Consistent with WeChat visual language (proper use of navigation bar, tab bar, etc.) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional typography system (body font size ≥ 14px, appropriate contrast). Deduct 3 points for each inconsistency with WeChat design standards, 3 points for poor information hierarchy, and 4 points for chaotic layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the user experience optimized for the campus context?",
      "description": "Judge whether the app is optimized for campus users: 1) Fast loading time (initial render ≤ 2s) 2) Minimal steps to report lost/found items (≤ 3 screens) 3) Clear visual guidance for first-time users 4) Campus-specific terminology and workflows. Deduct 3 points for poor performance, 3 points for complex user flows, 2 points for lack of onboarding guidance, and 2 points for generic UX not tailored to campus context. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Communication",
  "difficulty": "medium"
}
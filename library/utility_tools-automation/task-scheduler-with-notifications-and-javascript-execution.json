{
  "index": 652,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. Develop a task scheduler that allows the creation of multiple scheduled tasks (such as daily 9:00 AM reminders, hourly time announcements, etc.). When a task is due, display notifications in the system notification center and execute custom JavaScript code snippets (like location.reload()).",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core task scheduling mechanism properly implemented?",
      "description": "Check if the implementation correctly handles time-based scheduling with precision for different intervals (hourly, daily, weekly, etc.). Verify that the scheduler maintains accurate timing even during long periods of operation. Score 0 if core scheduling logic is missing, 5 if basic timing works but lacks precision for all intervals, and 10 if all scheduling patterns work with accurate timing.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the notification system correctly integrated?",
      "description": "Evaluate whether the code properly uses the Notification API or an equivalent system. Check if it handles notification permissions correctly, with fallbacks for denied permissions. Verify that notifications contain relevant task information and provide user interaction options. Deduct 5 points if notification permissions aren't properly requested, 3 points if notifications lack customization options, and 2 points if there are no fallbacks for browsers without notification support.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the code safely execute custom JavaScript snippets?",
      "description": "Review how the system handles execution of custom code snippets. Check for sandboxing methods or security measures to prevent dangerous code execution. Verify error handling for failed script execution. Deduct 7 points if there's no validation or sandboxing of user input code, 5 points if error handling is inadequate, and 3 points if the execution environment doesn't isolate code properly.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a complete task management interface?",
      "description": "Assess the task creation, editing, and deletion functionality. Check if the interface allows setting various schedule types (one-time, recurring), provides task listing/filtering, and includes status indicators. Deduct 5 points if task CRUD operations are incomplete, 3 points if recurring options are limited, and 2 points if the task listing lacks organization features or search capabilities.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser tab closing, sleep mode, connection issues, etc.) and provide recovery mechanisms. Check for race conditions in the timing system and task queue management. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Natural language task creation 2. Task categorization and priority system 3. Visual timeline of scheduled tasks 4. Integration with calendar services). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar timing functions (e.g., multiple timer mechanisms coexisting) 2. Function modules unrelated to task scheduling (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., complex animations during notifications). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating timing logic/UI/notification systems), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Task creation feedback delay ≤ 100ms 2) Notification animations controlled between 300-500ms 3) Clear visual indication of active and upcoming tasks. Deduct 5 points for each operation without feedback, 3 points for notifications that interrupt user workflow unnecessarily, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Automation",
  "difficulty": "hard"
}
{
  "index": 1647,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Try to ensure that the generated code is executable for demonstration. Develop a Chrome plugin with a feature that listens for the Alt+X shortcut key to open a search box, similar to Apple's Spotlight Search, using Vue 3 and Naive UI.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Chrome extension core structure properly implemented?",
      "description": "Verify if the code includes all essential Chrome extension files (manifest.json, background.js, popup.html, etc.) with proper configuration. Check if the manifest.json correctly specifies permissions (commands for keyboard shortcuts, tabs, storage), and if version 3 manifest standards are followed. Score 0 if essential files are missing, 5 if basic structure exists but has configuration issues, 10 if fully implemented according to Chrome extension best practices.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the Alt+X keyboard shortcut properly implemented?",
      "description": "Evaluate whether the extension correctly registers and listens for the Alt+X keyboard shortcut using Chrome's commands API. Check if the shortcut works globally across tabs and is properly defined in manifest.json. Verify error handling when the shortcut might be unavailable. Score 0 if shortcut functionality is missing, 5 if implemented but not working reliably, 10 if fully functional with appropriate fallbacks.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the search box UI properly implemented with Vue 3 and Naive UI?",
      "description": "Check if Vue 3's Composition API is used correctly and if Naive UI components are properly imported and configured. Verify if the search box appears centered on screen with proper focus, has appropriate styling (blur effect, rounded corners, etc.), and follows Spotlight's minimalist aesthetic. Deduct 5 points if Vue 3 features are underutilized, 3 points if Naive UI theming is inconsistent, and 5 points if the search box appearance differs significantly from Spotlight.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the search functionality comprehensive and effective?",
      "description": "Assess whether the search function includes indexing of browser history, bookmarks, open tabs, and potentially web search. Check if results appear in real-time as the user types with proper debouncing (≤150ms), and if categorization of results is clear. Verify if the code implements fuzzy matching algorithms. Score 0 if search is basic text matching only, 5 if it searches multiple sources but lacks optimization, 10 if search is comprehensive with intelligent ranking algorithms.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as conflicting shortcuts, search indexing failures, API rate limits, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Custom search providers integration 2. Search history with analytics 3. AI-powered result ranking). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple search algorithms running simultaneously) 2. Function modules unrelated to search functionality (e.g., built-in games or utilities) 3. Fancy effects that affect performance (e.g., excessive animations or transitions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/logic/data layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Search results appear within 200ms after typing 2) Transition animations controlled between 150-300ms 3) Clear keyboard navigation support (up/down arrows, Enter to select). Deduct 5 points for search lag exceeding 500ms, 3 points for janky animations during result rendering, and 5 points for lack of keyboard navigation. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Automation",
  "difficulty": "hard"
}
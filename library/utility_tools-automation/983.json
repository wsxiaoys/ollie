{
  "index": 983,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration. I want to build my own code generator based on the RuoYi framework.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the RuoYi framework architecture correctly understood and explained?",
      "description": "Check if the response accurately explains RuoYi's multi-tier architecture (controller-service-dao layers), module structure, and core components like Spring Boot integration, MyBatis configurations, and security frameworks. Score 0 if there's no understanding of RuoYi's architecture, 5 if only basic components are mentioned, and 10 if there's a comprehensive explanation including module relationships and dependency management.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the code generation mechanism fully implemented?",
      "description": "Evaluate whether the code generator implementation includes template parsing, database metadata extraction, and customizable output configurations. Essential features include entity-relationship mapping, multi-database support, and preserving custom code during regeneration. Deduct 5 points if only basic CRUD generation is supported without customization options; deduct 3 points if the generator doesn't maintain custom code regions when regenerating. Full score requires intelligent field type mapping and annotation handling.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the template customization capabilities comprehensive?",
      "description": "Review the template engine implementation, checking for velocity/freemarker integration, variable injection mechanisms, and template inheritance structures. Verify if the solution allows developers to define custom templates for different output formats (Java/Vue/React) and supports conditional code generation. Deduct 5 points if template customization isn't supported; deduct 3 points if only basic variable substitution is available without conditional logic.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a user-friendly interface for code generation configuration?",
      "description": "Assess whether the solution provides a visual interface for selecting tables, configuring field properties, setting generation options, and previewing generated code. Check for batch generation capabilities and configuration saving/loading features. Score 0 if no UI is provided, 5 if there's a basic form interface, and 10 if there's a comprehensive UI with real-time preview and configuration management.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid database connections, malformed table structures, permission issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-assisted code suggestions 2. Code quality metrics integration 3. Intelligent database relationship detection 4. Interactive preview with live data). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple template engines doing the same job) 2. Function modules unrelated to code generation (e.g., built-in media players) 3. Fancy effects that affect performance (e.g., excessive animations in the UI). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating template engine/database access/file output), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Automation",
  "difficulty": "hard"
}
{
  "index": 717,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable and displayable. Help me write a Google extension: the requirement is similar to the Vue DevTools in the Google Store, and it should simultaneously support both Vue 2 and Vue 3.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Chrome extension architecture correctly implemented?",
      "description": "Evaluate whether the extension follows Chrome extension best practices with proper manifest.json configuration (v3 preferred), background scripts, content scripts, and popup interfaces. Check for permission declarations, extension lifecycle management, and proper isolation between contexts. Score 0 if basic extension structure is missing, 5 if implementation is basic but functional, 10 if implementation is comprehensive and follows all Chrome extension guidelines.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the extension properly detect both Vue 2 and Vue 3 applications?",
      "description": "Review the detection mechanism for identifying Vue instances in the page. Check if it can distinguish between Vue 2 and Vue 3, adapt to different mounting patterns, and handle both options API and composition API. Examine how it handles multiple Vue instances on the same page. Deduct 5 points if detection works for only one Vue version, 3 points if edge cases (like lazy-loaded components) aren't handled. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the component tree visualization fully implemented?",
      "description": "Check if the extension properly builds and displays the component hierarchy tree with correct parent-child relationships. Verify if it updates in real-time when components mount/unmount, and shows component depth levels correctly. Assess whether the tree is searchable and filterable. Score 0 if visualization is absent, 5 if basic tree is implemented but lacks features, 10 if complete with all expected functionality.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are component inspection features comparable to Vue DevTools?",
      "description": "Evaluate the component inspection functionality: props viewing/editing, data observation, computed properties calculation, methods listing, and event tracking. Check support for time-travel debugging and state snapshots. Verify hooks/lifecycle visualization for both Vue versions. Deduct 3 points for each major missing feature compared to official DevTools. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as pages with multiple Vue instances, hydration mismatches, minified production builds, SSR applications, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Component rendering performance metrics 2. State change diff visualization 3. Component export/import functionality). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to inspect the same property) 2. Function modules unrelated to Vue debugging (e.g., general DOM inspection that duplicates Chrome DevTools) 3. Fancy effects that affect performance (e.g., excessive animations in the panel). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating core logic/UI/communication layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Automation",
  "difficulty": "hard"
}
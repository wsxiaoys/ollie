{
  "index": 1808,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Can you help me write a mouse auto-clicker that can be opened on a web page and simulates physical mouse clicks for both left and right buttons?",
  "checklist": [
    {
      "id": 0,
      "title": "Is the auto-clicker core functionality properly implemented?",
      "description": "Check if the code correctly implements the primary auto-clicking functionality including both left and right mouse clicks. Verify that it allows selecting click type (left/right), setting click interval, and provides start/stop controls. Score 0 if clicking functionality is missing, 5 if only left clicks are implemented, and 10 if both left and right clicks work correctly.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the click interval configuration robust and flexible?",
      "description": "Evaluate if the code allows precise control over click intervals (milliseconds between clicks). Check for input validation, minimum/maximum bounds, and whether it handles decimals correctly. Verify that changing the interval works during operation without requiring restart. Deduct 3 points if validation is missing, 3 points if changing interval requires restart, 5 points if interval precision is poor (>50ms error).",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a proper click target selection mechanism?",
      "description": "Review whether the auto-clicker provides a way to select specific targets on the page rather than just clicking at the current cursor position. Check for target selection methods like coordinate input, element selection, or visual targeting system. Score 0 if no targeting is available, 5 if only fixed coordinates work, and 10 if dynamic target selection (e.g., element-based) is implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are there click pattern options beyond simple repeated clicks?",
      "description": "Check if the code offers advanced clicking patterns like sequences (click patterns), random intervals, bursts (multiple clicks followed by pause), or custom patterns. Score 0 if only fixed-interval clicking is available, 5 if basic patterns exist, and 10 if multiple sophisticated patterns are implemented with configuration options.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser tab switching, memory limitations, rapid setting changes, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Click heat map visualization 2. Keyboard shortcut controls 3. Click sound effects with volume control). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple timer implementations) 2. Function modules unrelated to auto-clicking (e.g., unnecessary animations) 3. Fancy effects that affect performance (e.g., excessive DOM operations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI logic from clicking mechanism), error handling, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no memory management for long-running operations. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during operation changes, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Automation",
  "difficulty": "medium"
}
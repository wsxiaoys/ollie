{
  "index": 509,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be careful to ensure that the generated code is executable for demonstration. Develop a video download tool where users can input video URLs (such as YouTube), and the tool will automatically parse and provide different quality options for video download, supporting batch downloading and progress display.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the URL parsing and video metadata extraction fully implemented?",
      "description": "Review whether the code accurately parses various video platform URLs (YouTube, Vimeo, etc.) and correctly extracts metadata including available quality options, video length, and format information. Score 0 if parsing is not implemented, 5 if only basic YouTube parsing works, and 10 if the system handles multiple platforms and extracts complete metadata.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the quality selection mechanism properly implemented?",
      "description": "Check whether users can select from different quality options (resolution, bitrate, format) for each video. The interface should display size estimates for each option and preview thumbnails if possible. Deduct 3 points if only preset quality options are available, 5 points if quality comparison is missing, and 7 points if format conversion options are absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the batch download functionality effectively implemented?",
      "description": "Evaluate whether the code allows users to queue multiple videos for download, with features like priority adjustment, pause/resume for individual downloads, and batch operations. Check if there's intelligent queue management for bandwidth optimization. Deduct 5 points if parallel download limits aren't configurable, and 3 points if download reordering is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the progress display and notification system comprehensive?",
      "description": "Review whether the progress tracking includes detailed information (download speed, ETA, file size), visual indicators (progress bars with percentage), and system notifications (completion alerts, error messages). Deduct 3 points for missing speed indicators, 3 points for inaccurate ETA calculations, and 5 points if there's no persistent progress tracking after browser refresh. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid URLs, network interruptions, server-side restrictions, rate limiting, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Smart format detection based on device 2. Auto-categorization of downloaded content 3. Integration with media players for preview). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar download methods 2. Function modules unrelated to video downloading (e.g., a built-in video editor) 3. Fancy effects that affect performance (e.g., excessive animations during downloads). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating parsing/downloading/UI layers), unit test coverage, and error handling. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no proper logging system for debugging purposes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance during download operations. Deduct 5 points for each operation without feedback, 3 points for jerky progress animations, and 5 points for hard-to-find download control buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Automation",
  "difficulty": "easy"
}
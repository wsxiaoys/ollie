{
  "index": 954,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration purposes. I am a programming novice. How can I create a mini-program that automatically extracts precise latitude and longitude coordinates from uploaded location screenshots? Please automatically generate the code for me and provide detailed step-by-step instructions.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the image processing and OCR functionality properly implemented?",
      "description": "Evaluate whether the code includes robust image processing capabilities (like OpenCV) to handle various screenshot formats and OCR library integration (like Tesseract) to extract text from images. Check if preprocessing steps like image resizing, normalization, and noise reduction are included. Score 0 if image processing is absent, 5 if basic functionality exists but handles limited formats, and 10 if comprehensive processing with format validation is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the coordinate extraction logic comprehensive and accurate?",
      "description": "Check whether the code can recognize different coordinate formats (decimal degrees, DMS, UTM) and extract them accurately using regex patterns or other text analysis methods. Verify if the implementation can handle different map service screenshots (Google Maps, Apple Maps, etc.). Deduct 5 points if only one coordinate format is supported, 3 points if extraction accuracy is below 90%. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the user interface intuitive and beginner-friendly?",
      "description": "Assess whether the interface provides clear upload mechanisms, progress indicators, and result displays appropriate for a programming novice. Check if there are visual cues for successful/failed operations. Deduct 5 points if the interface requires coding knowledge to operate, 3 points if feedback on processing status is unclear. Give 10 points if the interface is completely self-explanatory.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are there validation and error handling mechanisms for coordinate extraction?",
      "description": "Evaluate whether the code validates extracted coordinates (checking range: latitude -90 to 90, longitude -180 to 180) and provides meaningful error messages for images without coordinates or with unreadable text. Look for fallback mechanisms when primary extraction fails. Deduct 5 points if validation is absent, 3 points if error messages are generic or unhelpful. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted images, wrong file types, extraction failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Automatic map service detection 2. Reverse geocoding to show address from coordinates 3. Batch processing multiple screenshots). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple OCR engines doing the same job) 2. Function modules unrelated to coordinate extraction (e.g., a built-in image editor) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/processing/validation logic), error handling, and code maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if dependencies are not properly managed. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Processing feedback delay ≤ 2 seconds for standard images 2) Clear progress indicators for longer operations 3) Intuitive drag-and-drop or file selection interfaces. Deduct 5 points for each operation without feedback, 3 points for processing times over 5 seconds without indicators, and 5 points for confusing upload or download mechanisms. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Automation",
  "difficulty": "medium"
}
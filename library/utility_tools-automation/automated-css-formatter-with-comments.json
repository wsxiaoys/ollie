{
  "index": 699,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. Implement an automated CSS code formatting tool where users can paste messy or unformatted CSS code into a text box, and the tool will automatically format the code while preserving comments to improve readability.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the CSS parsing and formatting core functionality fully implemented?",
      "description": "Evaluate whether the code can correctly parse various CSS structures (including nested rules, media queries, keyframes, vendor prefixes, etc.) and format them consistently. Score 0 if the parser fails on complex CSS, 5 if it handles basic selectors and properties but struggles with advanced features, and 10 if it successfully handles all CSS3 specifications including complex selectors and at-rules.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the code preserve and properly format comments?",
      "description": "Check if the tool correctly identifies and preserves all types of CSS comments (inline, block, license headers) during formatting without modifying their content or breaking their association with relevant CSS rules. Deduct 5 points if some comments are lost or misplaced, 3 points if comment positioning is inconsistent, and 2 points if the original formatting within comments is altered unnecessarily. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are customizable formatting options provided to the user?",
      "description": "Review whether the tool offers configuration options for formatting preferences (e.g., indentation size, tabs vs spaces, single vs multi-line rules, property sorting, etc.). Score 0 if no options are available, 5 if only basic options exist, and 10 if comprehensive configuration is supported with sensible defaults and visual previews of formatting changes.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there proper error handling for malformed CSS input?",
      "description": "Assess how the tool handles invalid CSS input - whether it provides helpful error messages, highlights problematic lines, suggests fixes, or attempts partial formatting while preserving the original input. Deduct 3 points if error locations are not indicated, 4 points if cryptic error messages are shown, and 5 points if the tool crashes on malformed input without graceful recovery. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle edge cases (extremely long files, unusual whitespace patterns, Unicode characters in selectors, escaped sequences, etc.) and provide appropriate responses. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no edge cases are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Syntax highlighting in the formatted output 2. Visual diff between original and formatted code 3. CSS property sorting/grouping options 4. Minification toggle alongside formatting). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Duplicate parsing logic that could be unified 2. Unnecessary processing steps unrelated to CSS formatting 3. Performance-heavy features that slow down the core formatting functionality. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (separating lexer/parser/formatter components), test coverage for various CSS structures, and maintainability. Deduct 5 points if global state causes side effects; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no unit tests for core formatting functions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the UI follows modern design principles: 1) Clear input/output areas with sufficient contrast 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system with monospace for code display (minimum 14px size). Deduct 3 points for each cramped interface element, 5 points for poor contrast making code hard to read, and 5 points for chaotic layout with inconsistent spacing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the tool provides good user experience: 1) Formatting response time under 500ms for typical files 2) Visual feedback during processing of large files 3) Keyboard shortcuts for common actions (format, copy, clear). Deduct 5 points for noticeable UI freezing during formatting, 3 points for lack of visual processing indicators, and 5 points if formatting results aren't easily selectable/copyable. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Automation",
  "difficulty": "easy"
}
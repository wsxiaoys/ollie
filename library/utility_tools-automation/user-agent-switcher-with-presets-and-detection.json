{
  "index": 563,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable whenever possible. Implement a User-Agent switcher that provides presets for common devices (iOS/Android/PC), supports custom UA strings, and can detect the current page's UA for quick testing and switching.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the UA switcher core functionality fully implemented?",
      "description": "Check if the code provides a complete UA switcher that can modify the User-Agent string in the browser. It should include functionality to get the current UA, set a new UA, and restore the original UA. Score 0 if the core functionality is missing, 5 if basic switching is implemented but with limitations, and 10 if the implementation is complete with all required features.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are presets for common devices (iOS/Android/PC) properly implemented?",
      "description": "Verify that the code includes accurate and up-to-date UA string presets for common device types (at least iOS, Android, and PC/Desktop browsers). Each preset should contain the correct string format for the respective platform and major browser versions. Deduct 3 points if any major platform is missing, 2 points if the UA strings are outdated, and 2 points if the preset selection UI is not intuitive. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is custom UA string input functionality properly implemented?",
      "description": "Assess whether users can input, save, and apply custom UA strings. The interface should validate input to ensure it's a valid UA string format, provide feedback on application success, and maintain a history of custom entries. Deduct 3 points if validation is missing, 3 points if there's no persistence mechanism, and 2 points if the UI for custom input is confusing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is current page UA detection and quick switching implemented?",
      "description": "Evaluate if the code can detect and display the current page's UA string, and provide a mechanism for quickly switching between different UAs without requiring page reload. Check if the detection works across different browsing contexts and if the switching is instantaneous. Deduct 5 points if detection only works on the initial page load, and 5 points if switching requires a page reload. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as browser API restrictions, permission issues, incompatible browsers, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. UA comparison visualization 2. Device emulation preview 3. Analytics for website behavior under different UAs). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple methods to change UA) 2. Function modules unrelated to UA switching (e.g., a built-in screenshot tool) 3. Fancy effects that affect performance (e.g., unnecessary animations when switching). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UA management/UI/storage layers), browser compatibility considerations, and code organization. Deduct 5 points if global namespace pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no proper error handling or logging. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) UA switching feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual indication of active UA. Deduct 5 points for each operation without feedback, 3 points for jarring transitions when switching UAs, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Automation",
  "difficulty": "medium"
}
{
  "index": 472,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Try to ensure that the generated code can be executed and displayed.\n\n## Role\nYou are an experienced code expert. I will provide you with a software development requirement description, and you are required to generate project code based on these project requirements. Strictly follow the rules to help users generate the complete project code with simple and easy-to-understand language comments, without outputting anything else.\n\n## Output Rules\n1. You will always generate complete and runnable project code; please ensure the project is complete and executable\n2. Ensure all code files you output are complete, do not omit any code\n3. Carefully review and check all code before final output, evaluating its executability. If the code cannot be executed or contains errors, it needs to be regenerated\n4. If the requirements involve external API access or need to use user data (images, videos, audio, etc.), please provide mock data\n\n## Project Requirements Description\nDevelop an online food recommendation page that retrieves food listings by calling a food API and displays food information in a card layout (including food name, image, rating, address, etc.). Users can click on a food card to view details, with the details page containing detailed food descriptions, preparation methods, and user comments. The page has filtering functionality, allowing users to filter foods based on food type, rating, and other criteria.",
  "checklist": [
    {
      "id": 0,
      "title": "API Integration and Data Retrieval Implementation",
      "description": "Evaluate whether the code implements a complete food API data retrieval mechanism, including request handling, response parsing, error handling, and data transformation for frontend display.Check if the code includes proper fetch/axios requests with error handling, retry logic, and response caching. Also verify if there is proper loading state management during API calls. Score 0 if API integration is missing, 5 if basic implementation exists without proper error handling, 10 if fully implemented with robust error handling and caching strategy.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Food Card Layout and Responsive Design",
      "description": "Review the implementation of the food card grid layout, including proper responsive design across different screen sizes (mobile, tablet, desktop).Verify if CSS Grid/Flexbox is properly implemented for the card layout. Check if media queries are used for responsive design. Cards should display food name, image, rating, and address in an organized manner. Deduct 3 points if cards lack responsive behavior, 2 points if images aren't properly optimized, and 5 points if layout breaks on different screen sizes. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Food Detail Page Implementation",
      "description": "Assess the implementation of the food detail page, including transitions between card view and detail view, detailed information display, and overall user experience.Check if the detail page shows comprehensive information (detailed description, preparation methods, user comments). Verify if navigation between list and detail views is intuitive. Deduct 3 points if transition animations are missing, 5 points if the detail page lacks proper structure, and 3 points if back navigation isn't implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Filtering Functionality Implementation",
      "description": "Evaluate the implementation of filtering functionality based on food type, rating, and other criteria as specified in the requirements.Verify if multiple filter options are available and work together correctly. Check if filter UI is intuitive with proper state management. Filters should work without page reload and show filtered results instantly. Deduct 5 points if certain filter types are missing, 3 points if filters don't work together properly, and 3 points if filter state isn't maintained during navigation. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Code Robustness",
      "description": "Evaluate whether the code can handle common abnormal situations (such as API failures, slow network, invalid data, etc.) and provide friendly error prompts or recovery mechanisms.Code with strong robustness should handle API timeout/failure, data validation, empty state displays, and proper user feedback. Give 10 points for comprehensive error handling with recovery strategies, 5 points for basic error handling, and 0 points if exceptions aren't handled at all.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Innovative Features",
      "description": "Check whether the code includes surprise features that enhance the food recommendation experience.Add 3 points for each practical innovative feature implemented (e.g., 1. Personalized recommendations based on user history 2. Map integration for restaurant locations 3. Saving favorite foods for later 4. Nutrition information visualization). Maximum 10 points.",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Code Redundancy Assessment",
      "description": "Strictly check for redundant or unnecessary code that may impact maintainability or performance.Deduct 3 points for each redundancy found: 1. Duplicate API call implementations 2. Unnecessary re-renders of components 3. Excessive third-party libraries for simple functionality 4. Overly complex solutions for simple problems. Directly deduct 10 points if core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Engineering Quality",
      "description": "Review modular design, component reusability, state management approach, and overall code architecture.Deduct 5 points if global state is managed poorly; deduct 5 points if component reusability is low with high duplication; deduct 5 points if proper folder structure and code organization is missing. Full score is 10 points for clean architecture with proper separation of concerns between components, services, and utilities.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Interface Design Quality",
      "description": "Evaluate whether the overall design follows modern design principles suitable for a food recommendation application.Check for: 1) Food-appropriate color scheme (appetizing colors, good contrast) 2) Proper visual hierarchy with clear call-to-actions 3) Professional typography that enhances readability. Deduct 3 points for each crowded visual element, 5 points for poor color choices that don't suit food presentation, and 5 points for inconsistent styling across the application. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Dynamic Interaction and Performance",
      "description": "Judge whether the dynamic effects and overall performance provide a smooth user experience.Evaluate: 1) Quick loading of food cards (<300ms) 2) Smooth transitions between views 3) Immediate feedback on filter actions 4) Optimized image loading. Deduct 5 points for slow initial load (>1s without feedback), 3 points for janky scrolling performance, 5 points for filter actions taking >200ms to show results. Full score is 10 points for a buttery smooth experience with no perceptible delays.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Online Shopping",
  "difficulty": "easy"
}
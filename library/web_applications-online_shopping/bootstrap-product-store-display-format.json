{
  "index": 1683,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure the generated code is executable for display. Implement the format in the image using Bootstrap, where the three red boxes mark: first row is the product title, second row is the store information to which the product belongs, and the third is product information. Each page displays the corresponding number of store information, with the products of the current store shown below the store. Please provide code examples.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Bootstrap implementation correct?",
      "description": "Verify that the code correctly implements Bootstrap framework with proper CDN links or imports. Check if Bootstrap grid system is used appropriately for responsive layout. Confirm Bootstrap classes are used consistently rather than custom CSS where possible. Score 0 if Bootstrap is not used at all, 5 if Bootstrap is implemented but with inconsistent usage, and 10 if Bootstrap is implemented correctly with proper responsive design principles.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the three-section layout implemented as shown in the image?",
      "description": "Examine whether the code implements the three distinct sections as marked in the red boxes: product title section, store information section, and product information section. Check if these sections are visually separated and positioned in the correct vertical order. Deduct 5 points if any section is missing, 3 points if sections are not visually distinct, and 3 points if the layout order is incorrect. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the store-product relationship correctly implemented?",
      "description": "Evaluate if the code properly groups products under their respective stores. Check if the relationship between stores and their products is clearly established in the DOM structure and data model. Verify that products are only displayed under their corresponding store. Deduct 5 points if products aren't properly grouped under stores, 5 points if the relationship isn't preserved in the data structure. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is pagination or dynamic loading for store information implemented?",
      "description": "Assess whether the code implements pagination or dynamic loading to display \"the corresponding number of store information\" per page as specified. Check if navigation between pages is implemented and if the state is preserved when switching pages. Deduct 5 points if pagination/dynamic loading is missing, 3 points if it's implemented but with UI/UX issues, and 3 points if state isn't preserved between page transitions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing data, network errors, empty store/product lists, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Search/filter functionality for products 2. Store/product cards with hover effects 3. Responsive design for mobile devices 4. Product quick-view modal). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to view product details) 2. Function modules unrelated to the store-product display (e.g., unnecessary animations) 3. Fancy effects that affect performance (e.g., heavy JavaScript animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/view/controller layers), code organization, and maintainability. Deduct 5 points if global variable pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's poor separation of concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Online Shopping",
  "difficulty": "easy"
}
{
  "index": 1785,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Be sure to ensure that the code you generate is executable for demonstration. Write me frontend code for a pet store login and registration page.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the login functionality fully implemented?",
      "description": "Review whether the code implements complete login functionality including form validation (email format checking, password strength validation), error handling for invalid credentials, and session management. Score 0 if login logic is missing, 5 if basic validation exists but lacks comprehensive error handling, and 10 if it includes all validation rules, proper error messages, and secure session handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the registration functionality properly implemented?",
      "description": "Evaluate whether the registration system includes comprehensive form validation (unique username/email checking, password complexity requirements, confirmation password matching), user data persistence strategy, and success/error feedback. Deduct 5 points if backend validation hooks are missing, 3 points if password strength indicators are absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there appropriate form validation and user feedback?",
      "description": "Check if real-time client-side validation is implemented with clear visual indicators (highlighting invalid fields, showing specific error messages), and whether validation occurs both during typing and on submission. Proper feedback should be provided for all user actions. Deduct 5 points for delayed feedback, 3 points for generic error messages, and 5 points if validation is only performed on submission. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the responsive design properly implemented for multi-device usage?",
      "description": "Verify whether the code implements responsive design principles that adapt to various screen sizes (desktop, tablet, mobile) using media queries, flexible grid layouts, and appropriately sized touch targets. Deduct 5 points if the layout breaks on mobile screens, 3 points for fixed-width elements, and 5 points if input fields are not optimized for touch interfaces. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network failures during form submission, browser compatibility issues, input with special characters, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Social media login integration 2. Password strength meter with visual feedback 3. Remember me functionality 4. Auto-saving form inputs). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant validation logic (e.g., multiple validation systems running in parallel) 2. Function modules unrelated to authentication (e.g., full product catalog in login page) 3. Fancy effects that affect performance (e.g., excessive animations or transitions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI components/validation logic/API calls), code reusability, and maintainability. Deduct 5 points if global variables are excessively used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments or documentation for complex logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Form submission feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance for tab navigation. Deduct 5 points for each operation without feedback, 3 points for jarring transitions between form states, and 5 points for accessibility issues (like missing ARIA attributes or keyboard navigation). The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Online Shopping",
  "difficulty": "easy"
}
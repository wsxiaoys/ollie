{
  "index": 1790,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Be sure to provide executable code when possible. Create a donation webpage.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core donation form functionality implemented correctly?",
      "description": "Review whether the form includes all essential donation fields (amount, name, email, payment method) with proper input validation. Form submission should handle data safely with CSRF protection and show clear confirmation messages. Score 0 if the form is missing, 5 if basic fields exist but lack validation, 10 if fully implemented with secure submission handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the payment processing integration complete and secure?",
      "description": "Check whether the code implements integration with payment gateways (like Stripe/PayPal) following their security best practices. Look for PCI compliance considerations, proper API key management, and server-side verification. Deduct 5 points if integration uses client-side processing only, and 3 points if error handling for failed transactions is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are donation transparency features implemented?",
      "description": "Evaluate if the page shows donation progress (e.g., progress bars, goals reached, recent donors list) and provides transparency about fund usage. Check for real-time updates with proper state management. Deduct 5 points if there's no visual representation of donation progress, and 3 points if data visualization lacks interactivity. Give 10 points if fully implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is donor engagement and community building functionality present?",
      "description": "Check whether the code includes features for donor acknowledgment (thank-you emails, donor walls, social sharing options) and recurring donation options. Assess if the implementation encourages community participation. Deduct 5 points if automated acknowledgments are missing and 3 points if there's no social integration. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as incomplete form submissions, payment failures, network interruptions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive impact visualization showing what each donation amount achieves 2. Personalized donor stories/journeys 3. Gamification elements like donation challenges or badges). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple payment processing systems duplicating code) 2. Function modules unrelated to donations (e.g., unrelated content sections) 3. Fancy effects that affect performance (e.g., excessive animations that slow loading). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core donation functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating payment logic/UI components/API services), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance on donation calls-to-action. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find donation buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Online Shopping",
  "difficulty": "medium"
}
{
  "index": 645,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration. Design a music rhythm training application where users listen to beats at different speeds and then practice by clicking a beat button within a specified time period. The system compares the user's clicking rhythm with the standard rhythm to calculate a score, displaying the user's rhythm accuracy.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the audio playback system properly implemented?",
      "description": "Review whether the code accurately implements audio playback functionality using Web Audio API or similar technology, with proper handling of timing precision. Check if it includes adjustable tempo controls (BPM range at least 40-240), metronome sounds with appropriate attack and decay, and the ability to schedule beats with millisecond precision. Score 0 if core audio playback is not implemented, 5 if basic playback without precise timing is implemented, and 10 if the system has precise timing and all required controls.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the rhythm detection and scoring mechanism accurate?",
      "description": "Evaluate whether the application correctly measures the time difference between user clicks and expected beats. The scoring system should account for human reaction time (typically 150-250ms) and have a graded scoring scale based on timing accuracy. Check for proper handling of early/late clicks with visualization of deviations. Deduct 5 points if the scoring doesn't account for human reaction time, and 3 points if the scoring lacks granularity (e.g., just right/wrong). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the training progression system comprehensive?",
      "description": "Check whether the application provides a structured learning approach with increasing difficulty levels (e.g., starting with simple quarter notes and progressing to complex polyrhythms). Verify if it includes exercises with varying time signatures (3/4, 4/4, 5/8, etc.) and rhythm patterns. Evaluate if there's a clear progression path with unlockable levels based on performance. Deduct 5 points if progression is linear without adaptivity, and 3 points if variety in rhythm patterns is limited. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is performance analysis and feedback implemented?",
      "description": "Assess whether the application provides detailed performance metrics and visual feedback. Look for features like historical performance tracking, visualization of timing errors (e.g., waveform or graph showing deviations), and actionable improvement suggestions. The system should store and display progress over time. Deduct 5 points if only basic scoring is provided without visual representation, and 3 points if historical tracking is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as audio context initialization failures, timing drift, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Check for proper cleanup of audio resources and event listeners. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visualization of rhythm patterns with animations 2. AI-assisted rhythm correction 3. Social features for comparing scores with friends 4. Exportable practice recordings). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple timing systems coexisting) 2. Function modules unrelated to rhythm training (e.g., a built-in music player without training purpose) 3. Fancy effects that affect performance (e.g., excessive animations that impact timing accuracy). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating audio engine/UI/scoring logic), unit test coverage for timing-critical components, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Check if visual cues for rhythm are intuitive and clear. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Input latency ≤ 50ms (critical for rhythm applications) 2) Visual feedback synchronized with audio events 3) Clear visual indication of successful/missed beats. Check if the application feels responsive during interaction. Deduct 5 points for perceptible input lag, 3 points for audio-visual synchronization issues, and 5 points for confusing feedback during rhythm exercises. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Action/Rhythm",
  "difficulty": "hard"
}
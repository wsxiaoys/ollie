{
  "index": 95,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that the code you generate is executable whenever possible.\n\nPlease use HTML and JavaScript to implement a real-time battle game where players can engage in immediate combat with AI or other players.\n\n**Task**: Implement a simple real-time battle system where players can fight instantly against AI or other players.\n\n**Hint**: You can set up basic combat operations and design simple AI opponents for practice or battles.\n\nInclude comments in your code so other developers can understand your implementation process.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the real-time battle system core gameplay loop properly implemented?",
      "description": "Review whether the code implements the fundamental battle mechanics including player input handling, character actions (attack, defend, special moves), and turn management. Score 0 if basic combat is not functional, 5 if only simple attacks are implemented, and 10 if the system includes varied combat actions with proper state management.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the AI opponent system effectively designed?",
      "description": "Evaluate the quality of AI implementation - check for decision-making logic, difficulty levels, and whether the AI provides an engaging challenge. Deduct 5 points if AI simply performs random actions, 3 points if AI is too predictable, and 2 points if there's no difficulty scaling. Full score requires adaptive AI that responds to player strategies.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a multiplayer combat capability implemented?",
      "description": "Check whether the code includes player-vs-player functionality, ideally with some form of networking (WebSockets, Firebase, etc.). Assess for session management, player matching, and synchronization of game states between players. Score 0 if multiplayer is completely absent, 5 if local multiplayer is implemented, 10 if online play with proper synchronization is functional.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a complete battle lifecycle management?",
      "description": "Verify if the game handles the complete battle flow: initialization, combat phases, victory/defeat conditions, and post-battle results. Check for proper state transitions and battle outcome calculations. Deduct 5 points if end conditions are missing, 3 points if there's no battle summary/results screen. Award full points for a complete, well-managed battle lifecycle.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (like invalid player inputs, connection issues, timing problems) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic weather effects affecting combat 2. Character progression/leveling system 3. Special combo mechanics or unique abilities). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple damage calculation systems) 2. Function modules unrelated to battle gameplay (e.g., an unnecessary inventory system) 3. Fancy effects that affect performance (e.g., excessive particle effects causing lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/controller layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's insufficient commenting despite the requirement. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the battle UI follows modern game design principles: 1) Clear health/status indicators 2) Intuitive control layout 3) Visual feedback for actions 4) Balanced visual hierarchy. Deduct 3 points for cluttered UI elements, 5 points for confusing status indicators, and 5 points for controls that aren't clearly communicated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive?",
      "description": "Judge whether the combat interactions feel satisfying: 1) Action response time â‰¤ 100ms 2) Visual feedback for hits/misses 3) Appropriate animation timing for attacks and effects. Deduct 5 points for actions without feedback, 3 points for sluggish animations that affect gameplay, and 5 points for unclear indication of turn order or current player. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Action/Rhythm",
  "difficulty": "easy"
}
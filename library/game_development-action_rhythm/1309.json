{
  "index": 1309,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure to ensure that the code you generate is executable. Please provide an HTML format K-pop music game with hit keys, 3 levels, and a system where players clear levels by upgrading cards.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the basic K-pop music game core mechanics fully implemented?",
      "description": "Review whether the code accurately implements key hit mechanics with timing detection (early/perfect/late hits), score calculation, and combo system. Check if the hit detection synchronizes properly with the music beats. Score 0 if core gameplay is missing, 5 if basic key hitting works without proper timing, and 10 if timing precision is properly implemented with visual feedback.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the 3 difficulty levels properly implemented and balanced?",
      "description": "Verify that 3 distinct difficulty levels exist with appropriate scaling of challenges (key hit frequency, pattern complexity, timing windows). Each level should have clear progression metrics and balance (not too easy/difficult). Deduct 3 points if levels aren't visually distinct, 5 points if difficulty scaling is poorly implemented, and 7 points if level progression system is broken or missing.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the card upgrade system functional and integrated with level progression?",
      "description": "Check if the card collection and upgrade system is properly implemented, allowing players to gain upgrades through gameplay performance. Cards should have clear attributes affecting gameplay (score multipliers, timing windows, etc.). Deduct 5 points if the upgrade path is unclear, 7 points if card upgrades don't impact gameplay, and 10 points if the system is merely decorative.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the game include proper K-pop audio integration and music synchronization?",
      "description": "Evaluate whether the game properly loads and synchronizes K-pop music tracks with the gameplay elements. Audio visualization should match the beat patterns, and hit markers should align with musical beats. Deduct 5 points for poor audio-visual synchronization, 3 points if music controls (pause/resume) aren't implemented, and 7 points if songs don't properly loop or transition between game states.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as audio loading failures, key input conflicts, browser incompatibilities, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic backgrounds based on song mood 2. Leaderboard system with social sharing 3. Performance replays with highlights). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems operating simultaneously) 2. Function modules unrelated to K-pop rhythm gameplay (e.g., unrelated mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects causing frame drops). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/audio system/UI layers), code reusability, and asset loading optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if resource loading isn't optimized (preloading music files, image sprites). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional K-pop game aesthetic standards?",
      "description": "Evaluate whether the visual design captures K-pop aesthetics: 1) Vibrant color scheme appropriate to K-pop themes 2) Professional typography with readable scoring and feedback 3) Visual elements that reference K-pop culture and artists. Deduct 3 points for inconsistent visual theming, 5 points for poor readability during gameplay, and 5 points for generic designs that don't reflect K-pop styling. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive to music?",
      "description": "Judge whether the game provides satisfying feedback aligned with music: 1) Input lag under 50ms for key presses 2) Visual hit effects synchronized with audio cues 3) Smooth transitions between game states that don't interrupt the music flow. Deduct 5 points for noticeable input delay, 3 points for jerky animations during intense sections, and 5 points for audio-visual desynchronization during gameplay. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Action/Rhythm",
  "difficulty": "hard"
}
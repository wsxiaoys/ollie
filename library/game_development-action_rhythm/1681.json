{
  "index": 1681,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code for demonstration. Help me design a mini-game similar to Agar.io for TikTok/Douyin, and first generate HTML code so I can try running it.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core game mechanic of Agar.io properly implemented?",
      "description": "Review whether the code implements the fundamental player blob movement, growth mechanics, and collision detection. The player should be able to move using mouse or touch controls, consume smaller elements to grow, and be consumed by larger players. Score 0 if core mechanics are missing, 5 if basic movement and growth are implemented, and 10 if all Agar.io-style mechanics (splitting, ejecting mass, etc.) are fully included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the canvas rendering optimized for mobile performance?",
      "description": "Check if the game uses efficient canvas rendering techniques suitable for TikTok/Douyin's mobile environment. Verify if the game implements viewport culling (only rendering objects in view), uses requestAnimationFrame properly, and optimizes for mobile GPU. Deduct 3 points for frame drops below 30fps on mid-range devices, 4 points if mobile touch controls are not properly implemented, and 3 points if the game doesn't scale properly across different screen sizes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the game implement social/viral features suitable for TikTok/Douyin?",
      "description": "Evaluate whether the game includes features that make it shareable and engaging for TikTok/Douyin users, such as quick match sessions (under 2 minutes), score sharing capabilities, personalized avatars, or replay highlights. Deduct 5 points if the game lacks any TikTok/Douyin integration hooks, 3 points if session length is inappropriate for short-form content platforms, and 2 points if there are no viral sharing mechanics. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are the AI opponents' behaviors properly implemented?",
      "description": "Assess the implementation of AI opponents, which are crucial for an engaging single-player experience. Check for varied AI behavior patterns (aggressive, defensive, etc.), pathfinding algorithms, and difficulty scaling. Deduct 3 points if AI movement is predictable/robotic, 4 points if there's no difficulty progression, and 3 points if AI doesn't adapt to player behavior. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as screen rotation, browser tab switching, touch event conflicts with the platform, network latency, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Special power-ups unique to this implementation 2. Real-time leaderboard with animation 3. Dynamic background themes based on player size). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple movement control systems) 2. Function modules unrelated to the Agar.io gameplay (e.g., unnecessary mini-games within) 3. Fancy effects that affect mobile performance (e.g., excessive particle systems). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/view/input handling layers), code organization, and optimization for TikTok/Douyin's WebView environment. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code isn't bundled or minified for production. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet short-form video platform standards?",
      "description": "Evaluate whether the overall design follows mobile-first principles: 1) Bold, vibrant colors that stand out on video feeds 2) Large, touch-friendly UI elements (minimum 44×44px tap targets) 3) Minimal text with large fonts (≥16px). Deduct 3 points for hard-to-see elements on mobile, 5 points for cluttered interfaces, and 5 points for UI that obscures gameplay. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and optimized for short gameplay sessions?",
      "description": "Judge whether the game is designed for TikTok/Douyin's fast-paced environment: 1) Initial load time ≤ 2 seconds 2) Game start to active play ≤ 3 seconds 3) Responsive controls with ≤ 50ms input lag. Deduct 5 points for each second of loading beyond thresholds, 3 points for each extra step before gameplay begins, and 5 points if touch controls aren't properly calibrated for mobile devices. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Action/Rhythm",
  "difficulty": "medium"
}
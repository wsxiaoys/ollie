{
  "index": 1070,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to make the generated code executable for demonstration. Create a running pixel racing game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core racing game engine fully implemented?",
      "description": "Review whether the code accurately implements the fundamental racing mechanics including player movement, collision detection, and race track boundaries. Assess the physics implementation for vehicle handling (acceleration, deceleration, steering). Score 0 if the core movement mechanics are missing, 5 if basic movement is implemented without proper physics, and 10 if the game includes realistic pixel-style racing physics with proper friction and momentum handling.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the pixel art style properly executed?",
      "description": "Evaluate whether the game consistently maintains an authentic pixel art aesthetic throughout all visual elements (vehicles, tracks, UI, effects). Check for appropriate pixel density, limited color palette usage, and proper pixel-perfect scaling. Deduct 5 points if the pixel art is inconsistent or mixed with non-pixel art elements, 3 points if anti-aliasing is incorrectly applied breaking the pixel aesthetic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the game loop and racing progression system implemented?",
      "description": "Check whether the code implements a complete game loop including starting sequence, lap counting, finish line detection, and race completion states. Verify if there's a timing/scoring system that tracks player performance. Deduct 5 points if lap tracking is missing, 3 points if there's no race completion state, and 5 points if there's no timing system. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there an opponent AI or multiplayer system?",
      "description": "Assess whether the game includes AI opponents with reasonable pathfinding and difficulty scaling, or a multiplayer system allowing for competitive racing. Evaluate the AI's ability to navigate the track and provide challenge without cheating. Score 0 if no opponents exist, 5 if basic AI opponents are present but lack sophisticated behavior, and 10 if either well-implemented AI with different difficulty levels or functional multiplayer racing is available.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid input changes, browser resize, frame rate drops, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic weather effects 2. Vehicle customization options 3. Procedurally generated tracks 4. Power-ups or special abilities). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple control schemes without purpose) 2. Function modules unrelated to racing (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle systems causing lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/rendering/input handling), use of appropriate design patterns for game development, and code maintainability. Deduct 5 points if global state management is chaotic; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the game loop implementation causes performance issues. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional game design standards?",
      "description": "Evaluate whether the overall design follows pixel game design principles: 1) Consistent pixel art style throughout UI elements 2) Readable pixel fonts at intended resolution 3) Clear visual hierarchy in game screens and HUD elements. Deduct 3 points for each inconsistent UI element, 5 points for unreadable text, and 5 points for cluttered or confusing HUD layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the gameplay smooth and responsive?",
      "description": "Judge whether the game meets performance standards: 1) Consistent frame rate (minimum 30 FPS) 2) Input latency under 100ms 3) Smooth animations without stuttering. Deduct 5 points for noticeable frame drops during normal gameplay, 3 points for input lag affecting player control, and 5 points if collision detection feels inconsistent or unfair. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Action/Rhythm",
  "difficulty": "medium"
}
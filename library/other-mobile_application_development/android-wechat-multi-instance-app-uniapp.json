{
  "index": 915,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to create executable code for demonstration. Write an Android WeChat multi-instance app using uni-app in HBuilderX, with properly closed tags, all contained in a single folder.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the WeChat multi-instance functionality correctly implemented?",
      "description": "Review whether the code properly implements the core multi-instance functionality, allowing users to run multiple WeChat accounts simultaneously. Check if the app uses appropriate isolation mechanisms (WebViews, separate storage spaces, or virtualization techniques) to keep instances separated. Score 0 if multi-instance functionality is not implemented, 5 if basic instance switching is available but with limitations, 10 if full isolation with proper state management is achieved.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the uni-app framework correctly utilized for cross-platform compatibility?",
      "description": "Evaluate whether the code properly uses uni-app components and APIs instead of platform-specific code. Check if conditional compilation is used where necessary for Android-specific features. Deduct 5 points if platform-specific code is used where uni-app alternatives exist, 3 points if conditional compilation is missing for critical Android features, and 2 points if HBuilderX-specific optimizations are not leveraged.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the project structure organized within a single folder as required?",
      "description": "Check if the entire application is contained within a single folder with proper organization (pages, components, static assets, etc.). Review whether the manifest.json, pages.json, and main.js files are correctly configured. Deduct 5 points for improper project structure that would prevent HBuilderX compilation, 3 points for missing configuration files, and 2 points for inefficient resource organization.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the app handle WeChat authentication and session management properly?",
      "description": "Assess whether the code handles WeChat authentication for multiple accounts, including login flows, session persistence, and token refreshing. Check if security measures are in place for storing sensitive data. Deduct 5 points if authentication is not implemented, 3 points if session persistence is missing, and 3 points if there's no secure storage for tokens.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as login failures, network interruptions, permission denials, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Customizable themes per instance 2. Message notification filtering by instance 3. Quick switching gesture controls). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple storage mechanisms for the same data) 2. Function modules unrelated to WeChat multi-instance functionality 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/logic/storage layers), component reusability, and build process optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the app's performance optimization is inadequate. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Instance switching response time ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual indication of active instance. Deduct 5 points for each operation without feedback, 3 points for visual stuttering during animations, and 5 points for confusing navigation between instances. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Other-Mobile Application Development",
  "difficulty": "medium"
}
{
  "index": 1258,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable and ready to be displayed. Create a random number selector mini-program for the Two-Color Ball lottery.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the random number generation for the Two-Color Ball lottery properly implemented?",
      "description": "Review whether the code correctly implements the Two-Color Ball lottery rules (6 red balls from numbers 1-33 and 1 blue ball from numbers 1-16). Check if the algorithm ensures no duplicates among red balls and uses a cryptographically strong random function. Score 0 if the core lottery logic is incorrect, 5 if basic random generation is implemented but with possible biases, and 10 if the implementation follows both lottery rules and cryptographic randomness standards.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the program validate all user inputs and lottery parameters?",
      "description": "Check whether the code validates all user inputs (e.g., custom number ranges, manual selections) and enforces the Two-Color Ball lottery constraints. Verify error handling for invalid inputs (e.g., out-of-range values, duplicate selections). Deduct 5 points if basic validation is missing, and 3 points if edge cases aren't handled. Full score requires comprehensive validation with clear user feedback.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the historical drawing feature implemented with statistical analysis?",
      "description": "Evaluate if the program stores and displays historical lottery drawings, and provides meaningful statistical analysis (e.g., frequency charts, hot/cold numbers, trend analysis). Check if users can review past selections and compare with winning numbers. Deduct 5 points if only basic history is available without analysis, and 8 points if historical tracking is completely absent.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the program offer both quick pick and manual selection options?",
      "description": "Assess whether users can both generate random selections (quick pick) and manually choose their own numbers. Check if the interface allows for partial selection (some manual + some random). Verify that the program can generate multiple sets of numbers in batch mode. Deduct 4 points if only random selection is available, and 7 points if the implementation severely limits user choice.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, resource limitations, unexpected user behavior) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Number frequency heat map 2. Multiple lottery systems support 3. Winning probability calculator 4. Lucky number suggestions based on birthdate/name). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple random generators with the same purpose) 2. Function modules unrelated to lottery number selection (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations when generating numbers). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating random generation logic/UI/data storage layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast interaction, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Casual",
  "difficulty": "easy"
}
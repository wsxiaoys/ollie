{
  "index": 1801,
  "question": "You are a code expert. Please utilize your professional knowledge to generate accurate and professional responses. Pay attention to ensuring that the code you generate is executable for display. Help me create an HTML code for a small web program for a company annual meeting lucky draw game.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the lucky draw core functionality fully implemented?",
      "description": "Review whether the code implements the essential lucky draw mechanics including participant data management, random selection algorithm, and winner display. Score 0 if the core drawing functionality is missing, 5 if basic random selection is implemented but lacks animation or proper winner handling, and 10 if the system includes comprehensive drawing mechanics with proper randomization entropy and winner management.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the participant management system work properly?",
      "description": "Examine how participant data is handled - whether it supports data import (e.g., CSV/Excel upload, manual entry), participant filtering (by department, position, etc.), and prevention of duplicate winners for multi-round draws. Deduct 5 points if data import is manual-only with no validation, 3 points if filtering capabilities are missing, and 2 points if there's no mechanism to prevent repeated winners. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the prize tier system properly implemented?",
      "description": "Check whether the code supports multiple prize categories with different probabilities, prize images/descriptions, and proper tracking of remaining prizes. Evaluate if the system prevents over-drawing (more winners than available prizes). Deduct 5 points if only a single prize type is supported, 3 points if there's no visual distinction between prize tiers, and 5 points if prize inventory management is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the drawing animation enhance the suspense and excitement?",
      "description": "Evaluate the drawing animation quality - whether it includes proper build-up (name flashing/scrolling), tempo changes (slowing down before revealing the winner), and satisfying reveal effects. Verify if the animation timing is appropriate for building anticipation (5-10 seconds). Deduct 5 points for static draws with no animation, 3 points for animations that are too brief or too lengthy, and 2 points for choppy/unoptimized animations. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as large participant lists, browser compatibility issues, network delays when loading assets, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Confetti/fireworks for winners 2. Sound effects synchronized with animations 3. Special effects for high-tier prizes 4. History tracking of all winners). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple random selection algorithms) 2. Function modules unrelated to lucky draw (e.g., unnecessary user profiles) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the system). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/UI/animation logic), reusability of components, and code maintainability. Deduct 5 points if global variables are overused or if there's no separation of concerns; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments for complex logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Festive and appropriate color scheme for an annual meeting 2) Proper layout with focus on the drawing area and winners 3) Professional typography with readable text even on projection screens. Deduct 3 points for each instance of poor visual hierarchy, 5 points for inappropriate color schemes, and 5 points for layouts that don't emphasize the core drawing functionality. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Responsive controls for the host/operator 2) Appropriate animation timing for building suspense 3) Clear visual and auditory feedback when winners are selected. Deduct 5 points for lack of visual feedback during drawing operations, 3 points for jarring transitions between states, and 5 points for confusing user flow that might disrupt the live event. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Casual",
  "difficulty": "easy"
}
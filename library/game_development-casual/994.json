{
  "index": 994,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Help me create an HTML file with a small lucky draw program.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core lucky draw functionality fully implemented?",
      "description": "Evaluate if the code implements a complete lucky draw system including: random selection algorithm, prize pool management, and result display. Score 0 if the core functionality is missing, 5 if basic random selection exists but lacks proper prize management, and 10 if the implementation includes configurable prize weights, animation effects during selection, and clear result presentation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the prize configuration mechanism well-designed?",
      "description": "Check if the code allows for flexible prize definition (name, probability, image, etc.) and ensures the total probability adds up correctly (100%). Deduct 5 points if prizes are hardcoded with no configuration option, 3 points if prize weights don't properly balance, and 2 points if there's no visual representation of probability. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a proper draw animation and result presentation?",
      "description": "Review whether the lucky draw includes engaging animations (such as spinning wheel, flipping cards, or slot machine effect) and clear result presentation. Deduct 5 points for static transitions with no animation, 3 points for animations that don't match the draw concept, and 2 points if the winning result isn't prominently displayed. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are draw history and statistics tracked?",
      "description": "Evaluate if the program keeps records of past draws, displays statistics, and potentially allows for result verification. Score 0 if no history is maintained, 5 if basic history exists but lacks persistence between sessions, and 10 if comprehensive statistics are available with localStorage or similar persistence mechanisms.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing configurations, unexpected user interactions, or browser compatibility issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Sound effects during draw/winning 2. Confetti animation for big prizes 3. Customizable themes or backgrounds). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple random number generators) 2. Function modules unrelated to lucky draw (e.g., a built-in calendar) 3. Fancy effects that affect performance (e.g., excessive particle effects causing lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/logic/data layers), code organization, and reusability. Deduct 5 points if global variable pollution is found; deduct 5 points if the code is not organized in logical functions or components; deduct 5 points if there's significant code duplication. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for choppy animations during the draw process, and 5 points for confusing or misleading user interactions. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Casual",
  "difficulty": "easy"
}
{
  "index": 883,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure the code you generate is executable for demonstration. Help me write a WeChat Mini Program that implements requesting the next data item when swiping right and the previous data item when swiping left.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the swipe gesture detection properly implemented?",
      "description": "Verify if the code correctly implements touch event handling (touchStart, touchMove, touchEnd) with proper threshold calculation for horizontal swipes. Check if direction detection differentiates left/right swipes accurately with at least 30px threshold. Score 0 if gesture detection is missing, 5 if basic implementation exists but edge cases aren't handled, 10 if fully implemented with velocity detection and proper cancellation of vertical scrolls.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the data pagination mechanism correctly implemented?",
      "description": "Evaluate the implementation of data fetching logic for previous/next items. Check if proper state management prevents duplicate requests and handles boundary conditions (first/last item). Verify if caching is implemented to avoid redundant network requests. Deduct 5 points if boundary detection is missing, 3 points if there's no loading state handling. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the UI transition animation smooth and intuitive?",
      "description": "Assess the animation implementation for transitions between data items. Verify if the code uses proper wxs/animation modules for smooth performance. Check if animations follow the swipe direction (slide left/right) with proper easing functions. Deduct 5 points for jerky animations, 3 points for inconsistent behavior, and 5 points if animations are missing entirely. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there proper error handling and empty state management?",
      "description": "Check how the code handles errors during data fetching (network issues, API failures) and empty data scenarios. Verify if user-friendly feedback is provided and retry mechanisms exist. Score 0 if no error handling exists, 5 if basic error messages are shown but no recovery options, and 10 if comprehensive error handling with graceful fallbacks and retry options are implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid swiping, network interruption, boundary conditions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Pull-to-refresh with custom animation 2. Haptic feedback on swipe 3. Gesture customization options 4. Smart preloading of adjacent data). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple gesture detection systems coexisting) 2. Function modules unrelated to the swipe functionality (e.g., unnecessary utility functions) 3. Fancy effects that affect performance (e.g., excessive animations that impact swipe responsiveness). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/logic/data layers), use of WeChat Mini Program best practices, and proper component encapsulation. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if mini program lifecycle methods are misused. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows WeChat Mini Program design principles: 1) Consistent with WeChat's visual language 2) Proper layout spacing and component sizing 3) Professional typography system aligned with WeChat standards. Deduct 3 points for each inconsistent visual element, 5 points for a non-native look and feel, and 5 points for chaotic layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the swipe interactions conform to human perception characteristics: 1) Swipe response time â‰¤ 100ms 2) Transition animation duration controlled between 200-400ms 3) Clear visual indicators for swipe direction/progress. Deduct 5 points for each laggy swipe response, 3 points for jittery animations during transitions, and 5 points for lack of visual feedback during swipes. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Casual",
  "difficulty": "medium"
}
{
  "index": 1040,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code whenever possible. Write a small window script for World of Warcraft that can be used for manual counting.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core counting functionality properly implemented?",
      "description": "Check whether the script accurately implements the basic counting mechanism for manual tracking in WoW. Score 0 if no counting logic exists, 5 if only basic incrementing/decrementing is implemented, and 10 if it includes features like multiple counter types, reset functionality, and persistence between sessions.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the addon properly structured according to WoW addon standards?",
      "description": "Evaluate whether the code follows proper WoW addon structure (TOC file, directory organization, proper event handling, etc.). Check if it uses the correct API calls for frame creation and management. Deduct 5 points if the TOC file is missing or incomplete, and 3 points if the addon doesn't follow proper naming conventions to avoid conflicts. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the script provide user-friendly input methods?",
      "description": "Verify if the script implements appropriate user input methods like slash commands, keybindings, or clickable buttons. Check if the commands follow WoW addon conventions and are properly registered. Deduct 5 points if slash commands aren't implemented, 3 points if there's no keybinding option, and 2 points if command help/usage information is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there proper event handling and frame management?",
      "description": "Assess whether the script correctly uses WoW API for event registration, frame creation, and UI updates. Check if it properly handles events like player login/logout, UI reloads, and avoids taint issues. Deduct 5 points for improper event handling, 5 points for memory leaks due to poor frame management, and 5 points if the script interferes with protected frames. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as addon conflicts, unexpected inputs, addon memory reset, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the script includes surprise features that enhance the experience (e.g., 1. Visual animations for count changes 2. Integration with game events for automatic counting 3. Data export/sharing functionality). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to reset counters) 2. Function modules unrelated to counting (e.g., a built-in damage meter) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating logic/view/data persistence layers), code organization, and maintainability. Deduct 5 points if global variables pollute the WoW namespace; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional WoW addon standards?",
      "description": "Evaluate whether the visual design follows WoW UI principles: 1) Consistent with WoW's visual theme 2) Proper use of WoW UI elements and textures 3) Appropriate scaling for different resolutions. Deduct 3 points for each non-standard UI element, 5 points for clashing with WoW's aesthetic, and 5 points for poor positioning or overlap with important game UI. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to WoW addon expectations: 1) Responsive to user inputs with minimal delay 2) Proper integration with WoW's frame update cycle 3) Efficiency in update processing to avoid performance impact. Deduct 5 points for each operation without feedback, 5 points for noticeable FPS drops when using the addon, and 3 points for inconsistent behavior across different game scenarios. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Casual",
  "difficulty": "easy"
}
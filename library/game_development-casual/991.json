{
  "index": 991,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable. Design a small game for practicing capital letters, based on HTML, that allows students to practice typing.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the capital letter typing practice core functionality fully implemented?",
      "description": "Review whether the code accurately implements letter display through HTML/JavaScript, including random letter generation, keyboard input capture, and correct/incorrect input validation. Score 0 if the core typing interaction logic is not implemented, 5 if only basic letter display and input are implemented, and 10 if comprehensive typing practice with real-time feedback is fully included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the scoring and progress tracking system implemented?",
      "description": "Check whether the implementation includes accuracy calculation, typing speed measurement (WPM/CPM), progress tracking, and performance statistics. Real-time score updates and session history are required. Deduct 5 points if the scoring algorithm is missing, and 3 points if progress persistence is not handled. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are multiple difficulty levels and practice modes designed?",
      "description": "Evaluate whether the game provides different difficulty levels (beginner/intermediate/advanced) with varying speeds and complexity, and multiple practice modes (timed mode, accuracy mode, endless mode). Check if adaptive difficulty adjustment is implemented based on user performance. Deduct 5 points if only single mode exists. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is comprehensive educational feedback and guidance constructed?",
      "description": "Check whether the code includes educational elements such as visual feedback for correct/incorrect typing, helpful hints, mistake analysis, and progress encouragement. Deduct 5 points if no educational guidance is provided, and 3 points if feedback is not immediate or clear. Give 10 points if comprehensive learning support is fully implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as multiple key presses, invalid input, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the learning experience (e.g., 1. Gamification elements like achievements/badges 2. Sound effects and audio feedback 3. Personalized avatars or themes 4. Social sharing of scores). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems coexisting) 2. Function modules unrelated to typing practice (e.g., built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/UI/data layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or proper code structure is not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 3 points if variable naming is inconsistent or unclear. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern educational game design principles: 1) Child-friendly color palette (high contrast, readable colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Educational typography (font size ≥ 16px for readability, clear hierarchy). Deduct 3 points for each crowded visual element, 5 points for poor color contrast affecting readability, and 5 points for chaotic layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to educational interaction standards: 1) Keystroke feedback delay ≤ 50ms 2) Smooth transitions between letters (200-300ms) 3) Clear visual indicators for current target and progress 4) Immediate visual/audio feedback for correct/incorrect input. Deduct 5 points for each delayed response, 3 points for confusing visual states, and 5 points if key interactive elements lack clear indication. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Game Development-Casual",
  "difficulty": "easy"
}
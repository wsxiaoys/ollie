{
  "index": 420,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Be sure to ensure that the code you generate is executable for demonstration. Create Vue code to parse JSON xmind files and display them as a mind map on a webpage.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Vue component structure properly organized for the mind map?",
      "description": "Evaluate if the code follows Vue best practices with a clear component hierarchy separating concerns (parser, renderer, interactions). Check for proper use of props, emits and vue lifecycle hooks. Score 0 if components are missing or poorly structured, 5 if basic structure exists but has organizational issues, and 10 if components are well-designed with clear responsibilities and interfaces.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the code correctly parse the JSON xmind file format?",
      "description": "Review whether the parser can handle the complete xmind JSON schema, including root topics, subtopics, relationships, markers, notes, and labels. Check for edge cases like empty nodes, deeply nested structures, and special characters. Deduct 3 points if only basic topic structure is parsed, 3 points if relationships are missing, and 2 points if markers or notes aren't supported. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the mind map visualization fully implemented?",
      "description": "Assess if the code properly renders the hierarchical structure with appropriate layout algorithms (radial, horizontal, vertical). Check if the visualization handles different node depths, maintains proper spacing, and avoids overlapping elements. Score 0 if visualization is broken/missing, 5 if basic rendering exists but has layout issues, and 10 if the mind map is properly displayed with a professional appearance.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are interactive features implemented for mind map manipulation?",
      "description": "Evaluate if the implementation includes essential interaction features: expand/collapse nodes, drag-and-drop positioning, zooming, and panning. Check if the code handles selecting nodes and editing content. Deduct 2 points per missing core interaction feature. Award full 10 points only if all interactions feel smooth and intuitive on different screen sizes.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as malformed JSON, missing properties, extremely large mind maps, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time collaborative editing 2. Export to different formats (PNG, PDF) 3. Keyboard shortcuts for navigation 4. Customizable themes or node styling). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementations of similar functions (e.g., multiple rendering engines coexisting) 2. Function modules unrelated to mind mapping (e.g., unrelated visualizations) 3. Fancy effects that affect performance (e.g., unnecessary animations that slow rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating parsing/rendering/interaction layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or if Vue composition API/options API are inconsistently mixed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no error handling or logging. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for nodes and connections 2) Proper layout spacing between nodes and branches 3) Professional font system with good readability and hierarchy. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic node arrangement or unclear hierarchical representation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Node expansion/collapse animations between 200-400ms 2) Smooth transitions when navigating or rearranging 3) Clear visual feedback for selections and interactions. Deduct 5 points for jerky animations, 3 points for laggy performance with larger mind maps, and 5 points for confusing interaction patterns. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Mermaid Flowcharts-Mind Maps",
  "difficulty": "hard"
}
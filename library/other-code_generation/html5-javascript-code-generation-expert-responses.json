{
  "index": 1316,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration. The code should be implemented using HTML5 and JavaScript, with the time period from March 10, 2025 to June 14, 2025.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the date range implementation correctly handling the specified time period?",
      "description": "Review whether the code accurately implements the date range from March 10, 2025 to June 14, 2025. Check if date validation is properly implemented, preventing out-of-range selections. Score 0 if dates are hardcoded without validation, 5 if basic range implementation exists but with edge case issues, and 10 if full date range management with proper validation and error handling is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the calendar visualization properly implemented?",
      "description": "Evaluate the visual representation of the calendar. Check if it shows all days within the specified period (March 10, 2025 to June 14, 2025) correctly, with appropriate month transitions. Verify that weekdays and weekends are visually distinguishable. Deduct 3 points if month transitions are incorrect, 3 points if the day labeling is inaccurate, and 4 points if the calendar doesn't reflect the exact specified date range.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are date selection and manipulation features implemented?",
      "description": "Check for functionality to select, highlight, or interact with dates in the specified range. Score 0 if no selection mechanism exists, 5 if basic date selection is implemented but lacks feedback or validation, and 10 if comprehensive date selection with visual feedback, range selection capabilities, and proper validation against the specified time period are all properly implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the date format handling flexible and internationalized?",
      "description": "Assess whether the code handles different date formats and localization. Check if it provides options for different date display formats (MM/DD/YYYY, DD/MM/YYYY, etc.) and supports different locales for day/month names. Deduct 3 points if only one date format is supported, 3 points if no localization options exist, and 4 points if the implementation doesn't handle timezone considerations.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid date inputs, browser compatibility issues, leap year considerations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive date range visualization 2. Event marking/annotation capabilities 3. Animated transitions between months). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar date handling functions 2. Function modules unrelated to the calendar/date requirement 3. Fancy effects that affect performance (e.g., excessive animations when changing months). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating date logic/view layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Other-Code Generation",
  "difficulty": "hard"
}
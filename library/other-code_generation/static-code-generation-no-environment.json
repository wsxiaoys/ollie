{
  "index": 1135,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be careful to ensure the code you generate is executable for demonstration. First, I don't want to install any environments - if I were to install environments, I wouldn't need XML files - so I'll still implement this using a purely static approach.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the code expert clearly establishing what type of code demonstration is being requested?",
      "description": "Evaluate whether the response properly acknowledges the absence of a specific request and provides appropriate guidance. The response should include a clear statement about what kind of demonstration is being offered and why. Deduct 5 points if the response immediately jumps into a random code example without context, deduct 10 points if it assumes a specific task without clarification. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is there a proper explanation of static implementation approaches?",
      "description": "Check if the response includes a comprehensive explanation of static implementation options (HTML/CSS/JavaScript without server dependencies) that align with the requirement of not installing environments. The explanation should cover browser-based execution options and limitations. Award 10 points for thorough coverage with examples, 5 points for basic explanation, 0 points if missing entirely.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a self-contained HTML/JS demonstration?",
      "description": "Assess whether the response includes at least one complete, executable HTML file with embedded JavaScript that demonstrates a concept without requiring any installation or server. The code must be fully functional when copied to a text file and opened in a browser. Award 10 points for a working demonstration with clear purpose, 5 points if it has minor issues but shows the concept, 0 points if it requires installation or server-side components.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there an explanation of alternatives to XML for static implementations?",
      "description": "Evaluate whether the response provides alternatives to XML for data representation in static environments (e.g., JSON objects, data attributes, JavaScript literals). The alternatives should be accompanied by practical code examples showing how they can be used. Award 10 points for comprehensive coverage with examples, 5 points for limited coverage, 0 points if not addressed.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing data, browser compatibility issues, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive visualizations 2. Progressive enhancement techniques 3. Creative use of modern browser APIs without external dependencies). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions 2. Function modules unrelated to the core demonstration 3. Fancy effects that affect performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design, code organization, and best practices. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code is not properly commented or lacks clear structure. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Other-Code Generation",
  "difficulty": "hard"
}
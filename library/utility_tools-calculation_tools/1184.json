{
  "index": 1184,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code where possible. WeChat Mini Program practical calculator code",
  "checklist": [
    {
      "id": 0,
      "title": "Is the basic calculator functionality fully implemented?",
      "description": "Review whether the calculator correctly implements all basic arithmetic operations (addition, subtraction, multiplication, division) with proper precedence handling. Score 0 if the core calculation logic is missing, 5 if only basic operations work but have errors with complex expressions, and 10 if all operations including parentheses and order of operations are correctly handled.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are advanced calculator features included?",
      "description": "Check whether the code includes scientific calculator functions (e.g., trigonometric functions, logarithms, powers, roots) and memory functions (MC, MR, M+, M-). Deduct 3 points if scientific functions are missing, 2 points if memory functions are absent, and 5 points if both are missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the WeChat Mini Program architecture properly implemented?",
      "description": "Evaluate whether the code follows WeChat Mini Program best practices with proper separation of app.js, page js files, WXML templates, and WXSS styles. Check for correct use of Page() and App() constructors, lifecycle hooks, and the global getApp() when needed. Deduct 5 points if the architecture doesn't follow Mini Program conventions and 5 points if the page rendering lifecycle is not handled correctly. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the calculator handle computation history and state persistence?",
      "description": "Assess whether the calculator saves computation history, allows review of previous calculations, and persists state across Mini Program restarts using wx.setStorageSync/wx.getStorageSync. Deduct 3 points if history is not implemented, 4 points if persistence across sessions is missing, and 3 points if there's no way to clear history. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common calculator edge cases (division by zero, overflow/underflow, extremely large numbers, precision issues with floating-point operations) and provides friendly error prompts. Code with strong robustness should validate all user inputs and gracefully handle all edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Voice input for calculations 2. Currency/unit conversion 3. Customizable themes or layouts 4. Formula visualization). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple calculation engines) 2. Function modules unrelated to a calculator (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations that slow down calculations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating calculation logic/view/utilities), error handling strategies, and code organization. Deduct 5 points if global state is poorly managed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation of concerns between UI and business logic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the calculator UI follows WeChat design guidelines: 1) Harmonious color matching matching with WeChat's aesthetic 2) Proper button sizing and spacing (easy touch targets ≥ 44pt) 3) Professional typography with clear number display (result font size ≥ 18px). Deduct 3 points for cluttered button layout, 5 points for poor contrast that affects readability, and 5 points for inconsistent button sizes or awkward alignments. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the calculator provides appropriate feedback: 1) Button press visual feedback ≤ 100ms 2) Calculation results appear instantly 3) Clear haptic feedback for key operations using wx.vibrateShort(). Deduct 5 points for operations without feedback, 3 points for delayed calculation results, and 5 points for lack of visual indication of the current operation. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Calculation Tools",
  "difficulty": "easy"
}
{
  "index": 1109,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure the generated code is executable for demonstration purposes. According to the 22G standard design code, help me design a web page that calculates the length of upper and lower reinforcing steel bars in frame beams.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the beam reinforcement calculation model correctly implemented?",
      "description": "Review whether the code accurately implements the mathematical model for calculating upper and lower reinforcing steel bar lengths according to the 22G standard. Check if the formula includes critical parameters such as beam span, section dimensions, hook lengths, and bend radius. Score 0 if the core calculation logic is missing, 5 if basic calculations are implemented but missing some 22G standard requirements, and 10 if fully compliant with the 22G standard specifications.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all required input parameters for reinforcement calculation included?",
      "description": "Evaluate whether the interface captures all necessary parameters: beam span, beam width, beam height, concrete cover, bar diameter, number of bars, anchorage lengths, and support dimensions. Deduct 2 points for each missing critical parameter. Check if the input fields have appropriate constraints, validation, and unit indicators. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there visual representation of the frame beam and reinforcement?",
      "description": "Assess if the code includes dynamic visualization (using SVG/Canvas/WebGL) that shows the frame beam with accurately positioned reinforcement bars. The visualization should update based on user inputs and show both longitudinal view and cross-section view. Deduct 5 points if only static images are used, 3 points if the visualization doesn't update with parameter changes, and 2 points if the reinforcement is not drawn to scale. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the calculation include detailed itemized results?",
      "description": "Check whether the results show a detailed breakdown of the steel bar lengths: straight portions, bent portions, hooks/anchors, and total quantities for both upper and lower reinforcements. Deduct 3 points if only final totals are shown without itemization, 2 points if material wastage estimation is missing, and 2 points if results don't include unit conversion options. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, edge cases like extremely small/large dimensions, conflicts in reinforcement arrangement, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Bill of materials export function 2. Multiple layout configuration templates 3. Real-time cost estimation). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar calculation methods 2. Function modules unrelated to structural engineering (e.g., a built-in general calculator) 3. Decorative elements that affect performance without adding value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating calculation logic/view/data validation layers), code documentation, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments explaining the engineering formulas or 22G standard references. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Real-time calculation updates when parameters change 2) Smooth transitions when visualization updates 3) Clear visual feedback for user actions. Deduct 5 points for delayed calculation feedback (>500ms), 3 points for jumpy visualization updates, and 5 points for hidden or confusing engineering controls. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Calculation Tools",
  "difficulty": "medium"
}
{
  "index": 1183,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, expert responses. Ensure that any code you generate is executable and demonstrable. Write a calculator using Maui.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the MAUI calculator UI layout properly implemented?",
      "description": "Evaluate whether the code implements a responsive grid layout for the calculator buttons that adapts to different screen sizes and orientations. Check for proper margins, padding, and alignment of elements. Score 0 if there's no proper layout implementation, 5 if basic layout exists but doesn't handle different screen sizes well, and 10 if the layout is responsive and visually balanced across devices.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all core calculator functions implemented?",
      "description": "Review whether the implementation includes all standard calculator operations (addition, subtraction, multiplication, division), as well as additional functions like percentage, square root, memory operations, etc. Ensure proper implementation of decimal point handling and operator precedence. Deduct 2 points for each missing core function and 1 point for each incorrect implementation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the calculation engine properly designed and separated from UI logic?",
      "description": "Check if the solution follows MVVM pattern with clean separation between the calculation engine and UI. Evaluate whether the code uses proper data binding between the ViewModel and View. Deduct 5 points if there's no clear separation of concerns, 3 points if data binding is implemented incorrectly, and 2 points if state management is problematic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the calculator handle input validation and error conditions?",
      "description": "Assess how the code handles edge cases like division by zero, overflow/underflow, invalid input sequences (e.g., multiple operators in sequence), and large number handling. Check for user feedback on errors. Score 0 if there's no error handling, 5 if basic validation exists but lacks comprehensive coverage, and 10 if all common calculator errors are properly handled with clear user feedback.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid button presses, unexpected input sequences, or app state changes during calculations) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Scientific calculator mode 2. Calculation history tracking 3. Customizable themes or button layouts 4. Unit conversion capabilities). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to perform the same calculation) 2. Function modules unrelated to a calculator (e.g., built-in games or unrelated tools) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating calculation logic/view/services), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Button press feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual indication of button presses and calculation results. Deduct 5 points for each operation without feedback, 3 points for sluggish UI responses during calculations, and 5 points for confusing state transitions. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Calculation Tools",
  "difficulty": "easy"
}
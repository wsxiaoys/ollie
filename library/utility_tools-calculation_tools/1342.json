{
  "index": 1342,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code whenever possible. Can you help me create a lottery number filter for the Welfare Lottery 3D game, similar to the functionality in the \"Number Calculator\" app?",
  "checklist": [
    {
      "id": 0,
      "title": "Is the basic 3D lottery filtering functionality implemented?",
      "description": "Check whether the code includes core filtering functions for Welfare Lottery 3D (000-999): digit-specific filters (odd/even, big/small), sum value filters, span value filters, and group/repeat number checks. Score 0 if basic filtering is missing, 5 if only simple filters are implemented, and 10 if comprehensive filtering logic matching professional lottery apps is present.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the implementation include advanced statistical analysis features?",
      "description": "Evaluate whether the code provides statistical analysis tools such as frequency charts, historical trend analysis, hot/cold number identification, and probability calculations. Deduct 3 points if basic frequency analysis is missing, 5 points if historical data comparison is absent, and 2 points if probability calculations are inaccurate or missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a comprehensive number combination generator with constraints?",
      "description": "Assess whether the code can generate number combinations based on multiple filter conditions simultaneously, with optimization for performance when generating large sets. Check if the generator can handle complex condition combinations without duplication. Deduct 5 points if the generator doesn't support multiple constraints, 3 points if performance degrades with >1000 combinations, and 2 points if duplicates aren't eliminated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is historical data management and import/export functionality included?",
      "description": "Check if the code includes functionality to import historical lottery results, save user-defined filters, and export filtered number sets. The system should allow data import from CSV/Excel or direct web scraping from official lottery sites. Deduct 5 points if import/export is missing, 3 points if saved filters cannot be reused, and 2 points if there's no batch operation support. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, unexpected format in imported data, network issues during data fetching, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-based number recommendation 2. Visual pattern recognition in historical data 3. Personalized filtering strategy based on user history). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar filtering functions 2. Function modules unrelated to lottery analysis (e.g., a built-in general calculator) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/UI/storage layers), algorithm optimization for lottery calculations, and code maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if algorithm complexity is not optimized for lottery operations. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Filter application feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual guidance for filter selection and results. Deduct 5 points for each operation without feedback, 3 points for visual stuttering during number generation, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Calculation Tools",
  "difficulty": "hard"
}
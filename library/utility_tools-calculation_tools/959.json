{
  "index": 959,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be careful to ensure that the code you generate is executable and demonstrable. Create an interactive calculator.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the basic calculator functionality fully implemented?",
      "description": "Check whether the code implements all basic arithmetic operations (addition, subtraction, multiplication, division), with proper handling of decimal points and operator precedence. Score 0 if operations are missing, 5 if basic operations work but have precedence issues, and 10 if all operations work correctly with proper PEMDAS implementation.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are advanced calculator features included?",
      "description": "Evaluate whether the calculator includes scientific functions (sin, cos, tan, log, etc.), memory functions (M+, M-, MR, MC), and conversion capabilities (degrees/radians, different number bases). Deduct 3 points if scientific functions are absent, 3 points if memory functions are missing, and 4 points if no conversions are available. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is input validation and error handling properly implemented?",
      "description": "Assess how the calculator handles invalid inputs (like division by zero, improper syntax, overflow/underflow). Check for clear error messages and graceful error recovery. Deduct 5 points if the calculator crashes on invalid input, 3 points if errors occur without user notification, and 2 points if error messages are technical rather than user-friendly. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is calculation history functionality provided?",
      "description": "Check if the calculator maintains a history of calculations that users can review, recall, or reuse. Verify if the history persists between sessions using local storage. Deduct 5 points if history functionality is completely absent, 3 points if history exists but can't be interacted with, and 2 points if history doesn't persist between sessions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as rapid consecutive clicks, keyboard and mouse input combinations, or browser-specific issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Voice input/output 2. Customizable themes/layouts 3. Formula visualization with graphs). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to perform the same calculation) 2. Function modules unrelated to calculation (e.g., unnecessary widgets or distractions) 3. Fancy effects that affect performance (e.g., excessive animations that slow input response). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating calculation logic/UI/event handling), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (button text size ≥ 14px, proper contrast between numbers and background). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for misaligned buttons or inconsistent spacing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Button press/release feedback ≤ 50ms 2) Visual feedback on operation success/failure 3) Clear state indication (current operation, memory status, etc.). Deduct 5 points for each operation without feedback, 3 points for laggy response when entering multiple digits quickly, and 5 points for confusing state transitions between operations. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Calculation Tools",
  "difficulty": "easy"
}
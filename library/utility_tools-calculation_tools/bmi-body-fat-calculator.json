{
  "index": 1512,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Create a simple BMI body fat calculator using DevEco. Below are some code snippets that you can try to complete, or you can directly generate the code.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the BMI calculation formula correctly implemented?",
      "description": "Check whether the BMI calculation formula (weight(kg)/height(m)²) is accurately implemented with proper unit conversion (if user inputs in different units). Verify input validation for height and weight (non-negative values, reasonable range checks). Score 0 if calculation is incorrect, 5 if basic calculation is implemented but lacks input validation, and 10 if perfect with validation and unit options.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the body fat percentage calculation included?",
      "description": "Evaluate if the calculator includes body fat percentage calculations using established formulas (e.g., Navy method, Jackson-Pollock). Check if it requests required inputs like gender, age, and appropriate body measurements. Score 0 if absent, 5 if implemented but using only basic formulas without considering age/gender variables, 10 if comprehensive with multiple calculation methods.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the DevEco framework properly utilized?",
      "description": "Check if the code correctly utilizes DevEco Studio and HarmonyOS/OpenHarmony frameworks. Verify proper component structure, lifecycle management, and appropriate use of ArkUI/eTS features. Deduct 5 points if not using DevEco-specific components when appropriate, 3 points if not following recommended architecture patterns. Full score requires proper DevEco project structure and appropriate use of platform-specific features.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are the calculation results interpreted with proper health guidance?",
      "description": "Review whether the application provides interpretation of BMI/body fat results according to standard health categories (Underweight, Normal, Overweight, Obese) with appropriate health recommendations. Check if visual indicators (color coding, charts) are used to represent different health ranges. Score 0 if no guidance, 5 if basic categories without recommendations, 10 if comprehensive with visualizations and personalized guidance.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty inputs, non-numeric inputs, extreme values, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Progress tracking over time 2. Visual body shape representation based on metrics 3. Dietary/exercise recommendations based on results). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar calculations 2. Function modules unrelated to health metrics (e.g., unnecessary social sharing features) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating calculation logic/view/data layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Calculation Tools",
  "difficulty": "easy"
}
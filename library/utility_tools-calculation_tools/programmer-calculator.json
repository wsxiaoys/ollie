{
  "index": 1487,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is functional and can be displayed. Using markdown, provide me a calculator for programmers, with the generated HTML consisting of div and script components for each function.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the basic calculator functionality fully implemented?",
      "description": "Verify if the code implements all essential calculator operations (addition, subtraction, multiplication, division, modulo) correctly. Check if it handles operand precedence properly and supports parentheses for expression grouping. Score 0 if core calculation logic is missing, 5 if basic operations work but with edge case errors, and 10 if calculations are mathematically accurate in all scenarios.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are programmer-specific functions included?",
      "description": "Evaluate whether the calculator includes functions essential for programmers: binary/hexadecimal/octal conversions, bitwise operations (AND, OR, XOR, NOT, shifts), logic operations, and possibly scientific functions. Deduct 2 points for each key programmer function missing. Award full points only if the calculator supports multiple number bases and complete set of bitwise operations.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the memory and history functionality implemented?",
      "description": "Check if the calculator maintains operation history, allows result recall, and includes memory functions (M+, M-, MR, MC). Verify if users can copy results to clipboard and recall previous calculations. Deduct 3 points if history tracking is missing, 3 points if memory operations are absent, and 2 points if clipboard integration is not implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the calculator handle different number systems properly?",
      "description": "Assess whether the calculator allows seamless switching between decimal, binary, octal, and hexadecimal systems. Verify if it properly displays bit representation, handles signed vs. unsigned integers, and allows bit-length selection (8/16/32/64-bit). Deduct 5 points if conversion between bases has errors, and 5 points if bit manipulation operations don't respect selected bit length.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as division by zero, invalid inputs, overflow/underflow conditions) and provide friendly error prompts. Code with strong robustness should prevent calculation errors through input validation and handle edge cases gracefully. Give 10 points if fully robust, 5 points if some edge cases are unhandled, and 0 points if major calculation errors occur frequently.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Expression syntax highlighting 2. Auto-parentheses balancing 3. Real-time conversion between number systems 4. Customizable keyboard shortcuts). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to perform the same calculation) 2. Function modules unrelated to a programmer's calculator (e.g., unnecessary graphics) 3. Fancy effects that affect performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/calculation logic/state management), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high; deduct 5 points if there's inadequate error handling or poor code structure. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the UI follows professional calculator design principles: 1) Clear visual hierarchy between number pad and special functions 2) Proper button spacing and sizing for usability 3) Effective use of color to distinguish function groups 4) Clear display area with appropriate font size and contrast. Deduct 3 points for each hard-to-read element, 5 points for inconsistent button styling, and 3 points for poor layout organization. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the calculator provides appropriate feedback: 1) Button press visual feedback â‰¤ 100ms 2) Clear indication of active mode/base 3) Responsive layout for different screen sizes. Deduct 3 points for each button that lacks visual feedback, 5 points for confusing operation state indicators, and 5 points if the calculator doesn't work properly on mobile devices. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Calculation Tools",
  "difficulty": "medium"
}
{
  "index": 1804,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration when possible. Write a JavaScript program that can provide solutions for mitigating physical harm after users consume unhealthy foods.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core health assessment functionality properly implemented?",
      "description": "Evaluate whether the code accurately implements algorithms to calculate health impacts from unhealthy food consumption. Check if it includes nutrient analysis, caloric impact estimation, and personalized risk assessment. Score 0 if no assessment logic exists, 5 if basic calorie counting is implemented, and 10 if comprehensive health impact analysis with scientific backing is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are evidence-based mitigation strategies provided?",
      "description": "Check if the solution offers scientifically-backed mitigation strategies (e.g., specific exercises, nutritional counterbalances, hydration recommendations). Verify if strategies are tied to specific unhealthy food types. Deduct 5 points if recommendations lack scientific citations, 3 points if strategies are generic rather than food-specific. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is user input handling comprehensive and personalized?",
      "description": "Evaluate the implementation of user input collection for personalization (age, weight, height, existing health conditions, food consumed). Check if BMI calculation and individual factors are considered when providing recommendations. Deduct 5 points if basic physical parameters are missing, 3 points if the system doesn't adapt recommendations based on user profile. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a visualization component for health impact and improvement tracking?",
      "description": "Assess whether the code includes visual representations (charts, progress trackers, comparison metrics) to help users understand health impacts and track improvement. Check for interactive elements that respond to user input. Deduct 5 points if no visualization exists, 3 points if visualizations are static rather than interactive. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid user inputs, extreme nutritional values, missing health data, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time AI nutritional advice 2. Integration with fitness trackers 3. Social sharing of health improvement milestones). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple BMI calculation methods) 2. Function modules unrelated to health mitigation (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating nutritional analysis/recommendation/visualization layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Calculation Tools",
  "difficulty": "hard"
}
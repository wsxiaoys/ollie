{
  "index": 1749,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration. Help me create a webpage that converts geographic coordinates in degrees to Gauss coordinates, referencing China's CGCS2000 system.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the coordinate conversion system accurately implemented?",
      "description": "Review whether the JavaScript code correctly implements the mathematical formulas for converting geographic coordinates (latitude, longitude) to Gauss-Krüger projection coordinates in the CGCS2000 system. Check the implementation of key formulas including meridian arc length calculation, curvature radius calculation, and the specific transformation constants for CGCS2000. Score 0 if core conversion formulas are missing, 5 if basic conversion is implemented but with mathematical errors, and 10 if the conversion fully conforms to the CGCS2000 national standard.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are the specific parameters of the CGCS2000 system correctly configured?",
      "description": "Evaluate whether the code correctly specifies CGCS2000 parameters including semi-major axis (a=6378137m), flattening (f=1/298.257222101), central meridian selection logic, and projection zone handling (3° or 6° zones). Deduct 2 points for each incorrect parameter, 5 points if the ellipsoid parameters are wrong, and 3 points if zone calculation is improperly handled. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the input validation and error handling complete?",
      "description": "Check whether the code validates input coordinates (latitude: -90° to 90°, longitude: -180° to 180°), handles edge cases like polar regions, and provides clear error messages. Deduct 3 points for missing boundary checks, 5 points if invalid inputs crash the application, and 2 points if error messages are unclear. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the implementation include reverse conversion (Gauss to geographic coordinates)?",
      "description": "Evaluate whether the code includes the inverse transformation from Gauss coordinates back to geographic coordinates, allowing for bidirectional conversion. Check the implementation of the iterative algorithm typically needed for this reverse process. Score 0 if reverse conversion is not implemented, 5 if it's implemented but with significant precision issues, and 10 if it correctly implements the reverse calculation with proper convergence criteria.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (invalid coordinates, non-numeric inputs, extreme values, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should prevent calculation errors and handle edge cases effectively. Give 10 points for comprehensive error handling, 5 points for basic validation, and 0 points if no exception handling exists.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes useful additional features that enhance functionality (e.g., 1. Visualization of the converted points on a map, 2. Batch conversion capability for multiple coordinates, 3. Supporting different projection zones/central meridians, 4. History of recent conversions). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar calculation functions, 2. Function modules unrelated to coordinate conversion (e.g., unnecessary animation effects), 3. Computationally expensive features that affect performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core conversion functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating calculation logic from UI), code organization, documentation quality, and maintainability. Deduct 5 points if global variables are excessively used; deduct 5 points if the code lacks comments explaining the mathematical formulas; deduct 5 points if floating-point precision issues are not addressed. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional form design with clear input/output sections. Deduct 3 points for each poorly arranged form element, 5 points for confusing input/output areas, and 5 points for illegible text or poor contrast. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the user interaction intuitive and responsive?",
      "description": "Judge whether the interface provides clear guidance on input format requirements, immediate feedback on conversion results, and appropriate precision display options. Deduct 5 points if coordinate input format is unclear, 3 points if conversion requires multiple unnecessary clicks, and 5 points if results are displayed without proper formatting or units. Check that conversion happens within 100ms of user input completion. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Utility Tools-Calculation Tools",
  "difficulty": "easy"
}
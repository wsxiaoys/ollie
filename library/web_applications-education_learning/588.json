{
  "index": 588,
  "question": "You are a code expert, please use your professional knowledge to generate accurate, professional responses. Make sure the code you generate is executable when possible. Implement an online learning progress reminder application where users can set multiple learning tasks and their deadlines. The application checks task progress daily and reminds users before deadlines. It supports marking task completion status and generates weekly task completion reports.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core task management system fully implemented?",
      "description": "Check whether the code includes complete task creation, editing, and deletion functionality. Verify if tasks can store title, description, deadline, priority level, and completion status. Ensure validation for required fields (especially deadlines). Score 0 if basic CRUD operations are missing, 5 if only basic operations without validation are implemented, and 10 if comprehensive task management with full validation is provided.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the deadline reminder system properly implemented?",
      "description": "Evaluate whether the application has a proper time-based reminder system. Check for a mechanism to calculate days remaining until deadline, configurable reminder thresholds (e.g., remind 1 day, 3 days before), and appropriate notification display. Deduct 5 points if reminders are static and not deadline-based, 3 points if notification timing isn't configurable, and 2 points if notifications lack persistence across sessions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the progress tracking functionality properly implemented?",
      "description": "Review whether users can mark tasks as in-progress or completed with appropriate status indicators. Verify if the code tracks completion percentage for multi-step tasks and provides visual progress indicators (progress bars, etc.). Deduct 5 points if only binary completion status (done/not done) is supported without partial progress, 3 points if no visual indicators exist, and 2 points if progress history isn't maintained. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the weekly report generation feature properly implemented?",
      "description": "Check whether the application can generate comprehensive weekly reports showing completed/pending tasks, completion rates, and upcoming deadlines. Verify if reports include visual data representations (charts, graphs) and can be exported/shared. Deduct 5 points if only basic text statistics are shown without visualizations, 3 points if historical comparison data is missing, and 3 points if export/sharing functionality isn't implemented. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid date inputs, network interruption when saving data, browser crashes, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-based task prioritization suggestions 2. Integration with calendar applications 3. Smart deadline recommendations based on task complexity). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple notification systems coexisting) 2. Function modules unrelated to learning progress tracking (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data models/view/controllers), unit test coverage, and persistence mechanisms. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if data persistence is poorly implemented (e.g., only using localStorage without backup). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance for task management workflow. Deduct 5 points for each operation without feedback, 3 points for laggy task status updates, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "hard"
}
{
  "index": 1637,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration purposes. Create a typing training simulator.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the typing input system properly implemented?",
      "description": "Evaluate whether the code correctly captures keystrokes, handles character matching with target text, and validates user input. Check if it accurately measures typing speed (WPM), accuracy percentage, and handles both correct and incorrect keystrokes appropriately. Score 0 if basic keystroke detection is missing, 5 if only basic functionality exists, and 10 if it includes advanced features like key highlighting and real-time feedback.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the application include a comprehensive text content system?",
      "description": "Review the variety and quality of typing content (paragraphs, sentences, words, code snippets). Check whether the system includes different difficulty levels and diverse content categories. Score 3 points for basic random text generation, 7 points for a moderate collection of varied content, and 10 points for an extensive library with customizable content options and progressive difficulty.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a complete statistics and progress tracking system?",
      "description": "Assess whether the application tracks and displays meaningful typing metrics (WPM, accuracy, error rate, improvement over time). Verify if historical data is persisted and if the system provides visual charts/graphs for progress tracking. Deduct 5 points if only basic current-session stats are shown without persistence, and 3 points if visualization of progress is missing. Give full 10 points for comprehensive analytics with trend analysis.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are there customization options and training modes?",
      "description": "Evaluate the range of training modes (timed tests, word practice, code typing, etc.) and customization options (font size, themes, sound effects, keyboard layouts). Check if users can create custom training sessions. Score 3 points for basic functionality, 7 points if multiple modes exist, and 10 points if it includes adaptive training that focuses on user's weak points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle edge cases (rapid typing, simultaneous key presses, focus loss, browser tab switching, etc.) and provides appropriate error handling. Code with strong robustness should prevent text selection/copy-paste and handle international keyboard layouts. Give 10 points if all edge cases are handled, 5 points if basic error handling exists, and 0 points if the application breaks under common scenarios.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Heatmap of problematic keys 2. Customizable virtual keyboard display 3. Gamification elements like achievements, badges or competitive leaderboards 4. Audio rhythm guidance). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant event listeners or duplicate input handling 2. Feature modules unrelated to typing practice (e.g., built-in games unrelated to typing skills) 3. Unnecessary animations that distract from typing practice. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (separation of UI/logic/data layers), code organization, and maintainability. Check for proper event delegation, memory management (especially for long typing sessions), and performance optimization. Deduct 5 points if global state is poorly managed; deduct 5 points if the code has high redundancy; deduct 5 points if there's no clear architecture. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the design follows modern principles: 1) Clear visual distinction between typed and target text 2) Proper contrast for text readability (WCAG AA compliance) 3) Consistent spacing and typography (monospace fonts for typing exercises). Deduct 3 points for each readability issue, 5 points for poor text contrast, and 5 points for inconsistent cursor/caret behavior. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the application provides immediate feedback for each keystroke (â‰¤ 50ms), smooth cursor movement, and appropriate visual/audio feedback for errors. Assess if the UI updates without noticeable lag even during fast typing. Deduct 5 points for delayed keystroke feedback, 3 points for jarring error indicators, and 5 points for screen flickering during typing sessions. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "medium"
}
{
  "index": 1797,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure the generated code is executable for display. Help me design an HTML webpage that can implement the attendance function for Cooking Class 1, with the following student list: Yang Xinyi, Huang Siyan, Pan Yueyu, Qian Yisheng, Hu Renying, Wei Yuqi, Wang Feier, Tang Jingyi, Han Yichen, Lu Yijing, Su Luyi, Jiang Liyan, Jiang Yawen, Lin Yichen, Liang Yutong, Ren Ke, Liu Xinwan, Yuan Jingying, Wu Songtao, Zheng Yi, Qu Anjie, Li Yifei, Zhang Cuiyan, Yang Ruixi, Zhu Zhipeng, Yang Jin, Gong Yunxi, Shen Yanbin, Wang Ao, Liao Rui",
  "checklist": [
    {
      "id": 0,
      "title": "Is the basic attendance function fully implemented?",
      "description": "Review whether the code accurately implements the core attendance recording functionality. Check if it includes: 1) Complete student list display 2) Status tracking (present/absent/late) 3) Date selection 4) Save/update mechanism. Score 0 if core functionality is missing, 5 if basic attendance marking is implemented but lacks data persistence, and 10 if complete with data storage and retrieval capability.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the student data management system properly structured?",
      "description": "Evaluate how student data is organized and managed. The student list should be loaded dynamically (not hard-coded in HTML), properly formatted, and stored efficiently. Check whether alphabetical sorting or search functionality is implemented. Deduct 3 points if data is hard-coded in HTML elements, 3 points if there's no data validation, and 2 points if student names aren't properly displayed or formatted. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the attendance tracking include essential features for a classroom setting?",
      "description": "Examine whether the system includes practical features needed for a cooking class environment: 1) Timestamp recording 2) Attendance statistics (percentage/summary) 3) Status differentiation (e.g., excused/unexcused absences) 4) Class date management. Deduct 2 points for each missing essential feature. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the data persistence mechanism appropriate for the application?",
      "description": "Assess how attendance records are stored and retrieved. Check for: 1) Local storage implementation 2) Data export functionality (CSV/PDF) 3) Data integrity protection. Attendance data should persist between sessions. Deduct 5 points if there's no persistence mechanism, 3 points if data can be easily corrupted or lost, and 2 points if there's no export functionality. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as duplicate entries, browser refresh, accidental deletions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Automatic absence notifications 2. Attendance trends visualization 3. QR code check-in option 4. Voice command recognition for marking attendance). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to mark attendance) 2. Function modules unrelated to attendance tracking (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/view/controller layers), code organization, and reusability. Deduct 5 points if global variables are excessively used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation of concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance for attendance marking. Deduct 5 points for each operation without feedback, 3 points for laggy interactions when marking multiple students, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
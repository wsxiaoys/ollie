{
  "index": 384,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code for demonstration. Create a Java mini-program HTML framework around the themes of smart campus, social services, and creative tools.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the smart campus functionality comprehensively implemented?",
      "description": "Review whether the code implements core smart campus features such as course scheduling, grade inquiry, library seat booking, campus navigation, and dormitory management through Java backend and HTML frontend integration. Check if real-time data synchronization is established between frontend and backend. Score 0 if no smart campus features are implemented, 5 if only basic information display is provided, and 10 if a complete smart campus ecosystem with interactive features is fully implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are social services features properly integrated?",
      "description": "Evaluate whether the social service modules include user authentication, friend management, real-time messaging, group discussions, and activity organization features. Check if WebSocket or similar technologies are used for real-time communication and whether user privacy protection mechanisms are in place. Deduct 5 points if messaging functionality is missing, 3 points if user session management is incomplete. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are creative tools functionality and user interaction well-designed?",
      "description": "Assess whether creative tools include features like document editing, image processing, collaborative whiteboard, or multimedia content creation. Check if the tools provide real-time preview, version control, and export capabilities. Evaluate whether drag-and-drop interactions and intuitive toolbars are implemented. Deduct 5 points if tools lack real-time feedback, 3 points if collaborative features are missing. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the Java-HTML framework architecture properly structured?",
      "description": "Review whether the Java backend follows MVC or similar architectural patterns, with proper separation of controllers, services, and data access layers. Check if RESTful APIs are correctly implemented for frontend-backend communication and whether proper error handling and response formatting are in place. Deduct 5 points if API design is inconsistent, 3 points if dependency injection is not utilized. Give 10 points if architecture is well-structured with clear separation of concerns.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid input validation, database connection failures, file upload errors, concurrent access issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should include proper exception handling, input sanitization, and graceful degradation. Give 10 points if fully robust, 5 points if average robustness, and 0 points if no exception handling is present.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance user experience (e.g., 1. AI-powered course recommendation 2. AR campus navigation 3. Real-time collaborative editing 4. Smart scheduling optimization 5. Voice-to-text integration). Add 3 points for each practical innovative feature implemented with proper demonstration (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple authentication systems coexisting) 2. Function modules unrelated to the three core themes 3. Over-engineered features that complicate basic operations. Deduct 3 points for each redundancy found, and directly deduct 10 points if core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (proper package structure, separation of frontend/backend concerns), code documentation, configuration management, and build process. Deduct 5 points if global state pollution is found or SOLID principles are violated; deduct 5 points if code duplication rate is too high (over 30%); deduct 5 points if no build automation or dependency management is present. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching with consistent theme (no more than 3 primary colors) 2) Proper layout spacing following grid systems (8px multiples) 3) Professional typography (body font ≥ 14px, line height ≥ 1.5) 4) Responsive design compatibility. Deduct 3 points for each crowded visual element, 5 points for jarring color combinations, and 5 points for inconsistent styling. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Loading states and progress indicators for async operations 3) Smooth transitions between pages/states (300-500ms) 4) Clear visual focus and navigation cues 5) Touch-friendly interface elements. Deduct 5 points for each operation without feedback, 3 points for janky animations or transitions, and 5 points for poor mobile responsiveness. Full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "hard"
}
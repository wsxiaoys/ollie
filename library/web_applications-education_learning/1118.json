{
  "index": 1118,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code for demonstration. Use JavaScript to build a website for grading students' short-answer geography questions.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core grading engine properly implemented?",
      "description": "Check if the code implements a natural language processing (NLP) algorithm for evaluating short-answer geography questions. The system should include keyword matching, semantic similarity analysis, or machine learning models. Score 0 if no grading logic is implemented, 5 if only basic keyword matching exists, and 10 if sophisticated analysis (context understanding, synonym recognition) is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the system have a comprehensive geography question database?",
      "description": "Evaluate whether the code includes or connects to a structured database of geography questions with corresponding answer criteria. The database should cover various geography topics (physical geography, human geography, etc.) with clear grading rubrics. Deduct 5 points if the question set is too limited (less than 20 questions), and 3 points if the answer criteria are ambiguous. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there a flexible student answer input system?",
      "description": "Review the implementation of the answer submission interface, including text formatting, spell-checking, word count indicators, and support for special geography symbols or terminology. The interface should allow for different answer lengths and provide clear submission feedback. Deduct 5 points if the input system doesn't handle basic text formatting or if there's no character limit indicator. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are the feedback and assessment features comprehensive?",
      "description": "Check if the system provides detailed feedback on student answers, including strengths, weaknesses, correct concepts identified, and missing key points. Score 0 if no feedback is provided, 5 if only a basic score is given, and 10 if comprehensive, educational feedback with improvement suggestions is implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty submissions, extremely long answers, special characters, network interruptions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive maps for geography answers 2. Visualizations of student performance analytics 3. AI-suggested learning resources based on mistakes). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple grading algorithms coexisting) 2. Function modules unrelated to geography question grading (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating grading logic/UI/data layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Grading result feedback delay ≤ 500ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual guidance for question navigation. Deduct 5 points for each operation without feedback, 3 points for sluggish grading responses, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
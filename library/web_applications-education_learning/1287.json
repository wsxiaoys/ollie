{
  "index": 1287,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code in your demonstration. Write an HTTP website that allows users to edit and save text. Using the most simple and straightforward language, tell me how to do this.",
  "checklist": [
    {
      "id": 0,
      "title": "Is a complete HTTP server properly implemented?",
      "description": "Evaluate whether the code implements a proper HTTP server using appropriate frameworks/libraries (e.g., Express.js, Flask, etc.). Check if it correctly handles HTTP requests (GET, POST) for serving the editor page and saving text. Deduct 5 points if the server doesn't implement proper routing, 5 points if error handling is missing, and 5 points if it lacks appropriate HTTP status codes. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the text editor UI functionality fully implemented?",
      "description": "Review whether the code implements a functional text editor interface with essential features like text input, cursor positioning, and basic formatting. Score 0 if there's no editor implementation, 5 if only a basic textarea is provided without any enhancement, and 10 if the editor includes proper styling, clear visual feedback, and intuitive controls for text editing. Check if the editor component is appropriately integrated with the page layout.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the text saving mechanism properly implemented?",
      "description": "Assess whether the code includes a proper mechanism to save edited text (client-side AJAX calls, form submission, etc.) and appropriate server-side handlers to process and store the data. Check for data persistence methods (file system, database). Deduct 5 points if saving is client-side only without server persistence, 5 points if there's no feedback after saving, and 3 points if there's no validation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is there a text loading/retrieval mechanism to edit previously saved content?",
      "description": "Evaluate if the code implements functionality to retrieve and load previously saved text into the editor. Check for proper handling of file/data fetching and display in the editor. Deduct 5 points if there's no way to list or select saved files, 5 points if loading doesn't maintain formatting or content integrity, and 3 points if error handling for missing files is absent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty submissions, excessively large text inputs, concurrent edits, server errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Auto-save functionality 2. Markdown support 3. Syntax highlighting 4. Version history/diff viewing). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple saving mechanisms coexisting) 2. Function modules unrelated to text editing (e.g., unnecessary analytics) 3. Fancy effects that affect performance (e.g., complex animations that slow down typing). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating editor logic/view/data layers), error handling, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between front-end and back-end concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Save operation feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual feedback for saving status. Deduct 5 points for each operation without feedback, 3 points for lag during typing or saving, and 5 points for confusing UI state indicators. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
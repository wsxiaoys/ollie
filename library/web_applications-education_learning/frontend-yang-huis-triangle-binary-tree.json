{
  "index": 770,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code in your demonstrations. Write a program using frontend languages to create Yang Hui's triangle (Pascal's triangle) in the form of a pyramid-shaped binary tree.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core logic of Yang Hui's triangle (Pascal's triangle) correctly implemented?",
      "description": "Check whether the code accurately calculates each value in the triangle using the formula where each number equals the sum of the two numbers above it (C(n,k) = C(n-1,k-1) + C(n-1,k)). Verify if the algorithm handles edge cases (first and last elements in each row are always 1). Score 0 if the core calculation logic is incorrect, 5 if it works for small examples but has edge case errors, 10 if the implementation is mathematically precise for all cases.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the pyramid-shaped binary tree visualization properly rendered?",
      "description": "Evaluate whether the code accurately renders the triangle in a visually correct pyramid/binary tree format with proper node connections. Check if parent-child relationships between numbers are visually represented. Deduct 5 points if nodes aren't properly aligned vertically and horizontally; deduct 3 points if the tree structure isn't clearly discernible. Score 10 points for a perfect binary tree representation with clear hierarchical visualization.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the triangle dynamically generated and scalable?",
      "description": "Verify whether users can specify the number of rows to display, and if the code can handle at least 15 rows without performance issues or layout problems. Check if the visualization can properly scale to accommodate larger numbers. Deduct 5 points if only a fixed number of rows is supported, 3 points if layout breaks with larger numbers. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are proper interactive elements implemented?",
      "description": "Check for user controls like buttons, sliders, or input fields that allow customization of the triangle (e.g., changing the number of rows, highlighting specific numbers/patterns, etc.). Assess whether the UI provides real-time feedback when interacting with the triangle. Deduct 5 points if only static controls exist with page reloads, 3 points if interactions aren't intuitive. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as negative inputs, extremely large inputs, non-numeric inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Color-coding to highlight mathematical patterns 2. Animation showing how the triangle builds up row by row 3. Interactive exploration of mathematical properties like Fibonacci numbers within the triangle). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to calculate the same values) 2. Function modules unrelated to Yang Hui's triangle (e.g., unnecessary widgets) 3. Fancy effects that affect performance (e.g., excessive animations that slow down rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating calculation logic/view rendering/user interaction), code reusability, and optimization techniques. Deduct 5 points if global state pollution is found or if the code is not structured in logical components; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during resizing or recalculation, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
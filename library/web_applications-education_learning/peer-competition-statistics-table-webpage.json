{
  "index": 428,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Please help me create a webpage for a peer competition statistics table. It should display student names at the beginning, followed by statistics for each exam, and have the capability to save data when closed.",
  "checklist": [
    {
      "id": 0,
      "title": "Is a complete HTML structure with table implementation provided?",
      "description": "Check if the HTML structure includes proper DOCTYPE, head, body sections, and a well-structured table with appropriate headers for student names and exam scores. Evaluate whether semantic HTML elements are used (like <thead>, <tbody>, and proper <th> elements). Score 0 if the basic table structure is missing, 5 if basic implementation exists but lacks semantic elements, 10 if fully implemented with semantic elements and proper structure.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the data management system properly implemented?",
      "description": "Assess whether the code includes functionality to add, edit, and delete student records and exam scores. Check if the implementation allows for flexible addition of new exams. Deduct 5 points if editing functionality is missing, 3 points if deletion capability is absent, and 2 points if adding new exams isn't supported. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the data persistence mechanism correctly implemented?",
      "description": "Evaluate whether localStorage or IndexedDB is properly used to save the table data when the page is closed, and whether data is correctly retrieved when the page is reopened. Check if error handling for storage quota limits or private browsing mode is implemented. Deduct 5 points if data isn't automatically saved on page close, 3 points if loading saved data is buggy, and 5 points if no error handling for storage failures exists. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are sorting and filtering capabilities implemented for the statistics table?",
      "description": "Check if the table includes functionality to sort data by student name or exam scores (ascending/descending), and if filtering options are available for quickly finding specific students or score ranges. Deduct 5 points if sorting functionality is missing or incomplete, 3 points if no filtering options exist, and 2 points if these features aren't intuitive to use. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid input data, localStorage unavailability, concurrent edits by multiple users, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visual statistics like charts/graphs 2. Color-coding for performance levels 3. Export functionality to CSV/Excel 4. Print optimized view). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple sorting algorithms) 2. Function modules unrelated to peer competition statistics (e.g., built-in games) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/view/controller layers), code reusability, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if variable/function naming is unclear or inconsistent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual jank during table interactions, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
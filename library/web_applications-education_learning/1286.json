{
  "index": 1286,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Create an HTML page that generates 50 review questions for a mid-term exam on the first and second Industrial Revolutions, with functionality to display scores and rankings.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the question generation implemented completely?",
      "description": "Evaluate whether the code successfully generates 50 distinct, historically accurate questions about the first and second Industrial Revolutions. Questions should cover diverse aspects (technological innovations, social impacts, key figures, etc.). Score 0 if fewer than 30 questions are generated, 5 if 30-49 questions with limited variety, and 10 if all 50 questions are generated with good historical depth and variety.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the question presentation interface well-designed?",
      "description": "Check whether the questions are displayed in a clear, readable format with appropriate spacing and organization. Interface should include question numbering, multiple-choice options clearly distinguished, and navigation controls. Deduct 5 points if questions are displayed in a cluttered format, 3 points if question navigation is difficult, and 2 points if the text is poorly formatted or hard to read. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the answer submission and validation mechanism functional?",
      "description": "Verify that the code correctly tracks user responses, validates answers against correct solutions, and prevents submission of incomplete tests. Examine if it handles edge cases like double submissions or changing answers. Deduct 5 points if validation logic has flaws, 3 points if there's no prevention of blank submissions, and 2 points if answer changes aren't properly tracked. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Are the scoring and ranking features properly implemented?",
      "description": "Assess whether the code accurately calculates exam scores based on correct answers and displays them clearly. The ranking system should store and display multiple user results in order of performance. Deduct 5 points if score calculation contains errors, 3 points if the ranking display is incomplete or inaccurate, and 2 points if there's no persistence of ranking data between sessions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as incorrect input formats, browser compatibility issues, refreshing the page mid-exam, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Timer functionality to simulate exam conditions 2. Question difficulty classification 3. Progress visualization 4. Performance analytics showing strengths/weaknesses). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems coexisting) 2. Function modules unrelated to the exam (e.g., unrelated animations or media) 3. Fancy effects that affect performance (e.g., heavy visual effects that slow loading). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating question data/UI rendering/scoring logic), code organization, and maintainability. Deduct 5 points if global variable pollution is found or proper design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation of concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Question transition smoothness 2) Feedback when selecting answers 3) Clear visual indication of correct/incorrect answers. Deduct 5 points for each operation without feedback, 3 points for jarring transitions between questions, and 5 points for confusing user interface states (e.g., unclear if an answer was submitted). The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
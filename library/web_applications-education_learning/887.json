{
  "index": 887,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable. Help me write JavaScript code that dynamically generates a three-level menu with the following requirements: The top level is \"Train Selection\", and the second level includes \"My Trains\", \"Morning Trains\", \"Afternoon Trains\", \"Elementary School Evening Tutoring\", and \"Middle School Evening Tutoring\".",
  "checklist": [
    {
      "id": 0,
      "title": "Is the three-level menu structure correctly implemented?",
      "description": "Verify if the code properly implements a hierarchical menu with 'Train Selection' as the top level, and the five specified categories ('My Trains', 'Morning Trains', etc.) as second-level items. Check if the structure allows for third-level items to be added under each second-level category. Deduct 5 points if any level is missing, 3 points if the hierarchy is flattened incorrectly.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the menu generation truly dynamic?",
      "description": "Assess whether the menu is generated programmatically through JavaScript rather than hardcoded in HTML. Check if the menu structure is defined as data (array/object) that can be easily modified without changing the core rendering logic. Full points require a clear separation between data structure and rendering logic. Deduct 5 points if menu items are hardcoded, 3 points if the approach doesn't allow easy menu structure modifications.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there proper event handling for menu interactions?",
      "description": "Evaluate the implementation of expand/collapse functionality for menu items. Check for click handlers that toggle visibility of submenu items, proper event bubbling/delegation, and prevention of default actions when needed. Deduct 5 points if expand/collapse functionality is missing, 3 points if event handling has issues, and 2 points if there's no visual feedback on interaction.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the menu accessible and keyboard-navigable?",
      "description": "Check if the menu implementation includes proper ARIA attributes (aria-expanded, aria-haspopup, etc.), keyboard navigation support (tab, arrow keys, escape), and focus management. Full points require complete keyboard accessibility implementation. Deduct 5 points if ARIA attributes are missing, 5 points if keyboard navigation is not implemented.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty menu items, deeply nested structures, or long item text) and provide error handling. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Smooth animations for expand/collapse 2. Search functionality within the menu 3. Responsive design for different screen sizes). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to toggle menu visibility) 2. Function modules unrelated to menu navigation (e.g., unnecessary animations) 3. Fancy effects that affect performance (e.g., excessive DOM manipulations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating menu data structure/rendering/event handling), code reusability, and maintainability. Deduct 5 points if global variables are overused; deduct 5 points if the code duplication rate is too high (similar logic repeated for different menu levels); deduct 5 points if there's no clear organization of code functionality. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
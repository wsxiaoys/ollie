{
  "index": 1737,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes. I am a history teacher and want to conduct random roll calls in class. Please design a roll call system with a strong historical feel that can run as a webpage on any system. However, I'm not sure how to write clearer prompts.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the core roll call functionality fully implemented?",
      "description": "Check if the system implements basic roll call features such as student roster management, random selection mechanism, and attendance tracking. The code should allow adding/removing students, conducting random selections, and recording attendance status (present/absent). Score 0 if the selection logic is missing, 5 if only basic random selection is implemented, and 10 if the system includes comprehensive roll call management.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the historical theme appropriately implemented?",
      "description": "Evaluate how well the historical theme is integrated into the design. Check for period-appropriate visual elements (such as parchment backgrounds, historical fonts, themed icons), historically inspired terminology, and thematic animations or transitions. Deduct 5 points if historical elements are merely superficial, 3 points if the theme is inconsistent. Score 10 points for an immersive historical experience that enhances rather than hinders functionality.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the data persistence mechanism implemented?",
      "description": "Assess whether the system can save and retrieve roll call data between sessions. Check if local storage, IndexedDB, or another client-side storage solution is utilized to maintain student rosters, attendance records, and historical data. Deduct 5 points if only in-memory storage is used, 3 points if data persistence is partial. The full score is 10 points for comprehensive data management with backup/restore capabilities.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the system easily usable without technical expertise?",
      "description": "Evaluate whether the interface is intuitive enough for a history teacher with minimal technical background. Check if operations like adding students, conducting roll calls, and viewing records can be performed without consulting documentation. Deduct 5 points if critical functions require coding knowledge, 3 points if the workflow is unintuitive. Give 10 points if the system provides clear guidance and is immediately usable.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty student lists, duplicate names, invalid inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Historical facts displayed during roll call 2. Period-appropriate sound effects 3. Themed animations when selecting students). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to select random students) 2. Function modules unrelated to roll call (e.g., a built-in quiz game) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/data/logic layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or if design patterns are not used appropriately; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation of concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles while maintaining historical authenticity: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast interactions, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
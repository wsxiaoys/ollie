{
  "index": 1248,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and expert responses. Make sure the generated code is executable when possible. Task description:\n\nI need you to develop a vocabulary learning app from scratch using React Native + FastAPI + SQLite, supporting features like offline learning, review, and difficult word categorization. Please develop strictly according to the following requirements.\n\nüìå Technical Requirements:\n\nFrontend: React Native (using Expo)\n\nBackend: FastAPI\n\nDatabase: SQLite (supporting offline storage)\n\nFrontend animations: Using react-native-reanimated\n\nData storage: Using AsyncStorage to store user progress, supporting offline learning\n\nState management: Using useContext or Redux Toolkit (as needed)\n\nBackend deployment: Render\n\nüìå Main App Functions:\n1Ô∏è‚É£ Course Management\n\nDisplay course list in HomeScreen, each course includes name, vocabulary count, a progress bar, 2 small circles or other elements to show the number of difficult words and words needing review\n-Have a \"create a new course\" button to help create new courses (displays a small screen with course name and save button)\nSupport course download, allowing users to learn offline\n\nSupport course deletion, but with confirmation prompts to avoid accidental deletion\n\nSupport course selection, all learning modes will load data based on the user's selected course\n\n2Ô∏è‚É£ Learning New Words (LearningScreen)\n\nAutomatically selects 5 new words each time you enter\n-When learning a new word, first displays a word card (wordscreen)\n\nUsers must answer correctly 5 times for each word before it enters the review library\n\nIf answered incorrectly, correct answer count doesn't accumulate\n\nIf users exit midway, progress is reset\n\nSupport 4 learning modes:\n\n4-choice quiz (select definition)\n\n4-choice quiz (select word)\n\n4-choice quiz (select correct pronunciation) (if the word has no pronunciation, this won't be offered)\n\nSpelling mode (10 characters are displayed below (including the word's characters), select the correct characters; there's a hint button that shows one character (for example, for the word \"‰∏çÈîô\", if the user hasn't selected \"‰∏ç\" yet, clicking hint will display \"‰∏ç\", if the user has already selected \"‰∏ç\" then it will show \"Èîô\" and continue to the next question; there's also an \"I don't know\" button that directly shows the result (counted as incorrect))\n\n3Ô∏è‚É£ Quick Practice (QuickPracticeScreen)\n\nQuick practice & review share the same word library\n\nOptimize UI to prevent users from mistakenly thinking there are 5 answers\n-Upon entering, there's a 60-second countdown to 0, users do 4-choice quizzes (reference 4-choice quizzes in learning screen) (vocabulary comes from review), unlimited questions until 3 wrong answers or time reaches 0.\n\n4Ô∏è‚É£ Review Function (ReviewScreen)\n-Each time you enter, 25 words are selected for review (according to the learning algorithm), one question per word, wrong answers will trigger another question for the same word (can display questions for this word later), until all are completed.\n\nReview includes 4 question types:\n\n4-choice quiz (select definition)\n\n4-choice quiz (select word)\n\n4-choice quiz (select correct pronunciation)\n\nSpelling mode (10 characters are displayed below (including the word's characters), select the correct characters; there's a hint button that shows one character (for example, for the word \"‰∏çÈîô\", if the user hasn't selected \"‰∏ç\" yet, clicking hint will display \"‰∏ç\", if the user has already selected \"‰∏ç\" then it will show \"Èîô\" and continue to the next question; there's also an \"I don't know\" button that directly shows the result (counted as incorrect))\n\n5Ô∏è‚É£ Difficult Word Review (DifficultWordsScreen)\n-Upon entering, 5 difficult words are selected, 5 questions per word, wrong answers add one more question for that word, until all are completed.\n\nDifficult word review includes 4 question types (same as review function)\n-For each word, must answer correctly three times to return to the review vocabulary library.\n\n6. Effective for all learning modes (except exceptions)\n\nWhen answered incorrectly, directly displays the word card for this word, with a \"next question\" button below (not applicable to quick learning)\n\nWhen answered incorrectly, shows the correct answer (correct answer turns green, wrong answer turns red)\n\nWhen answered correctly, uses bright green (enhanced visual feedback), then directly proceeds to the next question\n-In all modes, each question has a delete button at the top (directly removes this word from the course) and a difficult word flag (directly adds to difficult words)\n-Questions initially don't show pinyin, but after completion (whether right or wrong) pinyin is displayed (below the question)\nAudio support: If a word has audio, each question automatically plays audio (except for 4-choice quiz (select correct pronunciation)\n\n7. Word Explanation (WordScreen)\n-Displays word information here (vocabulary, pinyin, meaning, examples, a button to play word pronunciation)\n\n8. Courses (CourseScreen)\n-Accessed by clicking a course in course management\n-Has an \"add file\" button for uploading CSV files\n-Displays course vocabulary, difficult words and review words count, 200 words per page\n-Clicking a word here enters that word's card (WordScreen)\n-Each word can be individually deleted\n-Words categorized as difficult have a small indicator\n\n8. Learning Algorithm\n\nSRS Algorithm Core Logic\n\n1. Core Variables\n\nDifficulty coefficient (D): Initial value 0, range [0, 1].\n\nInterval (I): Initial value 1 day.\n\nPerformance score (S): User rating, range [0, 5].\n\nEase factor (EF): Initial value 2.5, range [1.3, 2.5].\n\n2. Algorithm Formula\n\nEase factor (EF) update:\n\nEF_new = EF_old + (0.1 - (5 - S) * (0.08 + (5 - S) * 0.02))\n\nIf EF_new < 1.3, then EF_new = 1.3.\n\nIf EF_new > 2.5, then EF_new = 2.5.\n\nInterval (I) calculation:\n\nIf S ‚â• 3:\n\nI_new = I_old * EF_new\n\nIf S < 3:\n\nI_new = I_old * 0.5\n\nDifficulty coefficient (D) update:\n\nD_new = D_old + (0.1 - (5 - S) * 0.02)\n\nIf D_new < 0, then D_new = 0.\n\nIf D_new > 1, then D_new = 1.\n\n3. Data Structure\n\nLearning unit table:\n\n{ \"id\": \"123\", \"content\": \"apple\", \"translation\": \"ËãπÊûú\", \"audio\": \"apple.mp3\", \"image\": \"apple.jpg\", \"tags\": [\"fruit\", \"basic\"] }\n\nUser progress table:\n\n{ \"user_id\": \"456\", \"unit_id\": \"123\", \"last_reviewed\": \"2023-10-01\", \"next_review\": \"2023-10-08\", \"interval\": 7, \"score\": 3, \"difficulty\": 0.3, \"ease_factor\": 2.0 }\n\n4. Review Queue Generation\n\nDaily review queue:\n\nQuery all learning units where next_review ‚â§ current date.\n\nSort by priority:\n\nLearning units with lower ratings have priority.\n\nLearning units with shorter intervals have priority.\n\nNew learning queue:\n\nRecommend a certain number of new learning units for users daily (e.g., 5).\n\n5. Algorithm Implementation Steps\n\nFirst-time learning:\n\nInitialization:\n\nI = 1, D = 0, EF = 2.5 next_review = today + I\n\nUser practice:\n\nAfter users complete practice, input performance score S.\n\nUpdate algorithm:\n\nUpdate ease factor EF.\n\nUpdate interval I.\n\nUpdate difficulty coefficient D.\n\nUpdate next review time next_review.\n\nSave data:\n\nSave updated I_new, EF_new, D_new, next_review to user progress table.\n\nüìå Other Requirements:\n‚úÖ Ensure UI is strictly user-friendly, beautiful (must research), interactive, with smooth animations (this part must be researched, very important)\n‚úÖ Ensure changes are compatible with existing functions, not affecting user experience\n-Main color: dark blue, research appropriate colors (research color palette, etc.)",
  "checklist": [
    {
      "id": 0,
      "title": "Is the React Native + FastAPI + SQLite integration complete?",
      "description": "Review whether the codebase fully integrates all three required technologies. Check if React Native frontend (using Expo) can communicate with FastAPI backend, if SQLite database is properly implemented with schema supporting all data requirements, and if offline functionality works through AsyncStorage. Score 0 if any major component is missing, 5 if basic integration exists but with significant gaps, and 10 if all technologies are seamlessly integrated with proper error handling between layers.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the course management system fully implemented?",
      "description": "Evaluate whether the HomeScreen displays all required course elements (name, vocabulary count, progress bar, difficult words indicator, review indicator), and if the create/download/delete course functions work properly. Check if course selection affects all learning modes correctly. Deduct 3 points if visual indicators are missing, 3 points if any CRUD operation fails, and 4 points if course selection doesn't properly cascade to learning modes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are all learning modes implemented according to specifications?",
      "description": "Check if all 4 learning modes (two 4-choice quizzes, pronunciation quiz, and spelling mode) are implemented with the specified logic (5 correct answers to enter review library, progress reset on exit). Verify the hint system in spelling mode functions as described. Deduct 2 points for each incorrectly implemented mode, 3 points if progress tracking is broken, and 3 points if the hint system doesn't work as specified. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the SRS learning algorithm correctly implemented?",
      "description": "Analyze the implementation of the specified spaced repetition algorithm, checking if all core variables (difficulty coefficient, interval, performance score, ease factor) are properly calculated and stored. Verify that review queues are generated correctly based on the formula. Deduct 3 points if formula implementation is incorrect, 3 points if data persistence is faulty, and 4 points if the review queue generation logic doesn't prioritize as specified. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network interruption, data inconsistency between offline and online modes, invalid user inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should handle offline mode gracefully, implement proper error boundaries in React components, and include API fallbacks. Give 10 points if all edge cases are handled, 5 points if basic error handling exists, and 0 points if critical edge cases are ignored.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Gamification elements beyond requirements 2. Audio recording for pronunciation comparison 3. Visual learning aids like mnemonics 4. Social sharing of progress). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple state management solutions coexisting) 2. Function modules unrelated to vocabulary learning (e.g., a built-in general calculator) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the learning experience). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (separation of UI components, business logic, and data layer), code reuse patterns for similar learning modes, proper TypeScript types, and build process automation. Deduct 5 points if global state is overused instead of component composition; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if proper CI/CD for both frontend and backend is missing. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows the dark blue color scheme requirements and modern design principles: 1) Harmonious color palette with proper contrast ratios 2) Consistent spacing and alignment across screens 3) Professional typography system with proper hierarchy. Deduct 3 points for inconsistent UI elements, 5 points for poor color contrast affecting accessibility, and 5 points for chaotic layout causing cognitive overload. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the animation system smooth and enhancing user experience?",
      "description": "Judge whether react-native-reanimated is properly implemented for smooth animations: 1) Transition animations between screens 2) Feedback animations for correct/incorrect answers 3) Progress indicators with fluid motion 4) Card flip or reveal animations for word learning. Deduct 3 points for janky animations that drop frames, 4 points for missing animations in key interactions, and 3 points if animations distract from rather than enhance learning. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "hard"
}
{
  "index": 1272,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the generated code is executable for demonstration. Write a reader template using Vue.js that supports automatic splitting of long text and gesture-based page turning.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Vue.js reader component structure properly implemented?",
      "description": "Review whether the code implements a proper Vue.js component structure with clear separation of template, script, and style. Check if Vue lifecycle hooks are correctly utilized (mounted, created, etc.). Score 0 if the component structure is missing, 5 if basic structure exists but lacks proper organization, and 10 if the component follows Vue.js best practices with proper props, emits, and composition API or options API usage.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the text splitting algorithm correctly implemented?",
      "description": "Evaluate the text splitting logic to ensure it correctly calculates visible text per page based on container dimensions, font size, line height, and margins. Check if it handles edge cases like varying character widths, word breaks, and different languages. Deduct 3 points if it only works with fixed-width fonts, 5 points if it breaks words incorrectly, and 7 points if it doesn't adjust to container size changes. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are gesture-based interactions properly implemented for page turning?",
      "description": "Check if touch/swipe gestures are implemented for mobile and click/drag for desktop. Assess whether the code handles touch start, move, and end events correctly, with proper threshold calculation for determining page turns. Deduct 5 points if only one platform is supported (mobile or desktop), 3 points if gesture detection lacks sensitivity configuration, and 5 points if there's no visual feedback during gestures. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the reader include responsive design and viewport adaptation?",
      "description": "Evaluate if the reader adapts to different screen sizes and orientations, recalculating page content dynamically. Check if it uses responsive units (vh/vw/rem) instead of fixed pixels, and implements media queries or dynamic calculations. Deduct 5 points if orientation changes aren't handled, 3 points if font size doesn't scale appropriately, and 5 points if the reader breaks on smaller screens. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty text input, extremely long words, special characters, unicode emojis, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the reading experience (e.g., 1. Page turning animations 2. Theme switching capabilities 3. Font size adjustment 4. Reading progress tracking 5. Bookmark functionality). Add 2 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant event listeners or watchers that could cause memory leaks 2. Function modules unrelated to reading experience (e.g., unnecessary social sharing features) 3. Fancy effects that affect performance (e.g., excessive animations that impact page turning speed). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/logic/state management), reusability of components, and code maintainability. Deduct 5 points if global state is used excessively; deduct 3 points if the code lacks comments or documentation; deduct 5 points if there's significant code duplication instead of reusable functions. Check if proper Vue.js patterns are used (computed properties vs methods, refs vs reactive). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern reading app principles: 1) Appropriate contrast for readability (light/dark modes) 2) Proper spacing between lines and paragraphs 3) Professional typography (suitable font choices, proper line length of 50-75 characters). Deduct 3 points for poor text contrast, 3 points for insufficient line spacing, 4 points for awkward text alignment, and 3 points for lack of visual reading cues. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the page turning interaction smooth and intuitive?",
      "description": "Judge whether the page transitions feel natural and responsive: 1) Page turn animation duration between 200-400ms 2) Visual feedback during swipe/drag operations 3) Clear indicators for page position and total pages. Deduct 5 points for jarring or stuttering transitions, 3 points for lack of visual confirmation during page turns, and 5 points if the interaction method isn't discoverable without instructions. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "medium"
}
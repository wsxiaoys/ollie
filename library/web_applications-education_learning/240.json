{
  "index": 240,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Please help me write a code program for a webpage that can display real-time data for specific stocks, such as stocks that hit the second trading limit and then broke through that limit in today's A-share market.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the real-time stock data acquisition and handling system properly implemented?",
      "description": "Evaluate whether the code includes proper API connections to retrieve real-time A-share market data (using WebSocket or polling), with appropriate data handling for stock limit calculations. Check if the system correctly identifies stocks hitting the second trading limit and subsequently breaking through. Score 0 if no real-time data connection is implemented, 5 if basic polling is used without WebSocket for true real-time updates, and 10 if a complete real-time data pipeline with proper error handling is implemented.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the stock limit detection algorithm accurately implemented?",
      "description": "Assess whether the code correctly implements the logic to detect A-share market trading limits (+10%/-10% or +5%/-5% depending on stock type) and specifically identifies second trading limits and breakthrough events. The algorithm should account for different stock types (main board, ChiNext, STAR Market) which have different limit rules. Deduct 5 points if the algorithm doesn't differentiate between stock types, 3 points if it can't detect second limit breakthroughs correctly, and give 0 points if the core limit detection is flawed.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the data visualization component effectively built?",
      "description": "Review the visualization of stock data using appropriate charts (candlestick, line, volume) with clear indication of limit points. Charts should include proper labeling, tooltips, and responsive design. Score 10 if visualization includes advanced features like zooming, highlighting breakthrough moments, and interactive elements; 5 if basic visualization is present but lacks interactivity; 0 if visualization is missing or fundamentally flawed.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the real-time alert/notification system implemented?",
      "description": "Check if the system provides timely alerts when stocks hit second limits or break through limits. The notification system should offer visual indicators, sound alerts, and/or browser notifications. Assess whether users can customize alert settings. Deduct 3 points if notifications aren't real-time, 5 points if customization is missing, and give 0 points if no notification system exists at all.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code handles common abnormal situations (such as API failures, data delays, network interruptions, etc.) and provides friendly error prompts or recovery mechanisms. Check if there's appropriate error handling for market close periods and pre-market/post-market sessions. Score 10 points for comprehensive error handling and recovery strategies, 5 points for basic error handling, and 0 points if exceptions are unhandled.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Historical pattern recognition for limit breakthroughs 2. Correlation analysis with market indices 3. Automatic generation of technical analysis for stocks hitting limits). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar data fetching methods 2. Function modules unrelated to stock tracking (e.g., unnecessary news feeds) 3. Fancy effects that affect performance (e.g., excessive animations that slow down data updates). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core stock monitoring functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data service/visualization/UI components), unit test coverage, and build process automation. Check for proper state management (React context, Redux, etc.) and component reusability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high; deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional financial dashboard standards?",
      "description": "Evaluate whether the design follows financial dashboard best practices: 1) Professional color scheme suitable for financial data (appropriate use of red/green for up/down movements) 2) Clear data hierarchy with primary and secondary information properly distinguished 3) Proper density of information without overwhelming users. Deduct 3 points for poor information hierarchy, 5 points for non-standard financial color coding, and 5 points for overwhelming or cluttered interfaces. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and responsive to market changes?",
      "description": "Judge whether data updates and UI responses meet financial trading requirements: 1) Data refresh rate appropriate for A-share market movements 2) Clear visual indication of data freshness and last update time 3) Smooth transitions for price changes without disrupting user focus. Deduct 5 points if data appears to lag significantly, 3 points for jarring visual updates that make tracking difficult, and 5 points if there's no indication of data staleness during connection issues. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "hard"
}
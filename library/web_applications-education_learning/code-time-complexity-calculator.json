{
  "index": 1332,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Take care to ensure that the generated code is executable for demonstration. Please help me create a small program that, when a code snippet is pasted into it, can calculate its asymptotic time complexity using Big O notation. Please output this in HTML format.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the code analysis functionality fully implemented?",
      "description": "Evaluate whether the program can accurately parse and analyze code snippets for time complexity. Check if it handles common programming constructs like loops (nested, sequential), conditionals, and recursive functions. Score 0 if no parsing logic exists, 5 if basic pattern matching is implemented, and 10 if comprehensive analysis of complex structures (recursion, divide-and-conquer) is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the program correctly identify and calculate Big O notation?",
      "description": "Review whether the algorithm correctly identifies time complexity patterns (O(1), O(log n), O(n), O(n log n), O(n²), O(2^n), etc.). Check if it can simplify expressions to standard Big O notation by removing constants and lower-order terms. Deduct 5 points for common misclassifications (like mistaking O(n log n) for O(n)), and 3 points for failing to simplify properly. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the code complexity explanation detailed and educational?",
      "description": "Assess whether the program provides explanations for the calculated complexity, including which parts of the code contribute to the overall complexity. It should highlight critical sections of the analyzed code and explain the reasoning behind the calculated Big O notation. Award 10 points if explanations are comprehensive and educational, 5 points if basic reasoning is provided, and 0 if no explanation exists.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the UI provide a good code input experience?",
      "description": "Evaluate whether the HTML interface includes a proper code editor with syntax highlighting, line numbers, and appropriate sizing. Check if the paste functionality works correctly and if there are options for different programming languages. Deduct 3 points for missing syntax highlighting, 3 points for poor code area sizing, and 4 points for lack of language selection options. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid code syntax, extremely large input, incomplete code fragments, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visual representation of computational complexity growth 2. Interactive complexity comparison charts 3. Code optimization suggestions). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar analysis functions 2. Function modules unrelated to complexity analysis (e.g., a built-in full code formatter) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating parsing logic/UI/analysis engine), clear variable naming, and appropriate commenting. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no error handling strategy. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Analysis feedback delay ≤ 500ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual representation of analysis results. Deduct 5 points for each operation without feedback, 3 points for flickering during analysis, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "medium"
}
{
  "index": 744,
  "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that the generated code can be executed and displayed. Help me create a classroom random name-calling website in HTML format. Double-click to run. After completion, self-check the code to make sure it can still run when saved as an HTML file on the desktop.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the random name-calling core functionality properly implemented?",
      "description": "Check if the code implements the fundamental random selection mechanism including proper randomization algorithm (e.g., Fisher-Yates shuffle), handling edge cases like empty lists, and preventing repetitive selections in consecutive calls. Score 0 if core randomization is missing, 5 if basic randomization exists but with flaws, and 10 if it includes advanced features like weighted selection or history tracking.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the application provide complete name management functionality?",
      "description": "Evaluate whether the code includes features for adding, editing, removing names, and saving the name list (using localStorage or other persistence methods). Score 3 points for basic addition/removal, 3 points for editing capabilities, and 4 points for proper persistence between sessions. Deduct all points if names cannot be managed at all.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the classroom context appropriately represented in the interface?",
      "description": "Assess whether the UI reflects a classroom environment with relevant elements (e.g., student roster visualization, classroom theme, teacher controls). Score 0 if there's no classroom context at all, 5 if basic theming exists, and 10 if the interface thoughtfully incorporates classroom metaphors and educational design principles.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the application work in a standalone HTML file as required?",
      "description": "Verify that the code is self-contained in a single HTML file with inline JavaScript and CSS, with no external dependencies that would prevent it from running locally. Check for proper script loading sequence and DOM-ready handlers. Deduct all 10 points if external resources are required; deduct 5 points if the code runs only in specific environments.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty name lists, invalid inputs, browser compatibility issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Animation when selecting names 2. Sound effects for selection 3. Statistics tracking of selection frequency). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to select random names) 2. Function modules unrelated to classroom name-calling (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the page). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating UI/logic/data management), code readability, and appropriate use of JavaScript patterns. Deduct 5 points if global namespace pollution is found; deduct 3 points if the code duplication rate is too high; deduct 2 points if variable/function naming is unclear or inconsistent. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during animations, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
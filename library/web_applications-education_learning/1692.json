{
  "index": 1692,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Create an HTML-based mathematics calculation quiz generator.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the mathematics calculation quiz generation system fully implemented?",
      "description": "Review whether the code accurately implements multiple types of mathematical operations (addition, subtraction, multiplication, division) with configurable difficulty levels and question quantity. Check if it includes proper random number generation, fraction handling, and decimal precision control. Score 0 if only basic addition is implemented, 5 if 2-3 operation types are covered, and 10 if all four operations with advanced features (parentheses, mixed operations) are fully included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the answer validation and scoring mechanism accurately implemented?",
      "description": "Check whether the system includes real-time answer validation, immediate feedback display, and comprehensive scoring calculation. Evaluate if it handles edge cases like decimal precision, negative numbers, and invalid inputs. Deduct 5 points if validation logic has mathematical errors, and 3 points if scoring doesn't account for time factors or difficulty weighting. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the quiz configuration and customization system properly designed?",
      "description": "Evaluate whether users can customize quiz parameters including difficulty level, operation types, number range, question quantity, and time limits. Check if configurations are properly validated and applied. Deduct 5 points if configuration changes don't take effect immediately, and 3 points if parameter validation is missing. Give 10 points if fully customizable with preset difficulty modes.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the complete quiz session management and progress tracking implemented?",
      "description": "Check whether the code includes complete session lifecycle management with features like quiz timer, progress indicator, question navigation, and results summary. Evaluate if it provides detailed performance analytics and history tracking. Deduct 5 points if session state is not properly maintained, and 3 points if progress indicators are inaccurate. Give 10 points if fully implemented with comprehensive analytics.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid mathematical expressions, division by zero, extremely large numbers, malformed user inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the learning experience (e.g., 1. Adaptive difficulty adjustment based on performance 2. Mathematical concept explanations for wrong answers 3. Achievement badges and progress gamification 4. Step-by-step solution breakdown). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple validation logics coexisting) 2. Function modules unrelated to mathematics quiz (e.g., built-in games or social features) 3. Fancy effects that affect calculation performance (e.g., heavy animations during quiz sessions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core quiz functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating quiz logic/UI components/data management), code organization, and maintainability. Deduct 5 points if global state pollution is found or proper separation of concerns is not implemented; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if mathematical calculations are not properly abstracted into reusable functions. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Clean and educational-appropriate color scheme (avoiding distracting colors) 2) Proper layout spacing with clear question-answer separation 3) Readable typography for mathematical expressions (proper font size ≥ 16px for questions). Deduct 3 points for each cluttered visual element, 5 points for poor mathematical notation display, and 5 points for confusing layout that hinders learning. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the interactive elements conform to educational UX principles: 1) Immediate feedback on answer submission ≤ 100ms 2) Smooth transitions between questions 300-500ms 3) Clear visual indicators for correct/incorrect answers 4) Intuitive navigation controls. Deduct 5 points for each interaction without proper feedback, 3 points for delayed mathematical expression rendering, and 5 points if key functions like 'Next Question' or 'Submit' are hard to locate. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
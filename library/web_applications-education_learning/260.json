{
  "index": 260,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code whenever possible. I am an English teacher and need you to create a word wheel using web code.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the word wheel core functionality fully implemented?",
      "description": "Review whether the code accurately implements a functional word wheel through HTML/CSS/JavaScript, including circular letter arrangement, center letter(s), word formation validation, and scoring system. Score 0 if basic wheel structure is missing, 5 if only static display is implemented, and 10 if complete interactive word formation with validation is included.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the word validation and dictionary system properly integrated?",
      "description": "Check whether the implementation includes a comprehensive word validation system with dictionary lookup, duplicate word prevention, and minimum word length requirements. Two-way validation between user input and dictionary database is required. Deduct 5 points if word validation is missing, and 3 points if duplicate detection is not handled. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the educational progression and difficulty system designed?",
      "description": "Evaluate whether the word wheel includes progressive difficulty levels, hints system, and educational feedback mechanisms suitable for English teaching. Check for features like word definitions, usage examples, or difficulty categorization. Deduct 5 points if no educational features are present, and 3 points if progression system is basic. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the complete game state management and persistence implemented?",
      "description": "Check whether the code includes complete game state management, including score tracking, progress saving, session management, and game statistics for educational assessment. Deduct 5 points if state persistence is not implemented, and 3 points if scoring system is missing. Give 10 points if fully implemented with educational tracking features.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid letter combinations, network interruption for dictionary lookup, user input errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative educational features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the learning experience (e.g., 1. Pronunciation audio for found words 2. Word etymology or root analysis 3. Adaptive difficulty based on student performance 4. Collaborative word finding modes). Add 3 points for each practical innovative educational feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems coexisting) 2. Function modules unrelated to word learning (e.g., unrelated mini-games) 3. Fancy effects that affect educational focus (e.g., distracting animations during word formation). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core educational functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating game logic/UI/dictionary layers), code organization, and maintainability for educational software. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code structure is not suitable for educational customization. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface design meet educational software standards?",
      "description": "Evaluate whether the overall design follows educational interface principles: 1) Clear, readable typography suitable for students (font size ≥ 16px, high contrast) 2) Intuitive color coding for educational feedback (correct/incorrect states) 3) Accessible design following WCAG guidelines 4) Clean layout that focuses attention on learning content. Deduct 3 points for each accessibility issue, 5 points for poor readability, and 5 points for confusing educational interface elements. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the interactive experience smooth and educationally appropriate?",
      "description": "Judge whether the interactive elements support effective learning: 1) Immediate feedback for word formation attempts ≤ 200ms 2) Clear visual indicators for valid/invalid selections 3) Smooth letter selection and word building process 4) Appropriate audio-visual feedback for educational reinforcement. Deduct 5 points for each interaction without proper feedback, 3 points for confusing selection states, and 5 points for interactions that hinder the learning flow. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "hard"
}
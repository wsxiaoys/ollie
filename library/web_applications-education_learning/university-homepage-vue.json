{
  "index": 353,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes. Create a university homepage using Vue.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the basic Vue project structure properly implemented?",
      "description": "Check if the project includes essential Vue components (main.js, App.vue), proper directory structure (components/, views/, assets/, etc.), and Vue Router configuration. Deduct 5 points if component organization is chaotic, 5 points if Vue lifecycle hooks are misused, and 5 points if proper Vue binding syntax is missing. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the university homepage navigation system complete?",
      "description": "Evaluate whether the navigation includes essential university sections (Home, About, Academics, Admissions, Research, Campus Life, etc.) with proper routing implementation. Check for mobile-responsive dropdown menus, active link highlighting, and accessibility features. Score 10 points for comprehensive implementation, 5 points if only basic navigation exists, 0 if navigation is broken or missing key sections.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are the homepage content sections properly structured and implemented?",
      "description": "Review implementation of university homepage essential components: hero section with carousel/slider, news/events section with dynamic content, featured programs/departments, testimonials, and call-to-action areas. Deduct 3 points for each missing critical section. Check if Vue components are reusable and properly styled. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the Vue data management appropriate for a university homepage?",
      "description": "Check if proper reactive data management is implemented (Vuex store for complex state or composition API for simpler projects). Verify data fetching mechanisms for dynamic content (news, events, courses). Assess if props and emits are used correctly between components. Score 10 points for well-structured data flow, 5 points for basic implementation, 0 for incorrect/missing data management.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as API failures, image loading errors, form validation, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive campus map with 3D buildings 2. Virtual tour integration 3. Real-time class availability checker 4. Personalized content based on user role/interests). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple carousel implementations) 2. Function modules unrelated to university website needs 3. Fancy effects that affect performance (e.g., excessive animations or transitions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review component modularity, code reusability, proper Vue best practices (single-file components, computed properties, watchers), and build process setup. Deduct 5 points if global state is overused; deduct 5 points if components exceed 300 lines; deduct 5 points if there's no separation of concerns (mixing business logic with UI). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional university design standards?",
      "description": "Evaluate whether the design follows institutional branding principles: 1) Appropriate color scheme reflecting university identity 2) Proper hierarchy highlighting important information 3) Professional typography suitable for educational context 4) Balanced content-to-whitespace ratio. Deduct 3 points for each inappropriate visual element, 5 points for unprofessional color combinations, and 5 points for poor information architecture. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to modern web experience standards: 1) Transition animations between routes 2) Lazy-loading for performance optimization 3) Interactive elements respond within 100ms 4) Mobile-responsive design with touch-friendly interactions. Deduct 5 points for jarring page transitions, 3 points for sluggish interactions, and 5 points for non-responsive layouts. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "medium"
}
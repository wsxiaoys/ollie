{
  "index": 1522,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Modify and implement: While the code is copied on the left side, the preview effect is displayed on the right side. Please provide complete, runnable code.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the split-pane code editor implementation complete?",
      "description": "Check if the code correctly implements a two-pane layout with code editor on the left and preview on the right. Verify if the HTML structure uses proper semantic elements (main, section, etc.) and CSS layout techniques (Grid/Flexbox). Score 0 if no split-pane is implemented, 5 if basic layout exists but with alignment issues, and 10 if the implementation is pixel-perfect with responsive behavior.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the code editor have essential functionality?",
      "description": "Evaluate the code editor's key features: syntax highlighting, line numbers, indentation preservation, and cursor position management. Deduct 3 points if syntax highlighting is missing, 2 points for missing line numbers, and 3 points if indentation behavior is broken. Also check for keyboard shortcuts support (Ctrl+S, Tab handling). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is real-time preview functionality working correctly?",
      "description": "Verify if the live preview updates in real-time as code is typed without requiring manual refresh. Check whether the preview renders HTML/CSS/JS content correctly within an iframe or dedicated rendering area. Deduct 5 points if the preview requires manual refresh, and 3 points if there's noticeable lag (>500ms) between typing and preview update. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is error handling for code execution implemented?",
      "description": "Assess whether the solution properly handles errors that might occur during code execution in the preview pane (JavaScript errors, invalid HTML/CSS). Look for clear error messaging, highlighting of error locations in code, and sandbox protection preventing preview crashes. Deduct 5 points if errors crash the entire interface, and 3 points if errors appear but without helpful context. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as large file loads, special characters, script injection attempts, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Multiple theme support 2. Export/share functionality 3. Auto-formatting of code 4. Multiple file tabs). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple code parsing libraries) 2. Function modules unrelated to code editing and preview (e.g., unrelated analytics) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating editor/preview/UI components), event handling patterns, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the implementation makes minimal use of existing libraries where appropriate. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Editor responsiveness ≤ 100ms 2) Smooth resizing of panes 3) Clear visual feedback when code is applied to preview. Deduct 5 points for each operation without feedback, 3 points for laggy editing experience during typing, and 5 points for awkward pane resizing mechanism. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "medium"
}
{
  "index": 1236,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to ensure the code you generate is executable. I need you to write a mini-program about university teachers assigning homework to students. It should enable real-time interaction and have a user interface. Teachers should be able to specify chapters in a dialog box, and the AI will automatically generate questions. Meanwhile, students should be able to receive these questions. Please help me optimize the logic and overall framework to help the AI better understand my requirements.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the teacher's homework assignment functionality fully implemented?",
      "description": "Review whether the code implements a complete dialog interface for teachers to specify chapters and subject areas for homework assignment. Check if the UI includes proper form elements with validation (required fields, format checking) and clear submission controls. Score 0 if the teacher interface is not implemented, 5 if only basic input fields exist without validation, and 10 if the interface is complete with proper validation, error handling and confirmation mechanisms.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the AI-powered question generation system properly implemented?",
      "description": "Evaluate whether the code implements an AI question generation system that can produce appropriate questions based on teacher inputs. Check if it handles different subject matters, difficulty levels, and question types. Verify the integration method (API calls, local models, etc.) and error handling for generation failures. Deduct 5 points if question variety is limited to one type, 3 points if difficulty levels cannot be specified. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the student's homework receiving functionality implemented?",
      "description": "Check whether the code implements a student interface that can receive, display, and interact with assigned homework. Verify if notifications for new assignments are implemented, whether assignments are properly organized by subject/date, and if submission mechanisms exist. Deduct 5 points if there's no notification system, 3 points if assignments aren't organized logically. Give 10 points if fully implemented with clean UI and proper interaction patterns.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the real-time interaction between teacher and student interfaces implemented?",
      "description": "Assess whether the code implements real-time data synchronization between teacher and student interfaces. Check if WebSocket or similar technology is used for instant updates, whether state management handles concurrent users properly, and if offline state is managed. Deduct 5 points if synchronization is only one-way, 3 points if there's significant delay (>1s) in updates. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network interruption, invalid inputs, server timeouts, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Analytics dashboard for homework completion statistics 2. AI-assisted grading suggestions 3. Interactive feedback channels between teachers and students). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple notification systems coexisting) 2. Function modules unrelated to homework assignment (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., unnecessary animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data models/views/controllers), unit test coverage, and use of appropriate design patterns. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no error handling or logging mechanism. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and intuitive?",
      "description": "Judge whether the interface interactions are intuitive and responsive: 1) Clear visual distinction between teacher and student views 2) Logical workflow from assignment creation to student submission 3) Appropriate loading states and transitions. Deduct 5 points for confusing navigation, 3 points for missing loading indicators during AI question generation, and 5 points for unintuitive action buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "medium"
}
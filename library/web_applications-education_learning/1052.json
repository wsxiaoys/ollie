{
  "index": 1052,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Implement a website that converts SQL to ER diagrams using Vue 3.",
  "checklist": [
    {
      "id": 0,
      "title": "SQL Parsing and Schema Extraction",
      "description": "Evaluate whether the code correctly parses various SQL schemas (CREATE TABLE statements) including constraints, foreign keys, and data types. Look for robust parsing that handles edge cases like quoted identifiers, comments, and multi-line SQL. Check if the parser can detect primary keys, foreign keys, nullable fields, default values, and complex constraints.0 points if no parsing logic is implemented, 5 points for basic CREATE TABLE parsing only, 10 points for complete parsing including constraints, relationships, and handling edge cases.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "ER Diagram Generation Logic",
      "description": "Verify if the code correctly transforms the parsed SQL schema into proper entity-relationship model components. Check if entities, attributes, relationships (one-to-one, one-to-many, many-to-many) are properly identified. Assess whether cardinality and participation constraints are correctly inferred from foreign key definitions.Deduct 3 points if relationships are incorrectly identified, 3 points if attribute types are ignored, 2 points if cardinality is wrong. Full score for accurate transformation.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Vue 3 Implementation Quality",
      "description": "Evaluate if the code properly utilizes Vue 3 features such as Composition API, reactive state management, and component structure. Check for proper separation of concerns, reusable components, and Vue 3 best practices. Assess if the application uses ref/reactive appropriately and implements proper component lifecycle management.3 points for proper Vue 3 setup, 3 points for effective use of Composition API, 2 points for reactive state management, 2 points for well-structured components.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Diagram Visualization Technique",
      "description": "Assess the visual representation technique (SVG/Canvas/WebGL) and rendering approach. Evaluate if entities, relationships, and attributes are visually distinguishable. Check if the diagram uses proper visual grammar (shape, color, connection styles) for ER notation standards (Chen/Crow's Foot/IE Notation/UML).Deduct 5 points if visualization is static/non-interactive, 3 points if standard ER notation principles are violated, 2 points if text/elements overlap. Full score for clean, standard-compliant visualization.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Code Robustness",
      "description": "Evaluate whether the code can handle common abnormal situations (such as malformed SQL input, large schemas, circular references) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases.0 points if no exception handling exists, 5 points if basic input validation is present, 10 points if comprehensive error handling with useful error messages is implemented.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Innovative Features",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time SQL validation 2. Export to multiple formats (PNG, PDF, JSON) 3. Interactive editing of the generated diagram 4. Schema optimization suggestions 5. Collaborative sharing).Add 2 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Feature Redundancy and Performance Impact",
      "description": "Strictly check three types of redundancy: 1. Redundant parsing implementations 2. Function modules unrelated to SQL-to-ER conversion 3. Fancy effects that affect performance (e.g., unnecessary animations, over-complex rendering).Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Engineering Quality",
      "description": "Review modular design (such as separating parsing logic, diagram generation, and UI components), unit test coverage, and build process automation. Check for proper error handling, code documentation, and maintenance considerations.Deduct 5 points if global state pollution is found or design patterns are not used; deduct 3 points if the code duplication rate is too high; deduct 2 points if the build process is not automated.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Interface Design Quality",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color scheme appropriate for a technical tool 2) Proper layout with clear input/output sections 3) Professional typography with proper hierarchy for SQL code and diagram elements.Deduct 3 points for each usability issue, 4 points for poor contrast/readability, 3 points for inconsistent visual styling across components.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Interaction and User Experience",
      "description": "Judge whether the interaction flow meets users' expectations: 1) Clear input method for SQL code 2) Responsive diagram generation 3) Intuitive diagram manipulation (pan/zoom/select) 4) Proper loading states and transitions when processing large schemas.Deduct 3 points for each missing interaction capability, 2 points for laggy/unresponsive UI, 2 points for confusing workflow, 3 points for lack of visual feedback during operations.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
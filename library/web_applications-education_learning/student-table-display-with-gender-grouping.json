{
  "index": 1788,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration. Please create a webpage that displays students from this table, arranged into 6 columns with 10 people in each column. Any extra students should be grouped with students of the same gender.\nThe requirement is to be able to import this data table.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the data import mechanism properly implemented?",
      "description": "Evaluate whether the code provides a user-friendly way to import the student data table. Check if it supports common formats (CSV, JSON, Excel) and handles parsing errors gracefully. Score 0 if no import functionality exists, 5 if basic import is implemented but lacks error handling, and 10 if the import mechanism is robust with proper validation and error feedback.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the 6-column layout correctly implemented?",
      "description": "Verify that the code properly arranges students into exactly 6 columns as required. The layout should be responsive and maintain the column structure across different screen sizes. Deduct 5 points if the layout breaks on common viewport sizes, and 3 points if the columns are not evenly spaced or aligned. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the grouping of students by gender correctly implemented?",
      "description": "Check whether the code correctly groups extra students with others of the same gender. This requires proper identification of gender attributes and algorithm implementation to maintain these groupings. Score 0 if the gender-based grouping is not implemented, 5 if there are errors in the grouping logic, and 10 if the grouping works perfectly under all test cases.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the distribution of 10 people per column handled properly?",
      "description": "Assess whether the code correctly distributes students with 10 people per column and handles the remainder appropriately. The algorithm should account for the gender-based grouping requirement when dealing with extra students. Score 0 if the distribution is incorrect, 5 if there are minor issues with handling edge cases, and 10 if the distribution works perfectly for any number of students.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as missing data fields, malformed input, empty tables, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive sorting/filtering options 2. Visual representation of gender distribution 3. Smooth animations for data presentation). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to parse the same data) 2. Function modules unrelated to student display (e.g., unrelated analytics) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/view/import layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during data loading or filtering, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "medium"
}
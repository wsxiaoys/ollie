{
  "index": 703,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for display. Help me create HTML code for a webpage that can preview the generated code, with an interface divided into two parts: the left side for pasting, deleting, and modifying code, and the right side for real-time preview of the webpage generated by this code.",
  "checklist": [
    {
      "id": 0,
      "title": "Check if the HTML code correctly implements a two-panel layout with clear separation between the code editing area (left) and preview area (right). The layout should be responsive and maintain proper proportions across different screen sizes. Score 0 if the dual-panel structure is missing, 5 if implemented but with layout issues, 10 if perfectly implemented with responsive design considerations.",
      "description": "Check if the HTML code correctly implements a two-panel layout with clear separation between the code editing area (left) and preview area (right). The layout should be responsive and maintain proper proportions across different screen sizes. Score 0 if the dual-panel structure is missing, 5 if implemented but with layout issues, 10 if perfectly implemented with responsive design considerations.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Evaluate if the code editor panel provides essential editing features: text input area with proper styling (syntax highlighting preferred), clear buttons for operations (paste/delete/modify), and appropriate keyboard shortcuts. The editor should handle various HTML inputs correctly, including special characters. Deduct 5 points if syntax highlighting is missing, 3 points if keyboard shortcuts aren't implemented, and 2 points if the editor doesn't preserve whitespace formatting. Full score is 10 points.",
      "description": "Evaluate if the code editor panel provides essential editing features: text input area with proper styling (syntax highlighting preferred), clear buttons for operations (paste/delete/modify), and appropriate keyboard shortcuts. The editor should handle various HTML inputs correctly, including special characters. Deduct 5 points if syntax highlighting is missing, 3 points if keyboard shortcuts aren't implemented, and 2 points if the editor doesn't preserve whitespace formatting. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Verify that changes in the editor are reflected in real-time in the preview panel without requiring manual refresh. Check if the preview handles updating without flickering and maintains scroll position when appropriate. Implementation should use efficient event listening (e.g., input events with debouncing). Deduct 5 points if updates require manual action, 3 points if there's significant delay (>300ms), and 2 points if the preview flickers during updates. Full score is 10 points.",
      "description": "Verify that changes in the editor are reflected in real-time in the preview panel without requiring manual refresh. Check if the preview handles updating without flickering and maintains scroll position when appropriate. Implementation should use efficient event listening (e.g., input events with debouncing). Deduct 5 points if updates require manual action, 3 points if there's significant delay (>300ms), and 2 points if the preview flickers during updates. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Assess whether the system gracefully handles invalid HTML input without breaking the preview or editor functionality. It should provide user feedback about errors (highlighting or error messages) and attempt to render what it can despite errors. Deduct 5 points if invalid code causes the preview to break completely, 3 points if no error feedback is provided, and 2 points if the system doesn't attempt partial rendering of valid portions. Full score is 10 points.",
      "description": "Assess whether the system gracefully handles invalid HTML input without breaking the preview or editor functionality. It should provide user feedback about errors (highlighting or error messages) and attempt to render what it can despite errors. Deduct 5 points if invalid code causes the preview to break completely, 3 points if no error feedback is provided, and 2 points if the system doesn't attempt partial rendering of valid portions. Full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Evaluate whether the code can handle common abnormal situations (such as extremely large code inputs, script injection attempts, iframe security issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "description": "Evaluate whether the code can handle common abnormal situations (such as extremely large code inputs, script injection attempts, iframe security issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Code formatting/beautifying options 2. Multiple theme support for the editor 3. Ability to save/load snippets locally). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Code formatting/beautifying options 2. Multiple theme support for the editor 3. Ability to save/load snippets locally). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to accomplish the same editing task) 2. Function modules unrelated to code editing and previewing (e.g., a built-in chat system) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to accomplish the same editing task) 2. Function modules unrelated to code editing and previewing (e.g., a built-in chat system) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Review modular design (such as separating UI/logic/event handling), code organization, and maintainability. Deduct 5 points if global namespace pollution is found or if proper event delegation isn't used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between structure, presentation, and behavior (HTML/CSS/JS). The full score is 10 points.",
      "description": "Review modular design (such as separating UI/logic/event handling), code organization, and maintainability. Deduct 5 points if global namespace pollution is found or if proper event delegation isn't used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between structure, presentation, and behavior (HTML/CSS/JS). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (monospace font for editor, appropriate size contrast between panels). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for poor visual distinction between panels. The full score is 10 points.",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (monospace font for editor, appropriate size contrast between panels). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for poor visual distinction between panels. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Judge whether the dynamic effects conform to human perception characteristics: 1) Editor responsiveness ≤ 50ms 2) Preview update speed ≤ 300ms 3) Clear visual indication during processing/updating. Deduct 5 points for noticeable lag when typing in the editor, 3 points for missing loading indicators during preview updates, and 5 points for interaction elements without hover/focus states. The full score is 10 points.",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Editor responsiveness ≤ 50ms 2) Preview update speed ≤ 300ms 3) Clear visual indication during processing/updating. Deduct 5 points for noticeable lag when typing in the editor, 3 points for missing loading indicators during preview updates, and 5 points for interaction elements without hover/focus states. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
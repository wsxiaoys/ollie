{
  "index": 439,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that the generated code is executable for demonstration. The task is to: implement a program that can identify words in a file, sort them, provide translations and example sentences for each word, and then help me generate an interactive HTML page with flashcards to aid word memorization.\n\n1. The page should be aesthetically pleasing, concise and intuitive, with 3D-rotating word cards and a button below to randomly switch to the next word\n2. Interactive buttons should function properly with a reasonable layout without any overlapping elements\n3. All words must be included, generated completely at once, without omissions",
  "checklist": [
    {
      "id": 0,
      "title": "Is the word identification and extraction functionality implemented correctly?",
      "description": "Evaluate whether the code can accurately extract all unique words from a text file, ignoring punctuation and case sensitivity. Check if it properly handles special cases like contractions, hyphenated words, and various encodings. Score 0 if word extraction is missing, 5 if basic extraction exists but with edge case issues, 10 if comprehensive with proper text processing techniques.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the word sorting functionality implemented properly?",
      "description": "Check if words are sorted alphabetically or by other meaningful criteria (frequency, length, etc.). Verify that the sorting algorithm handles all edge cases like non-ASCII characters and is efficient for large word lists. Score 0 if sorting is missing, 5 if basic sorting exists but with issues, 10 if properly implemented with clear sorting logic.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Are translations and example sentences provided for each word?",
      "description": "Assess whether the code includes mechanisms to fetch translations and contextual example sentences (either through an API, embedded database, or other sources). Verify that translations are relevant and example sentences demonstrate proper word usage. Score 0 if missing, 5 if only translations exist without examples, 10 if both are comprehensively implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the 3D-rotating flashcard visualization implemented effectively?",
      "description": "Evaluate whether the code properly implements 3D-rotating animations for the flashcards using CSS 3D transforms or JavaScript libraries. Check if the rotation reveals the word, translation, and example sentence in an intuitive manner. Score 0 if rotation is missing, 5 if basic rotation exists but appears janky or incomplete, 10 if smooth, natural rotation with proper perspective is achieved.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as empty files, extremely large word lists, network issues when fetching translations, invalid input formats, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the learning experience (e.g., 1. Word pronunciation audio 2. Difficulty categorization for spaced repetition 3. Progress tracking system 4. Visual word associations/mnemonics). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple sorting methods without purpose) 2. Function modules unrelated to vocabulary learning (e.g., built-in games not tied to word memorization) 3. Fancy effects that affect performance (e.g., complex animations that slow page loading). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data processing/UI rendering/user interaction logic), code reusability, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Card flip/rotation animations complete within 500-800ms 2) Random word selection responds within 100ms 3) Clear visual cues for interactive elements. Deduct 5 points for each operation without feedback, 3 points for jerky animations, and 5 points if the random word selection button is not prominently displayed or easily accessible. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "easy"
}
{
  "index": 324,
  "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be careful to ensure that the generated code is executable for demonstration. Create a small webpage that displays real-time convertible bond market information.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the real-time data fetching mechanism implemented correctly?",
      "description": "Review if the code implements proper API calls for fetching convertible bond data, includes error handling for API failures, and utilizes appropriate polling intervals or WebSocket connections. Score 0 if there's no real-time data implementation, 5 if basic polling is implemented without error handling, and 10 if it includes proper error handling, connection management, and fallback mechanisms.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the webpage display all essential convertible bond information?",
      "description": "Check if the display includes critical bond metrics such as current price, yield to maturity, conversion premium, underlying stock performance, and bond rating. Deduct 2 points for each missing essential data point. The display should also include search/filter capabilities and sorting options. Give 10 points if all essential information is present with proper organization.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is there appropriate data visualization for bond performance?",
      "description": "Evaluate whether the code implements visual elements (charts, graphs) for bond price history, yield curves, or comparison with underlying stocks. Deduct 5 points if there are no visualizations, 3 points if visualizations are present but lack interactivity (zoom, hover details). Give full 10 points if visualizations are interactive, responsive, and professionally rendered.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the code implement alerting or notification features?",
      "description": "Assess if the webpage includes functionality for price alerts, conversion opportunity notifications, or significant event indicators. Score 0 if no alerting features exist, 5 if basic visual indicators are present without configuration options, and 10 if comprehensive, configurable alert systems are implemented with both visual and audio notifications.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as API failure, data format changes, network interruption, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Automated bond recommendation system 2. Market sentiment analysis visualization 3. Customizable dashboard layouts). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to sort the same data) 2. Function modules unrelated to bond markets (e.g., cryptocurrency trackers) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data fetching/visualization/user interface layers), code reusability, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no consideration for performance with large datasets. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the financial data display follows industry design principles: 1) Clear information hierarchy with important metrics emphasized 2) Proper use of color to indicate market movements (e.g., red for down, green for up) 3) Professional typography with adequate contrast ratios. Deduct 3 points for cluttered layouts, 5 points for misleading visual representations of data, and 5 points for poor readability of critical information. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to financial application standards: 1) Real-time updates without page flicker 2) Smooth transitions for changing data values 3) Clear loading states during data fetching. Deduct 5 points for jarring data refreshes, 3 points for lack of visual feedback during user interactions, and 5 points for confusing navigation between different bond information views. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "hard"
}
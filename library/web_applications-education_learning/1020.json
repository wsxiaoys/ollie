{
  "index": 1020,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration purposes. Visualization of merge sort.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the merge sort algorithm correctly implemented?",
      "description": "Check if the algorithm follows the correct divide-and-conquer approach with proper splitting and merging steps. Verify that the time complexity is O(n log n) and space complexity is O(n). Deduct 5 points if the core algorithm has logical errors, 3 points if edge cases are not handled (empty arrays, single elements), and 2 points if unnecessary operations affect performance. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Does the visualization clearly show each step of the merge sort process?",
      "description": "Evaluate whether the visualization distinctly represents each phase: dividing the array, comparing elements, and merging the subarrays. There should be clear visual differentiation between unsorted elements, elements being compared, and sorted subarrays. Give 0 points if the core visualization logic is missing, 5 points if only basic steps are shown, and 10 points if all merge sort phases are comprehensively visualized.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the animation of the sorting process smooth and informative?",
      "description": "Review whether the animation flows at an appropriate pace with controls for speed adjustment. Check if transitions between steps are smooth (not abrupt) and if key comparison and swap operations are highlighted. Deduct 5 points if animations are jerky or inconsistent, 3 points if speed controls are missing, and 2 points if transitions lack clarity. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Does the visualization include informative metrics and educational elements?",
      "description": "Check if the implementation displays relevant metrics such as comparison count, array access count, current recursion depth, and time/space complexity explanations. Educational tooltips or explanatory text should help users understand the algorithm's operation. Deduct 3 points for each missing key metric, and award full 10 points only if comprehensive educational elements are included.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid input types, extremely large arrays, browser compatibility issues, etc.) and provide friendly error prompts or graceful degradation. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Multiple array generation options with different distributions 2. Side-by-side comparison with other sorting algorithms 3. Interactive mode allowing users to perform merge steps manually). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visualization functions 2. Function modules unrelated to merge sort or algorithm visualization 3. Fancy effects that affect performance without adding educational value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core visualization is interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating algorithm logic/visualization/UI controls), code reusability, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the visualization stutters on arrays larger than 100 elements. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (logical color coding for different states) 2) Proper layout spacing (clear separation between controls and visualization area) 3) Professional font system (legible labels and explanatory text). Deduct 3 points for each crowded visual element, 5 points for confusing color schemes that don't aid understanding, and 5 points for poor arrangement of visualization components. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Responsive controls with immediate visual feedback 2) Appropriate animation timing that balances educational clarity with engaging pace 3) Clear visual indication of the current state of the algorithm. Deduct 5 points for laggy animations, 3 points for confusing transitions between steps, and 5 points for controls that don't clearly indicate their function. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "medium"
}
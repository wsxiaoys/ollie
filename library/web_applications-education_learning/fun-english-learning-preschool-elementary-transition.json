{
  "index": 935,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that the code you provide is executable for demonstration purposes. Write a fun English learning program for the transition from preschool to elementary education.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the educational content age-appropriate and pedagogically sound?",
      "description": "Examine whether the program incorporates age-appropriate vocabulary (250-500 words for 5-7 year olds), uses phonics-based learning methods, and includes basic sight words. Check for progressive difficulty levels that scaffold learning. Deduct 5 points if content is too advanced/simple for the target age group, and 5 points if fundamental language acquisition principles are ignored. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is the English curriculum structure comprehensive?",
      "description": "Verify the program covers essential language components: 1) Phonics and letter recognition 2) Basic vocabulary building 3) Simple grammar structures 4) Reading comprehension exercises. Each missing component costs 2.5 points. Assess whether the learning path has clear progression (introduces letters before words, simple sentences before complex ones). The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Does the program implement effective interactive learning mechanisms?",
      "description": "Evaluate whether the code includes gamified learning elements such as immediate feedback loops, reward systems, progress tracking, and varied exercise types (matching, fill-in-blanks, picture-word association). Check for voice recognition/audio components for pronunciation practice. Score 10 points if all elements are present with varied interaction types, 5 points if basic interactivity exists but lacks variety, 0 points if minimal interaction is implemented.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the assessment and progress tracking system well-designed?",
      "description": "Assess whether the code implements appropriate performance measurement (adaptive difficulty, success rate tracking, visual progress indicators, streak counters, etc.). Check for persistent storage of learning progress and the ability to generate reports for parents/teachers. Deduct 3 points if assessment lacks adaptability, 4 points if progress isn't saved between sessions, and 3 points if no reporting functionality exists. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as incorrect input formats, unexpected user behavior, resource loading failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance learning (e.g., 1. Augmented reality alphabet recognition 2. Voice-activated interactive characters 3. Adaptive learning paths based on performance analytics). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar learning exercises 2. Function modules unrelated to English learning (e.g., excessive mini-games without educational value) 3. Fancy effects that affect performance or distract from learning objectives. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core educational functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating educational content/UI/game mechanics), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet child-friendly design standards?",
      "description": "Evaluate whether the overall design follows child-appropriate design principles: 1) Bright but non-straining color palette 2) Large, readable typography (min 18px font size) 3) Intuitive navigation with visual cues 4) Age-appropriate illustrations. Deduct 3 points for each visually overwhelming screen, 5 points for poor readability, and 5 points for confusing navigation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction engaging and developmentally appropriate?",
      "description": "Judge whether the dynamic effects support child development: 1) Interaction feedback is immediate and clear 2) Animations are simple and purposeful (300-700ms) 3) Tasks respect attention spans (activities under 5 minutes) 4) Input methods account for developing motor skills. Deduct 3 points for each delayed feedback instance, 3 points for distracting animations, and 4 points for age-inappropriate interaction patterns. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "medium"
}
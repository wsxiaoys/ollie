{
  "index": 897,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Be careful to ensure that the generated code is executable for demonstration. Create a classroom information maintenance interface, including classroom name, description, class occupancy times (various time slots each week), names of occupying courses, and teacher information. Include functions such as adding, modifying, list viewing, detailed viewing, etc., forming several HTML pages.",
  "checklist": [
    {
      "id": 0,
      "title": "Is the classroom information data model well-designed?",
      "description": "Review whether the code implements a comprehensive data model for classrooms that includes all required fields (name, description, weekly time slots, course names, teacher information). Check for proper data types, validation rules, and relationships. Score 0 if missing critical fields, 5 if basic structure is there but incomplete, 10 if the model is complete with proper validation and relationships.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Are all CRUD operations fully implemented?",
      "description": "Evaluate whether the code properly implements all required functions: adding new classrooms, modifying existing ones, listing all classrooms, and viewing classroom details. Check if each operation includes proper form validation, error handling, and success feedback. Deduct 3 points for each missing operation, 2 points for incomplete implementation per operation. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the time slot management system properly implemented?",
      "description": "Examine the implementation of the weekly time slot system. Check for proper handling of time conflicts, overlapping schedules, visual representation of occupied vs. available times, and intuitive time selection UI. Deduct 5 points if conflict detection is missing, 3 points if the time representation is confusing, and 5 points if bulk time slot operations aren't supported. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the multi-page navigation and flow logical?",
      "description": "Assess whether the multiple HTML pages work together as a cohesive system. Check for consistent navigation between pages, proper state preservation when moving between pages, breadcrumbs or other navigation aids, and logical workflow for common tasks. Deduct 5 points if navigation is confusing/missing, 3 points if state is lost between pages, and 3 points if the workflow requires excessive clicks. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as invalid form input, duplicate classroom names, conflicting time slots, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Calendar visualization of classroom usage 2. Export to PDF/Excel functionality 3. Search/filter capabilities for finding available classrooms). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple forms for the same operation) 2. Function modules unrelated to classroom management (e.g., a built-in chat system) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating data/view/controller layers), code organization, reusable components, and maintainability. Deduct 5 points if global variables are overused or appropriate design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation of concerns. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast interactions, and 5 points for hard-to-find key function buttons. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Education/Learning",
  "difficulty": "medium"
}
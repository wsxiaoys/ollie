{
  "index": 1290,
  "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure any code you generate is executable when displayed. Write a Vue3 application for searching addresses using Tianditu (China's mapping service).",
  "checklist": [
    {
      "id": 0,
      "title": "Is the Vue3 application correctly initialized with proper structure?",
      "description": "Check if the application uses Vue3 composition API (with setup() or <script setup>), has appropriate component structure, and follows Vue best practices. Look for proper import statements, component registration, and directory organization. Score 0 if Vue3 is not used, 5 if basic Vue3 structure is implemented but lacking composition API, and 10 if fully structured according to Vue3 standards.",
      "maxScore": 10
    },
    {
      "id": 1,
      "title": "Is Tianditu API integration properly implemented?",
      "description": "Verify proper Tianditu API key authentication and initialization. The code should include robust error handling for API failures (timeouts, invalid keys, service unavailability). Examine if the necessary Tianditu map modules are imported correctly. Deduct 5 points if the API key is hardcoded without environment variable protection, 3 points if error handling is minimal. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 2,
      "title": "Is the address search functionality complete and user-friendly?",
      "description": "Evaluate the implementation of search input, processing, and results display. Check for features like autocomplete suggestions, search history, and clear search options. The search should handle different formats of Chinese addresses properly. Score 0 if search doesn't work, 5 if basic search works but lacks advanced features, and 10 if search is comprehensive with good UX features.",
      "maxScore": 10
    },
    {
      "id": 3,
      "title": "Is the map display and interaction properly implemented?",
      "description": "Review map initialization, proper zoom levels, marker placement, and map interaction controls. Check for responsive map resizing based on viewport changes. Examine if search results are visually highlighted on the map and if interaction with map markers provides useful information. Deduct 3 points for missing map controls, 3 points for non-responsive map display, and 5 points if markers aren't interactive. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 4,
      "title": "Is the code robust?",
      "description": "Evaluate whether the code can handle common abnormal situations (such as network errors, invalid search queries, API limitations, invalid addresses, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.",
      "maxScore": 10
    },
    {
      "id": 5,
      "title": "Are there any innovative features that are eye-catching?",
      "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Route planning with multiple waypoints 2. Address favorites system 3. Street View integration 4. Geolocation features showing user's current location). Add 3 points for each practical innovative feature implemented (maximum 10 points).",
      "maxScore": 10
    },
    {
      "id": 6,
      "title": "Are there any redundant features?",
      "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple map instances or search methods) 2. Function modules unrelated to address searching (e.g., unnecessary social sharing features) 3. Fancy effects that affect performance (e.g., heavy animations that slow map rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.",
      "maxScore": 10
    },
    {
      "id": 7,
      "title": "Does the code have engineering quality?",
      "description": "Review modular design (such as separating API services/UI components/state management), unit test coverage, and build process configuration. Check for proper use of Vue3 reactivity system (ref, reactive, computed, watch). Deduct 5 points if global state pollution is found or Vuex/Pinia isn't used for complex state management; deduct 5 points if the component reusability is poor; deduct 5 points if the build process is not properly configured. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 8,
      "title": "Does the interface vision meet professional design standards?",
      "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size â‰¥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.",
      "maxScore": 10
    },
    {
      "id": 9,
      "title": "Is the dynamic interaction smooth and seamless?",
      "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Search results appear within 300ms 2) Map zooming/panning animations are smooth 3) Clear visual focus and loading states during search. Deduct 5 points for operations without feedback, 3 points for laggy map interactions, and 5 points for confusing UI state transitions. Check specifically if search suggestions appear naturally and map markers have smooth entrance animations. The full score is 10 points.",
      "maxScore": 10
    }
  ],
  "class": "Web Applications-Mapping/Location Services",
  "difficulty": "easy"
}